/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/ansi-html-community/index.js":
/*!***************************************************!*\
  !*** ./node_modules/ansi-html-community/index.js ***!
  \***************************************************/
/***/ (function(module) {

    "use strict";


    module.exports = ansiHTML
    
    // Reference to https://github.com/sindresorhus/ansi-regex
    var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/
    
    var _defColors = {
      reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]
      black: '000',
      red: 'ff0000',
      green: '209805',
      yellow: 'e8bf03',
      blue: '0000ff',
      magenta: 'ff00ff',
      cyan: '00ffee',
      lightgrey: 'f0f0f0',
      darkgrey: '888'
    }
    var _styles = {
      30: 'black',
      31: 'red',
      32: 'green',
      33: 'yellow',
      34: 'blue',
      35: 'magenta',
      36: 'cyan',
      37: 'lightgrey'
    }
    var _openTags = {
      '1': 'font-weight:bold', // bold
      '2': 'opacity:0.5', // dim
      '3': '<i>', // italic
      '4': '<u>', // underscore
      '8': 'display:none', // hidden
      '9': '<del>' // delete
    }
    var _closeTags = {
      '23': '</i>', // reset italic
      '24': '</u>', // reset underscore
      '29': '</del>' // reset delete
    }
    
    ;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
      _closeTags[n] = '</span>'
    })
    
    /**
     * Converts text with ANSI color codes to HTML markup.
     * @param {String} text
     * @returns {*}
     */
    function ansiHTML (text) {
      // Returns the text if the string has no ANSI escape code.
      if (!_regANSI.test(text)) {
        return text
      }
    
      // Cache opened sequence.
      var ansiCodes = []
      // Replace with markup.
      var ret = text.replace(/\033\[(\d+)m/g, function (match, seq) {
        var ot = _openTags[seq]
        if (ot) {
          // If current sequence has been opened, close it.
          if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast
            ansiCodes.pop()
            return '</span>'
          }
          // Open tag.
          ansiCodes.push(seq)
          return ot[0] === '<' ? ot : '<span style="' + ot + ';">'
        }
    
        var ct = _closeTags[seq]
        if (ct) {
          // Pop sequence
          ansiCodes.pop()
          return ct
        }
        return ''
      })
    
      // Make sure tags are closed.
      var l = ansiCodes.length
      ;(l > 0) && (ret += Array(l + 1).join('</span>'))
    
      return ret
    }
    
    /**
     * Customize colors.
     * @param {Object} colors reference to _defColors
     */
    ansiHTML.setColors = function (colors) {
      if (typeof colors !== 'object') {
        throw new Error('`colors` parameter must be an Object.')
      }
    
      var _finalColors = {}
      for (var key in _defColors) {
        var hex = colors.hasOwnProperty(key) ? colors[key] : null
        if (!hex) {
          _finalColors[key] = _defColors[key]
          continue
        }
        if ('reset' === key) {
          if (typeof hex === 'string') {
            hex = [hex]
          }
          if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
            return typeof h !== 'string'
          })) {
            throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')
          }
          var defHexColor = _defColors[key]
          if (!hex[0]) {
            hex[0] = defHexColor[0]
          }
          if (hex.length === 1 || !hex[1]) {
            hex = [hex[0]]
            hex.push(defHexColor[1])
          }
    
          hex = hex.slice(0, 2)
        } else if (typeof hex !== 'string') {
          throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')
        }
        _finalColors[key] = hex
      }
      _setTags(_finalColors)
    }
    
    /**
     * Reset colors.
     */
    ansiHTML.reset = function () {
      _setTags(_defColors)
    }
    
    /**
     * Expose tags, including open and close.
     * @type {Object}
     */
    ansiHTML.tags = {}
    
    if (Object.defineProperty) {
      Object.defineProperty(ansiHTML.tags, 'open', {
        get: function () { return _openTags }
      })
      Object.defineProperty(ansiHTML.tags, 'close', {
        get: function () { return _closeTags }
      })
    } else {
      ansiHTML.tags.open = _openTags
      ansiHTML.tags.close = _closeTags
    }
    
    function _setTags (colors) {
      // reset all
      _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]
      // inverse
      _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]
      // dark grey
      _openTags['90'] = 'color:#' + colors.darkgrey
    
      for (var code in _styles) {
        var color = _styles[code]
        var oriColor = colors[color] || '000'
        _openTags[code] = 'color:#' + oriColor
        code = parseInt(code)
        _openTags[(code + 10).toString()] = 'background:#' + oriColor
      }
    }
    
    ansiHTML.reset()
    
    
    /***/ }),
    
    /***/ "./node_modules/events/events.js":
    /*!***************************************!*\
      !*** ./node_modules/events/events.js ***!
      \***************************************/
    /***/ (function(module) {
    
    "use strict";
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    
    
    var R = typeof Reflect === 'object' ? Reflect : null
    var ReflectApply = R && typeof R.apply === 'function'
      ? R.apply
      : function ReflectApply(target, receiver, args) {
        return Function.prototype.apply.call(target, receiver, args);
      }
    
    var ReflectOwnKeys
    if (R && typeof R.ownKeys === 'function') {
      ReflectOwnKeys = R.ownKeys
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target)
          .concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    
    function ProcessEmitWarning(warning) {
      if (console && console.warn) console.warn(warning);
    }
    
    var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
      return value !== value;
    }
    
    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module.exports = EventEmitter;
    module.exports.once = once;
    
    // Backwards-compat with node 0.10.x
    EventEmitter.EventEmitter = EventEmitter;
    
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = undefined;
    
    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    var defaultMaxListeners = 10;
    
    function checkListener(listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    
    Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        }
        defaultMaxListeners = arg;
      }
    });
    
    EventEmitter.init = function() {
    
      if (this._events === undefined ||
          this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
      }
    
      this._maxListeners = this._maxListeners || undefined;
    };
    
    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
      }
      this._maxListeners = n;
      return this;
    };
    
    function _getMaxListeners(that) {
      if (that._maxListeners === undefined)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }
    
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    
    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
      var doError = (type === 'error');
    
      var events = this._events;
      if (events !== undefined)
        doError = (doError && events.error === undefined);
      else if (!doError)
        return false;
    
      // If there is no 'error' event listener then throw.
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          // Note: The comments on the `throw` lines are intentional, they show
          // up in Node's output if this results in an unhandled exception.
          throw er; // Unhandled 'error' event
        }
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
      }
    
      var handler = events[type];
    
      if (handler === undefined)
        return false;
    
      if (typeof handler === 'function') {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }
    
      return true;
    };
    
    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;
    
      checkListener(listener);
    
      events = target._events;
      if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
          target.emit('newListener', type,
                      listener.listener ? listener.listener : listener);
    
          // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object
          events = target._events;
        }
        existing = events[type];
      }
    
      if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] =
            prepend ? [listener, existing] : [existing, listener];
          // If we've already got an array, just append.
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
    
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          // No error code for this since it is a Warning
          // eslint-disable-next-line no-restricted-syntax
          var w = new Error('Possible EventEmitter memory leak detected. ' +
                              existing.length + ' ' + String(type) + ' listeners ' +
                              'added. Use emitter.setMaxListeners() to ' +
                              'increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }
    
      return target;
    }
    
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    
    EventEmitter.prototype.prependListener =
        function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };
    
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    
    EventEmitter.prototype.once = function once(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    
    EventEmitter.prototype.prependOnceListener =
        function prependOnceListener(type, listener) {
          checkListener(listener);
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };
    
    // Emits a 'removeListener' event if and only if the listener was removed.
    EventEmitter.prototype.removeListener =
        function removeListener(type, listener) {
          var list, events, position, i, originalListener;
    
          checkListener(listener);
    
          events = this._events;
          if (events === undefined)
            return this;
    
          list = events[type];
          if (list === undefined)
            return this;
    
          if (list === listener || list.listener === listener) {
            if (--this._eventsCount === 0)
              this._events = Object.create(null);
            else {
              delete events[type];
              if (events.removeListener)
                this.emit('removeListener', type, list.listener || listener);
            }
          } else if (typeof list !== 'function') {
            position = -1;
    
            for (i = list.length - 1; i >= 0; i--) {
              if (list[i] === listener || list[i].listener === listener) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }
    
            if (position < 0)
              return this;
    
            if (position === 0)
              list.shift();
            else {
              spliceOne(list, position);
            }
    
            if (list.length === 1)
              events[type] = list[0];
    
            if (events.removeListener !== undefined)
              this.emit('removeListener', type, originalListener || listener);
          }
    
          return this;
        };
    
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    
    EventEmitter.prototype.removeAllListeners =
        function removeAllListeners(type) {
          var listeners, events, i;
    
          events = this._events;
          if (events === undefined)
            return this;
    
          // not listening for removeListener, no need to emit
          if (events.removeListener === undefined) {
            if (arguments.length === 0) {
              this._events = Object.create(null);
              this._eventsCount = 0;
            } else if (events[type] !== undefined) {
              if (--this._eventsCount === 0)
                this._events = Object.create(null);
              else
                delete events[type];
            }
            return this;
          }
    
          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            var keys = Object.keys(events);
            var key;
            for (i = 0; i < keys.length; ++i) {
              key = keys[i];
              if (key === 'removeListener') continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = Object.create(null);
            this._eventsCount = 0;
            return this;
          }
    
          listeners = events[type];
    
          if (typeof listeners === 'function') {
            this.removeListener(type, listeners);
          } else if (listeners !== undefined) {
            // LIFO order
            for (i = listeners.length - 1; i >= 0; i--) {
              this.removeListener(type, listeners[i]);
            }
          }
    
          return this;
        };
    
    function _listeners(target, type, unwrap) {
      var events = target._events;
    
      if (events === undefined)
        return [];
    
      var evlistener = events[type];
      if (evlistener === undefined)
        return [];
    
      if (typeof evlistener === 'function')
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
    
      return unwrap ?
        unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    
    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    
    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
    
      if (events !== undefined) {
        var evlistener = events[type];
    
        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener !== undefined) {
          return evlistener.length;
        }
      }
    
      return 0;
    }
    
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }
    
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }
    
    function once(emitter, name) {
      return new Promise(function (resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
    
        function resolver() {
          if (typeof emitter.removeListener === 'function') {
            emitter.removeListener('error', errorListener);
          }
          resolve([].slice.call(arguments));
        };
    
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== 'error') {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === 'function') {
        eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
      }
    }
    
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === 'function') {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === 'function') {
        // EventTarget does not have `error` event semantics like Node
        // EventEmitters, we do not listen for `error` events here.
        emitter.addEventListener(name, function wrapListener(arg) {
          // IE does not have builtin `{ once: true }` support so we
          // have to do it manually.
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
    
    
    /***/ }),
    
    /***/ "./node_modules/html-entities/lib/index.js":
    /*!*************************************************!*\
      !*** ./node_modules/html-entities/lib/index.js ***!
      \*************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __assign = (this && this.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    var named_references_1 = __webpack_require__(/*! ./named-references */ "./node_modules/html-entities/lib/named-references.js");
    var numeric_unicode_map_1 = __webpack_require__(/*! ./numeric-unicode-map */ "./node_modules/html-entities/lib/numeric-unicode-map.js");
    var surrogate_pairs_1 = __webpack_require__(/*! ./surrogate-pairs */ "./node_modules/html-entities/lib/surrogate-pairs.js");
    var allNamedReferences = __assign(__assign({}, named_references_1.namedReferences), { all: named_references_1.namedReferences.html5 });
    var encodeRegExps = {
        specialChars: /[<>'"&]/g,
        nonAscii: /(?:[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,
        nonAsciiPrintable: /(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,
        extensive: /(?:[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g
    };
    var defaultEncodeOptions = {
        mode: 'specialChars',
        level: 'all',
        numeric: 'decimal'
    };
    /** Encodes all the necessary (specified by `level`) characters in the text */
    function encode(text, _a) {
        var _b = _a === void 0 ? defaultEncodeOptions : _a, _c = _b.mode, mode = _c === void 0 ? 'specialChars' : _c, _d = _b.numeric, numeric = _d === void 0 ? 'decimal' : _d, _e = _b.level, level = _e === void 0 ? 'all' : _e;
        if (!text) {
            return '';
        }
        var encodeRegExp = encodeRegExps[mode];
        var references = allNamedReferences[level].characters;
        var isHex = numeric === 'hexadecimal';
        encodeRegExp.lastIndex = 0;
        var _b = encodeRegExp.exec(text);
        var _c;
        if (_b) {
            _c = '';
            var _d = 0;
            do {
                if (_d !== _b.index) {
                    _c += text.substring(_d, _b.index);
                }
                var _e = _b[0];
                var result_1 = references[_e];
                if (!result_1) {
                    var code_1 = _e.length > 1 ? surrogate_pairs_1.getCodePoint(_e, 0) : _e.charCodeAt(0);
                    result_1 = (isHex ? '&#x' + code_1.toString(16) : '&#' + code_1) + ';';
                }
                _c += result_1;
                _d = _b.index + _e.length;
            } while ((_b = encodeRegExp.exec(text)));
            if (_d !== text.length) {
                _c += text.substring(_d);
            }
        }
        else {
            _c =
                text;
        }
        return _c;
    }
    exports.encode = encode;
    var defaultDecodeOptions = {
        scope: 'body',
        level: 'all'
    };
    var strict = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g;
    var attribute = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;
    var baseDecodeRegExps = {
        xml: {
            strict: strict,
            attribute: attribute,
            body: named_references_1.bodyRegExps.xml
        },
        html4: {
            strict: strict,
            attribute: attribute,
            body: named_references_1.bodyRegExps.html4
        },
        html5: {
            strict: strict,
            attribute: attribute,
            body: named_references_1.bodyRegExps.html5
        }
    };
    var decodeRegExps = __assign(__assign({}, baseDecodeRegExps), { all: baseDecodeRegExps.html5 });
    var fromCharCode = String.fromCharCode;
    var outOfBoundsChar = fromCharCode(65533);
    var defaultDecodeEntityOptions = {
        level: 'all'
    };
    /** Decodes a single entity */
    function decodeEntity(entity, _a) {
        var _b = (_a === void 0 ? defaultDecodeEntityOptions : _a).level, level = _b === void 0 ? 'all' : _b;
        if (!entity) {
            return '';
        }
        var _b = entity;
        var decodeEntityLastChar_1 = entity[entity.length - 1];
        if (false) {}
        else if (false) {}
        else {
            var decodeResultByReference_1 = allNamedReferences[level].entities[entity];
            if (decodeResultByReference_1) {
                _b = decodeResultByReference_1;
            }
            else if (entity[0] === '&' && entity[1] === '#') {
                var decodeSecondChar_1 = entity[2];
                var decodeCode_1 = decodeSecondChar_1 == 'x' || decodeSecondChar_1 == 'X'
                    ? parseInt(entity.substr(3), 16)
                    : parseInt(entity.substr(2));
                _b =
                    decodeCode_1 >= 0x10ffff
                        ? outOfBoundsChar
                        : decodeCode_1 > 65535
                            ? surrogate_pairs_1.fromCodePoint(decodeCode_1)
                            : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode_1] || decodeCode_1);
            }
        }
        return _b;
    }
    exports.decodeEntity = decodeEntity;
    /** Decodes all entities in the text */
    function decode(text, _a) {
        var decodeSecondChar_1 = _a === void 0 ? defaultDecodeOptions : _a, decodeCode_1 = decodeSecondChar_1.level, level = decodeCode_1 === void 0 ? 'all' : decodeCode_1, _b = decodeSecondChar_1.scope, scope = _b === void 0 ? level === 'xml' ? 'strict' : 'body' : _b;
        if (!text) {
            return '';
        }
        var decodeRegExp = decodeRegExps[level][scope];
        var references = allNamedReferences[level].entities;
        var isAttribute = scope === 'attribute';
        var isStrict = scope === 'strict';
        decodeRegExp.lastIndex = 0;
        var replaceMatch_1 = decodeRegExp.exec(text);
        var replaceResult_1;
        if (replaceMatch_1) {
            replaceResult_1 = '';
            var replaceLastIndex_1 = 0;
            do {
                if (replaceLastIndex_1 !== replaceMatch_1.index) {
                    replaceResult_1 += text.substring(replaceLastIndex_1, replaceMatch_1.index);
                }
                var replaceInput_1 = replaceMatch_1[0];
                var decodeResult_1 = replaceInput_1;
                var decodeEntityLastChar_2 = replaceInput_1[replaceInput_1.length - 1];
                if (isAttribute
                    && decodeEntityLastChar_2 === '=') {
                    decodeResult_1 = replaceInput_1;
                }
                else if (isStrict
                    && decodeEntityLastChar_2 !== ';') {
                    decodeResult_1 = replaceInput_1;
                }
                else {
                    var decodeResultByReference_2 = references[replaceInput_1];
                    if (decodeResultByReference_2) {
                        decodeResult_1 = decodeResultByReference_2;
                    }
                    else if (replaceInput_1[0] === '&' && replaceInput_1[1] === '#') {
                        var decodeSecondChar_2 = replaceInput_1[2];
                        var decodeCode_2 = decodeSecondChar_2 == 'x' || decodeSecondChar_2 == 'X'
                            ? parseInt(replaceInput_1.substr(3), 16)
                            : parseInt(replaceInput_1.substr(2));
                        decodeResult_1 =
                            decodeCode_2 >= 0x10ffff
                                ? outOfBoundsChar
                                : decodeCode_2 > 65535
                                    ? surrogate_pairs_1.fromCodePoint(decodeCode_2)
                                    : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode_2] || decodeCode_2);
                    }
                }
                replaceResult_1 += decodeResult_1;
                replaceLastIndex_1 = replaceMatch_1.index + replaceInput_1.length;
            } while ((replaceMatch_1 = decodeRegExp.exec(text)));
            if (replaceLastIndex_1 !== text.length) {
                replaceResult_1 += text.substring(replaceLastIndex_1);
            }
        }
        else {
            replaceResult_1 =
                text;
        }
        return replaceResult_1;
    }
    exports.decode = decode;
    
    
    /***/ }),
    
    /***/ "./node_modules/html-entities/lib/named-references.js":
    /*!************************************************************!*\
      !*** ./node_modules/html-entities/lib/named-references.js ***!
      \************************************************************/
    /***/ (function(__unused_webpack_module, exports) {
    
    "use strict";
    Object.defineProperty(exports, "__esModule", ({value:true}));exports.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g};exports.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;","ª":"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;","µ":"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;","º":"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;","À":"&Agrave;","Á":"&Aacute;","Â":"&Acirc;","Ã":"&Atilde;","Ä":"&Auml;","Å":"&Aring;","Æ":"&AElig;","Ç":"&Ccedil;","È":"&Egrave;","É":"&Eacute;","Ê":"&Ecirc;","Ë":"&Euml;","Ì":"&Igrave;","Í":"&Iacute;","Î":"&Icirc;","Ï":"&Iuml;","Ð":"&ETH;","Ñ":"&Ntilde;","Ò":"&Ograve;","Ó":"&Oacute;","Ô":"&Ocirc;","Õ":"&Otilde;","Ö":"&Ouml;","×":"&times;","Ø":"&Oslash;","Ù":"&Ugrave;","Ú":"&Uacute;","Û":"&Ucirc;","Ü":"&Uuml;","Ý":"&Yacute;","Þ":"&THORN;","ß":"&szlig;","à":"&agrave;","á":"&aacute;","â":"&acirc;","ã":"&atilde;","ä":"&auml;","å":"&aring;","æ":"&aelig;","ç":"&ccedil;","è":"&egrave;","é":"&eacute;","ê":"&ecirc;","ë":"&euml;","ì":"&igrave;","í":"&iacute;","î":"&icirc;","ï":"&iuml;","ð":"&eth;","ñ":"&ntilde;","ò":"&ograve;","ó":"&oacute;","ô":"&ocirc;","õ":"&otilde;","ö":"&ouml;","÷":"&divide;","ø":"&oslash;","ù":"&ugrave;","ú":"&uacute;","û":"&ucirc;","ü":"&uuml;","ý":"&yacute;","þ":"&thorn;","ÿ":"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;","Œ":"&OElig;","œ":"&oelig;","Š":"&Scaron;","š":"&scaron;","Ÿ":"&Yuml;","ˆ":"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;","ƒ":"&fnof;","Α":"&Alpha;","Β":"&Beta;","Γ":"&Gamma;","Δ":"&Delta;","Ε":"&Epsilon;","Ζ":"&Zeta;","Η":"&Eta;","Θ":"&Theta;","Ι":"&Iota;","Κ":"&Kappa;","Λ":"&Lambda;","Μ":"&Mu;","Ν":"&Nu;","Ξ":"&Xi;","Ο":"&Omicron;","Π":"&Pi;","Ρ":"&Rho;","Σ":"&Sigma;","Τ":"&Tau;","Υ":"&Upsilon;","Φ":"&Phi;","Χ":"&Chi;","Ψ":"&Psi;","Ω":"&Omega;","α":"&alpha;","β":"&beta;","γ":"&gamma;","δ":"&delta;","ε":"&epsilon;","ζ":"&zeta;","η":"&eta;","θ":"&theta;","ι":"&iota;","κ":"&kappa;","λ":"&lambda;","μ":"&mu;","ν":"&nu;","ξ":"&xi;","ο":"&omicron;","π":"&pi;","ρ":"&rho;","ς":"&sigmaf;","σ":"&sigma;","τ":"&tau;","υ":"&upsilon;","φ":"&phi;","χ":"&chi;","ψ":"&psi;","ω":"&omega;","ϑ":"&thetasym;","ϒ":"&upsih;","ϖ":"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;","℘":"&weierp;","ℑ":"&image;","ℜ":"&real;","™":"&trade;","ℵ":"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{"Æ":"&AElig;","&":"&amp;","Á":"&Aacute;","Ă":"&Abreve;","Â":"&Acirc;","А":"&Acy;","𝔄":"&Afr;","À":"&Agrave;","Α":"&Alpha;","Ā":"&Amacr;","⩓":"&And;","Ą":"&Aogon;","𝔸":"&Aopf;","⁡":"&af;","Å":"&angst;","𝒜":"&Ascr;","≔":"&coloneq;","Ã":"&Atilde;","Ä":"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;","Б":"&Bcy;","∵":"&because;","ℬ":"&bernou;","Β":"&Beta;","𝔅":"&Bfr;","𝔹":"&Bopf;","˘":"&breve;","≎":"&bump;","Ч":"&CHcy;","©":"&copy;","Ć":"&Cacute;","⋒":"&Cap;","ⅅ":"&DD;","ℭ":"&Cfr;","Č":"&Ccaron;","Ç":"&Ccedil;","Ĉ":"&Ccirc;","∰":"&Cconint;","Ċ":"&Cdot;","¸":"&cedil;","·":"&middot;","Χ":"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;","ℂ":"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;","𝒞":"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;","Ђ":"&DJcy;","Ѕ":"&DScy;","Џ":"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;","Ď":"&Dcaron;","Д":"&Dcy;","∇":"&nabla;","Δ":"&Delta;","𝔇":"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;","ⅆ":"&dd;","𝔻":"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;","𝒟":"&Dscr;","Đ":"&Dstrok;","Ŋ":"&ENG;","Ð":"&ETH;","É":"&Eacute;","Ě":"&Ecaron;","Ê":"&Ecirc;","Э":"&Ecy;","Ė":"&Edot;","𝔈":"&Efr;","È":"&Egrave;","∈":"&isinv;","Ē":"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;","Ę":"&Eogon;","𝔼":"&Eopf;","Ε":"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;","ℰ":"&expectation;","⩳":"&Esim;","Η":"&Eta;","Ë":"&Euml;","∃":"&exist;","ⅇ":"&exponentiale;","Ф":"&Fcy;","𝔉":"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;","𝔽":"&Fopf;","∀":"&forall;","ℱ":"&Fscr;","Ѓ":"&GJcy;",">":"&gt;","Γ":"&Gamma;","Ϝ":"&Gammad;","Ğ":"&Gbreve;","Ģ":"&Gcedil;","Ĝ":"&Gcirc;","Г":"&Gcy;","Ġ":"&Gdot;","𝔊":"&Gfr;","⋙":"&ggg;","𝔾":"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;","𝒢":"&Gscr;","≫":"&gg;","Ъ":"&HARDcy;","ˇ":"&caron;","^":"&Hat;","Ĥ":"&Hcirc;","ℌ":"&Poincareplane;","ℋ":"&hamilt;","ℍ":"&quaternions;","─":"&boxh;","Ħ":"&Hstrok;","≏":"&bumpeq;","Е":"&IEcy;","Ĳ":"&IJlig;","Ё":"&IOcy;","Í":"&Iacute;","Î":"&Icirc;","И":"&Icy;","İ":"&Idot;","ℑ":"&imagpart;","Ì":"&Igrave;","Ī":"&Imacr;","ⅈ":"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;","Į":"&Iogon;","𝕀":"&Iopf;","Ι":"&Iota;","ℐ":"&imagline;","Ĩ":"&Itilde;","І":"&Iukcy;","Ï":"&Iuml;","Ĵ":"&Jcirc;","Й":"&Jcy;","𝔍":"&Jfr;","𝕁":"&Jopf;","𝒥":"&Jscr;","Ј":"&Jsercy;","Є":"&Jukcy;","Х":"&KHcy;","Ќ":"&KJcy;","Κ":"&Kappa;","Ķ":"&Kcedil;","К":"&Kcy;","𝔎":"&Kfr;","𝕂":"&Kopf;","𝒦":"&Kscr;","Љ":"&LJcy;","<":"&lt;","Ĺ":"&Lacute;","Λ":"&Lambda;","⟪":"&Lang;","ℒ":"&lagran;","↞":"&twoheadleftarrow;","Ľ":"&Lcaron;","Ļ":"&Lcedil;","Л":"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;","𝔏":"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;","Ŀ":"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;","𝕃":"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;","Ł":"&Lstrok;","≪":"&ll;","⤅":"&Map;","М":"&Mcy;"," ":"&MediumSpace;","ℳ":"&phmmat;","𝔐":"&Mfr;","∓":"&mp;","𝕄":"&Mopf;","Μ":"&Mu;","Њ":"&NJcy;","Ń":"&Nacute;","Ň":"&Ncaron;","Ņ":"&Ncedil;","Н":"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;","𝔑":"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;","ℕ":"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;","𝒩":"&Nscr;","Ñ":"&Ntilde;","Ν":"&Nu;","Œ":"&OElig;","Ó":"&Oacute;","Ô":"&Ocirc;","О":"&Ocy;","Ő":"&Odblac;","𝔒":"&Ofr;","Ò":"&Ograve;","Ō":"&Omacr;","Ω":"&ohm;","Ο":"&Omicron;","𝕆":"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;","𝒪":"&Oscr;","Ø":"&Oslash;","Õ":"&Otilde;","⨷":"&Otimes;","Ö":"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;","П":"&Pcy;","𝔓":"&Pfr;","Φ":"&Phi;","Π":"&Pi;","±":"&pm;","ℙ":"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;","𝒫":"&Pscr;","Ψ":"&Psi;",'"':"&quot;","𝔔":"&Qfr;","ℚ":"&rationals;","𝒬":"&Qscr;","⤐":"&drbkarow;","®":"&reg;","Ŕ":"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;","Ř":"&Rcaron;","Ŗ":"&Rcedil;","Р":"&Rcy;","ℜ":"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;","Ρ":"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;","ℝ":"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;","ℛ":"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;","Щ":"&SHCHcy;","Ш":"&SHcy;","Ь":"&SOFTcy;","Ś":"&Sacute;","⪼":"&Sc;","Š":"&Scaron;","Ş":"&Scedil;","Ŝ":"&Scirc;","С":"&Scy;","𝔖":"&Sfr;","↑":"&uparrow;","Σ":"&Sigma;","∘":"&compfn;","𝕊":"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;","𝒮":"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;","Þ":"&THORN;","™":"&trade;","Ћ":"&TSHcy;","Ц":"&TScy;","\t":"&Tab;","Τ":"&Tau;","Ť":"&Tcaron;","Ţ":"&Tcedil;","Т":"&Tcy;","𝔗":"&Tfr;","∴":"&therefore;","Θ":"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;","𝕋":"&Topf;","⃛":"&tdot;","𝒯":"&Tscr;","Ŧ":"&Tstrok;","Ú":"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;","Ў":"&Ubrcy;","Ŭ":"&Ubreve;","Û":"&Ucirc;","У":"&Ucy;","Ű":"&Udblac;","𝔘":"&Ufr;","Ù":"&Ugrave;","Ū":"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;","Ų":"&Uogon;","𝕌":"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;","ϒ":"&upsih;","Υ":"&Upsilon;","Ů":"&Uring;","𝒰":"&Uscr;","Ũ":"&Utilde;","Ü":"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;","В":"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;","𝔙":"&Vfr;","𝕍":"&Vopf;","𝒱":"&Vscr;","⊪":"&Vvdash;","Ŵ":"&Wcirc;","⋀":"&xwedge;","𝔚":"&Wfr;","𝕎":"&Wopf;","𝒲":"&Wscr;","𝔛":"&Xfr;","Ξ":"&Xi;","𝕏":"&Xopf;","𝒳":"&Xscr;","Я":"&YAcy;","Ї":"&YIcy;","Ю":"&YUcy;","Ý":"&Yacute;","Ŷ":"&Ycirc;","Ы":"&Ycy;","𝔜":"&Yfr;","𝕐":"&Yopf;","𝒴":"&Yscr;","Ÿ":"&Yuml;","Ж":"&ZHcy;","Ź":"&Zacute;","Ž":"&Zcaron;","З":"&Zcy;","Ż":"&Zdot;","Ζ":"&Zeta;","ℨ":"&zeetrf;","ℤ":"&integers;","𝒵":"&Zscr;","á":"&aacute;","ă":"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;","â":"&acirc;","а":"&acy;","æ":"&aelig;","𝔞":"&afr;","à":"&agrave;","ℵ":"&aleph;","α":"&alpha;","ā":"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;","ą":"&aogon;","𝕒":"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;","å":"&aring;","𝒶":"&ascr;","*":"&midast;","ã":"&atilde;","ä":"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;","б":"&bcy;","„":"&ldquor;","⦰":"&bemptyv;","β":"&beta;","ℶ":"&beth;","≬":"&twixt;","𝔟":"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;","𝕓":"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;","𝒷":"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;","ć":"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;","č":"&ccaron;","ç":"&ccedil;","ĉ":"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;","ċ":"&cdot;","⦲":"&cemptyv;","¢":"&cent;","𝔠":"&cfr;","ч":"&chcy;","✓":"&checkmark;","χ":"&chi;","○":"&cir;","⧃":"&cirE;","ˆ":"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;","𝕔":"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;","𝒸":"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;","ℸ":"&daleth;","‐":"&hyphen;","⤏":"&rBarr;","ď":"&dcaron;","д":"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;","δ":"&delta;","⦱":"&demptyv;","⥿":"&dfisht;","𝔡":"&dfr;","♦":"&diams;","ϝ":"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;","ђ":"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;","𝕕":"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;","𝒹":"&dscr;","ѕ":"&dscy;","⧶":"&dsol;","đ":"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;","џ":"&dzcy;","⟿":"&dzigrarr;","é":"&eacute;","⩮":"&easter;","ě":"&ecaron;","≖":"&eqcirc;","ê":"&ecirc;","≕":"&eqcolon;","э":"&ecy;","ė":"&edot;","≒":"&fallingdotseq;","𝔢":"&efr;","⪚":"&eg;","è":"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;","ℓ":"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;","ē":"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;","ŋ":"&eng;"," ":"&ensp;","ę":"&eogon;","𝕖":"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;","ε":"&epsilon;","ϵ":"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;","ℯ":"&escr;","η":"&eta;","ð":"&eth;","ë":"&euml;","€":"&euro;","!":"&excl;","ф":"&fcy;","♀":"&female;","ﬃ":"&ffilig;","ﬀ":"&fflig;","ﬄ":"&ffllig;","𝔣":"&ffr;","ﬁ":"&filig;",fj:"&fjlig;","♭":"&flat;","ﬂ":"&fllig;","▱":"&fltns;","ƒ":"&fnof;","𝕗":"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;","𝒻":"&fscr;","⪌":"&gtreqqless;","ǵ":"&gacute;","γ":"&gamma;","⪆":"&gtrapprox;","ğ":"&gbreve;","ĝ":"&gcirc;","г":"&gcy;","ġ":"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;","𝔤":"&gfr;","ℷ":"&gimel;","ѓ":"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;","𝕘":"&gopf;","ℊ":"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;","ъ":"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;","ℏ":"&plankv;","ĥ":"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;","𝔥":"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;","𝕙":"&hopf;","―":"&horbar;","𝒽":"&hscr;","ħ":"&hstrok;","⁃":"&hybull;","í":"&iacute;","î":"&icirc;","и":"&icy;","е":"&iecy;","¡":"&iexcl;","𝔦":"&ifr;","ì":"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;","ĳ":"&ijlig;","ī":"&imacr;","ı":"&inodot;","⊷":"&imof;","Ƶ":"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;","ё":"&iocy;","į":"&iogon;","𝕚":"&iopf;","ι":"&iota;","¿":"&iquest;","𝒾":"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;","ĩ":"&itilde;","і":"&iukcy;","ï":"&iuml;","ĵ":"&jcirc;","й":"&jcy;","𝔧":"&jfr;","ȷ":"&jmath;","𝕛":"&jopf;","𝒿":"&jscr;","ј":"&jsercy;","є":"&jukcy;","κ":"&kappa;","ϰ":"&varkappa;","ķ":"&kcedil;","к":"&kcy;","𝔨":"&kfr;","ĸ":"&kgreen;","х":"&khcy;","ќ":"&kjcy;","𝕜":"&kopf;","𝓀":"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;","ĺ":"&lacute;","⦴":"&laemptyv;","λ":"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;","ľ":"&lcaron;","ļ":"&lcedil;","л":"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;","𝔩":"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;","љ":"&ljcy;","⥫":"&llhard;","◺":"&lltri;","ŀ":"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;","𝕝":"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;","𝓁":"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;","ł":"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;","м":"&mcy;","—":"&mdash;","𝔪":"&mfr;","℧":"&mho;","µ":"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;","𝕞":"&mopf;","𝓂":"&mscr;","μ":"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;","ń":"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;","ŉ":"&napos;","♮":"&natural;","⩃":"&ncap;","ň":"&ncaron;","ņ":"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;","н":"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;","𝔫":"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;","њ":"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;","𝕟":"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;","𝓃":"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;","ñ":"&ntilde;","ν":"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;","ó":"&oacute;","ô":"&ocirc;","о":"&ocy;","ő":"&odblac;","⨸":"&odiv;","⦼":"&odsold;","œ":"&oelig;","⦿":"&ofcir;","𝔬":"&ofr;","˛":"&ogon;","ò":"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;","ō":"&omacr;","ω":"&omega;","ο":"&omicron;","⦶":"&omid;","𝕠":"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;","ℴ":"&oscr;","ª":"&ordf;","º":"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;","ø":"&oslash;","⊘":"&osol;","õ":"&otilde;","⨶":"&otimesas;","ö":"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;","п":"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;","𝔭":"&pfr;","φ":"&phi;","ϕ":"&varphi;","☎":"&phone;","π":"&pi;","ϖ":"&varpi;","ℎ":"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;","𝕡":"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;","𝓅":"&pscr;","ψ":"&psi;"," ":"&puncsp;","𝔮":"&qfr;","𝕢":"&qopf;","⁗":"&qprime;","𝓆":"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;","ŕ":"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;","ř":"&rcaron;","ŗ":"&rcedil;","р":"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;","𝔯":"&rfr;","⥬":"&rharul;","ρ":"&rho;","ϱ":"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;","𝕣":"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;","𝓇":"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;","ś":"&sacute;","⪴":"&scE;","⪸":"&succapprox;","š":"&scaron;","ş":"&scedil;","ŝ":"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;","с":"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;","𝔰":"&sfr;","♯":"&sharp;","щ":"&shchcy;","ш":"&shcy;","­":"&shy;","σ":"&sigma;","ς":"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;","ь":"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;","𝕤":"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;","𝓈":"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;","ß":"&szlig;","⌖":"&target;","τ":"&tau;","ť":"&tcaron;","ţ":"&tcedil;","т":"&tcy;","⌕":"&telrec;","𝔱":"&tfr;","θ":"&theta;","ϑ":"&vartheta;","þ":"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;","𝕥":"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;","𝓉":"&tscr;","ц":"&tscy;","ћ":"&tshcy;","ŧ":"&tstrok;","⥣":"&uHar;","ú":"&uacute;","ў":"&ubrcy;","ŭ":"&ubreve;","û":"&ucirc;","у":"&ucy;","ű":"&udblac;","⥾":"&ufisht;","𝔲":"&ufr;","ù":"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;","ū":"&umacr;","ų":"&uogon;","𝕦":"&uopf;","υ":"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;","ů":"&uring;","◹":"&urtri;","𝓊":"&uscr;","⋰":"&utdot;","ũ":"&utilde;","ü":"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;","в":"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;","𝔳":"&vfr;","𝕧":"&vopf;","𝓋":"&vscr;","⦚":"&vzigzag;","ŵ":"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;","℘":"&wp;","𝔴":"&wfr;","𝕨":"&wopf;","𝓌":"&wscr;","𝔵":"&xfr;","ξ":"&xi;","⋻":"&xnis;","𝕩":"&xopf;","𝓍":"&xscr;","ý":"&yacute;","я":"&yacy;","ŷ":"&ycirc;","ы":"&ycy;","¥":"&yen;","𝔶":"&yfr;","ї":"&yicy;","𝕪":"&yopf;","𝓎":"&yscr;","ю":"&yucy;","ÿ":"&yuml;","ź":"&zacute;","ž":"&zcaron;","з":"&zcy;","ż":"&zdot;","ζ":"&zeta;","𝔷":"&zfr;","ж":"&zhcy;","⇝":"&zigrarr;","𝕫":"&zopf;","𝓏":"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}};
    
    /***/ }),
    
    /***/ "./node_modules/html-entities/lib/numeric-unicode-map.js":
    /*!***************************************************************!*\
      !*** ./node_modules/html-entities/lib/numeric-unicode-map.js ***!
      \***************************************************************/
    /***/ (function(__unused_webpack_module, exports) {
    
    "use strict";
    Object.defineProperty(exports, "__esModule", ({value:true}));exports.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376};
    
    /***/ }),
    
    /***/ "./node_modules/html-entities/lib/surrogate-pairs.js":
    /*!***********************************************************!*\
      !*** ./node_modules/html-entities/lib/surrogate-pairs.js ***!
      \***********************************************************/
    /***/ (function(__unused_webpack_module, exports) {
    
    "use strict";
    Object.defineProperty(exports, "__esModule", ({value:true}));exports.fromCodePoint=String.fromCodePoint||function(astralCodePoint){return String.fromCharCode(Math.floor((astralCodePoint-65536)/1024)+55296,(astralCodePoint-65536)%1024+56320)};exports.getCodePoint=String.prototype.codePointAt?function(input,position){return input.codePointAt(position)}:function(input,position){return(input.charCodeAt(position)-55296)*1024+input.charCodeAt(position+1)-56320+65536};exports.highSurrogateFrom=55296;exports.highSurrogateTo=56319;
    
    /***/ }),
    
    /***/ "./node_modules/querystring/decode.js":
    /*!********************************************!*\
      !*** ./node_modules/querystring/decode.js ***!
      \********************************************/
    /***/ (function(module) {
    
    "use strict";
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    
    
    // If obj.hasOwnProperty has been overridden, then calling
    // obj.hasOwnProperty(prop) will break.
    // See: https://github.com/joyent/node/issues/1707
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    
    module.exports = function(qs, sep, eq, options) {
      sep = sep || '&';
      eq = eq || '=';
      var obj = {};
    
      if (typeof qs !== 'string' || qs.length === 0) {
        return obj;
      }
    
      var regexp = /\+/g;
      qs = qs.split(sep);
    
      var maxKeys = 1000;
      if (options && typeof options.maxKeys === 'number') {
        maxKeys = options.maxKeys;
      }
    
      var len = qs.length;
      // maxKeys <= 0 means that we should not limit keys count
      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }
    
      for (var i = 0; i < len; ++i) {
        var x = qs[i].replace(regexp, '%20'),
            idx = x.indexOf(eq),
            kstr, vstr, k, v;
    
        if (idx >= 0) {
          kstr = x.substr(0, idx);
          vstr = x.substr(idx + 1);
        } else {
          kstr = x;
          vstr = '';
        }
    
        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);
    
        if (!hasOwnProperty(obj, k)) {
          obj[k] = v;
        } else if (Array.isArray(obj[k])) {
          obj[k].push(v);
        } else {
          obj[k] = [obj[k], v];
        }
      }
    
      return obj;
    };
    
    
    /***/ }),
    
    /***/ "./node_modules/querystring/encode.js":
    /*!********************************************!*\
      !*** ./node_modules/querystring/encode.js ***!
      \********************************************/
    /***/ (function(module) {
    
    "use strict";
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    
    
    var stringifyPrimitive = function(v) {
      switch (typeof v) {
        case 'string':
          return v;
    
        case 'boolean':
          return v ? 'true' : 'false';
    
        case 'number':
          return isFinite(v) ? v : '';
    
        default:
          return '';
      }
    };
    
    module.exports = function(obj, sep, eq, name) {
      sep = sep || '&';
      eq = eq || '=';
      if (obj === null) {
        obj = undefined;
      }
    
      if (typeof obj === 'object') {
        return Object.keys(obj).map(function(k) {
          var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
          if (Array.isArray(obj[k])) {
            return obj[k].map(function(v) {
              return ks + encodeURIComponent(stringifyPrimitive(v));
            }).join(sep);
          } else {
            return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
          }
        }).join(sep);
    
      }
    
      if (!name) return '';
      return encodeURIComponent(stringifyPrimitive(name)) + eq +
             encodeURIComponent(stringifyPrimitive(obj));
    };
    
    
    /***/ }),
    
    /***/ "./node_modules/querystring/index.js":
    /*!*******************************************!*\
      !*** ./node_modules/querystring/index.js ***!
      \*******************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    
    exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "./node_modules/querystring/decode.js");
    exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "./node_modules/querystring/encode.js");
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/cubismdefaultparameterid.ts":
    /*!**********************************************************!*\
      !*** ../../../Framework/src/cubismdefaultparameterid.ts ***!
      \**********************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismDefaultParameterId = void 0;
    exports.CubismDefaultParameterId = Object.freeze({
        HitAreaPrefix: 'HitArea',
        HitAreaHead: 'Head',
        HitAreaBody: 'Body',
        PartsIdCore: 'Parts01Core',
        PartsArmPrefix: 'Parts01Arm_',
        PartsArmLPrefix: 'Parts01ArmL_',
        PartsArmRPrefix: 'Parts01ArmR_',
        ParamAngleX: 'ParamAngleX',
        ParamAngleY: 'ParamAngleY',
        ParamAngleZ: 'ParamAngleZ',
        ParamEyeLOpen: 'ParamEyeLOpen',
        ParamEyeLSmile: 'ParamEyeLSmile',
        ParamEyeROpen: 'ParamEyeROpen',
        ParamEyeRSmile: 'ParamEyeRSmile',
        ParamEyeBallX: 'ParamEyeBallX',
        ParamEyeBallY: 'ParamEyeBallY',
        ParamEyeBallForm: 'ParamEyeBallForm',
        ParamBrowLY: 'ParamBrowLY',
        ParamBrowRY: 'ParamBrowRY',
        ParamBrowLX: 'ParamBrowLX',
        ParamBrowRX: 'ParamBrowRX',
        ParamBrowLAngle: 'ParamBrowLAngle',
        ParamBrowRAngle: 'ParamBrowRAngle',
        ParamBrowLForm: 'ParamBrowLForm',
        ParamBrowRForm: 'ParamBrowRForm',
        ParamMouthForm: 'ParamMouthForm',
        ParamMouthOpenY: 'ParamMouthOpenY',
        ParamCheek: 'ParamCheek',
        ParamBodyAngleX: 'ParamBodyAngleX',
        ParamBodyAngleY: 'ParamBodyAngleY',
        ParamBodyAngleZ: 'ParamBodyAngleZ',
        ParamBreath: 'ParamBreath',
        ParamArmLA: 'ParamArmLA',
        ParamArmRA: 'ParamArmRA',
        ParamArmLB: 'ParamArmLB',
        ParamArmRB: 'ParamArmRB',
        ParamHandL: 'ParamHandL',
        ParamHandR: 'ParamHandR',
        ParamHairFront: 'ParamHairFront',
        ParamHairSide: 'ParamHairSide',
        ParamHairBack: 'ParamHairBack',
        ParamHairFluffy: 'ParamHairFluffy',
        ParamShoulderY: 'ParamShoulderY',
        ParamBustX: 'ParamBustX',
        ParamBustY: 'ParamBustY',
        ParamBaseX: 'ParamBaseX',
        ParamBaseY: 'ParamBaseY',
        ParamNONE: 'NONE:'
    });
    var $ = __importStar(__webpack_require__(/*! ./cubismdefaultparameterid */ "../../../Framework/src/cubismdefaultparameterid.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.HitAreaBody = $.CubismDefaultParameterId.HitAreaBody;
        Live2DCubismFramework.HitAreaHead = $.CubismDefaultParameterId.HitAreaHead;
        Live2DCubismFramework.HitAreaPrefix = $.CubismDefaultParameterId.HitAreaPrefix;
        Live2DCubismFramework.ParamAngleX = $.CubismDefaultParameterId.ParamAngleX;
        Live2DCubismFramework.ParamAngleY = $.CubismDefaultParameterId.ParamAngleY;
        Live2DCubismFramework.ParamAngleZ = $.CubismDefaultParameterId.ParamAngleZ;
        Live2DCubismFramework.ParamArmLA = $.CubismDefaultParameterId.ParamArmLA;
        Live2DCubismFramework.ParamArmLB = $.CubismDefaultParameterId.ParamArmLB;
        Live2DCubismFramework.ParamArmRA = $.CubismDefaultParameterId.ParamArmRA;
        Live2DCubismFramework.ParamArmRB = $.CubismDefaultParameterId.ParamArmRB;
        Live2DCubismFramework.ParamBaseX = $.CubismDefaultParameterId.ParamBaseX;
        Live2DCubismFramework.ParamBaseY = $.CubismDefaultParameterId.ParamBaseY;
        Live2DCubismFramework.ParamBodyAngleX = $.CubismDefaultParameterId.ParamBodyAngleX;
        Live2DCubismFramework.ParamBodyAngleY = $.CubismDefaultParameterId.ParamBodyAngleY;
        Live2DCubismFramework.ParamBodyAngleZ = $.CubismDefaultParameterId.ParamBodyAngleZ;
        Live2DCubismFramework.ParamBreath = $.CubismDefaultParameterId.ParamBreath;
        Live2DCubismFramework.ParamBrowLAngle = $.CubismDefaultParameterId.ParamBrowLAngle;
        Live2DCubismFramework.ParamBrowLForm = $.CubismDefaultParameterId.ParamBrowLForm;
        Live2DCubismFramework.ParamBrowLX = $.CubismDefaultParameterId.ParamBrowLX;
        Live2DCubismFramework.ParamBrowLY = $.CubismDefaultParameterId.ParamBrowLY;
        Live2DCubismFramework.ParamBrowRAngle = $.CubismDefaultParameterId.ParamBrowRAngle;
        Live2DCubismFramework.ParamBrowRForm = $.CubismDefaultParameterId.ParamBrowRForm;
        Live2DCubismFramework.ParamBrowRX = $.CubismDefaultParameterId.ParamBrowRX;
        Live2DCubismFramework.ParamBrowRY = $.CubismDefaultParameterId.ParamBrowRY;
        Live2DCubismFramework.ParamBustX = $.CubismDefaultParameterId.ParamBustX;
        Live2DCubismFramework.ParamBustY = $.CubismDefaultParameterId.ParamBustY;
        Live2DCubismFramework.ParamCheek = $.CubismDefaultParameterId.ParamCheek;
        Live2DCubismFramework.ParamEyeBallForm = $.CubismDefaultParameterId.ParamEyeBallForm;
        Live2DCubismFramework.ParamEyeBallX = $.CubismDefaultParameterId.ParamEyeBallX;
        Live2DCubismFramework.ParamEyeBallY = $.CubismDefaultParameterId.ParamEyeBallY;
        Live2DCubismFramework.ParamEyeLOpen = $.CubismDefaultParameterId.ParamEyeLOpen;
        Live2DCubismFramework.ParamEyeLSmile = $.CubismDefaultParameterId.ParamEyeLSmile;
        Live2DCubismFramework.ParamEyeROpen = $.CubismDefaultParameterId.ParamEyeROpen;
        Live2DCubismFramework.ParamEyeRSmile = $.CubismDefaultParameterId.ParamEyeRSmile;
        Live2DCubismFramework.ParamHairBack = $.CubismDefaultParameterId.ParamHairBack;
        Live2DCubismFramework.ParamHairFluffy = $.CubismDefaultParameterId.ParamHairFluffy;
        Live2DCubismFramework.ParamHairFront = $.CubismDefaultParameterId.ParamHairFront;
        Live2DCubismFramework.ParamHairSide = $.CubismDefaultParameterId.ParamHairSide;
        Live2DCubismFramework.ParamHandL = $.CubismDefaultParameterId.ParamHandL;
        Live2DCubismFramework.ParamHandR = $.CubismDefaultParameterId.ParamHandR;
        Live2DCubismFramework.ParamMouthForm = $.CubismDefaultParameterId.ParamMouthForm;
        Live2DCubismFramework.ParamMouthOpenY = $.CubismDefaultParameterId.ParamMouthOpenY;
        Live2DCubismFramework.ParamNONE = $.CubismDefaultParameterId.ParamNONE;
        Live2DCubismFramework.ParamShoulderY = $.CubismDefaultParameterId.ParamShoulderY;
        Live2DCubismFramework.PartsArmLPrefix = $.CubismDefaultParameterId.PartsArmLPrefix;
        Live2DCubismFramework.PartsArmPrefix = $.CubismDefaultParameterId.PartsArmPrefix;
        Live2DCubismFramework.PartsArmRPrefix = $.CubismDefaultParameterId.PartsArmRPrefix;
        Live2DCubismFramework.PartsIdCore = $.CubismDefaultParameterId.PartsIdCore;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/cubismframeworkconfig.ts":
    /*!*******************************************************!*\
      !*** ../../../Framework/src/cubismframeworkconfig.ts ***!
      \*******************************************************/
    /***/ (function(__unused_webpack_module, exports) {
    
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.CSM_LOG_LEVEL = exports.CSM_LOG_LEVEL_OFF = exports.CSM_LOG_LEVEL_ERROR = exports.CSM_LOG_LEVEL_WARNING = exports.CSM_LOG_LEVEL_INFO = exports.CSM_LOG_LEVEL_DEBUG = exports.CSM_LOG_LEVEL_VERBOSE = void 0;
    exports.CSM_LOG_LEVEL_VERBOSE = 0;
    exports.CSM_LOG_LEVEL_DEBUG = 1;
    exports.CSM_LOG_LEVEL_INFO = 2;
    exports.CSM_LOG_LEVEL_WARNING = 3;
    exports.CSM_LOG_LEVEL_ERROR = 4;
    exports.CSM_LOG_LEVEL_OFF = 5;
    exports.CSM_LOG_LEVEL = exports.CSM_LOG_LEVEL_VERBOSE;
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/cubismmodelsettingjson.ts":
    /*!********************************************************!*\
      !*** ../../../Framework/src/cubismmodelsettingjson.ts ***!
      \********************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismModelSettingJson = void 0;
    var icubismmodelsetting_1 = __webpack_require__(/*! ./icubismmodelsetting */ "../../../Framework/src/icubismmodelsetting.ts");
    var live2dcubismframework_1 = __webpack_require__(/*! ./live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    var csmvector_1 = __webpack_require__(/*! ./type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var cubismjson_1 = __webpack_require__(/*! ./utils/cubismjson */ "../../../Framework/src/utils/cubismjson.ts");
    var Version = 'Version';
    var FileReferences = 'FileReferences';
    var Groups = 'Groups';
    var Layout = 'Layout';
    var HitAreas = 'HitAreas';
    var Moc = 'Moc';
    var Textures = 'Textures';
    var Physics = 'Physics';
    var Pose = 'Pose';
    var Expressions = 'Expressions';
    var Motions = 'Motions';
    var UserData = 'UserData';
    var Name = 'Name';
    var FilePath = 'File';
    var Id = 'Id';
    var Ids = 'Ids';
    var Target = 'Target';
    var Idle = 'Idle';
    var TapBody = 'TapBody';
    var PinchIn = 'PinchIn';
    var PinchOut = 'PinchOut';
    var Shake = 'Shake';
    var FlickHead = 'FlickHead';
    var Parameter = 'Parameter';
    var SoundPath = 'Sound';
    var FadeInTime = 'FadeInTime';
    var FadeOutTime = 'FadeOutTime';
    var CenterX = 'CenterX';
    var CenterY = 'CenterY';
    var X = 'X';
    var Y = 'Y';
    var Width = 'Width';
    var Height = 'Height';
    var LipSync = 'LipSync';
    var EyeBlink = 'EyeBlink';
    var InitParameter = 'init_param';
    var InitPartsVisible = 'init_parts_visible';
    var Val = 'val';
    var FrequestNode;
    (function (FrequestNode) {
        FrequestNode[FrequestNode["FrequestNode_Groups"] = 0] = "FrequestNode_Groups";
        FrequestNode[FrequestNode["FrequestNode_Moc"] = 1] = "FrequestNode_Moc";
        FrequestNode[FrequestNode["FrequestNode_Motions"] = 2] = "FrequestNode_Motions";
        FrequestNode[FrequestNode["FrequestNode_Expressions"] = 3] = "FrequestNode_Expressions";
        FrequestNode[FrequestNode["FrequestNode_Textures"] = 4] = "FrequestNode_Textures";
        FrequestNode[FrequestNode["FrequestNode_Physics"] = 5] = "FrequestNode_Physics";
        FrequestNode[FrequestNode["FrequestNode_Pose"] = 6] = "FrequestNode_Pose";
        FrequestNode[FrequestNode["FrequestNode_HitAreas"] = 7] = "FrequestNode_HitAreas";
    })(FrequestNode || (FrequestNode = {}));
    var CubismModelSettingJson = (function (_super) {
        __extends(CubismModelSettingJson, _super);
        function CubismModelSettingJson(buffer, size) {
            var _this = _super.call(this) || this;
            _this._json = cubismjson_1.CubismJson.create(buffer, size);
            if (_this._json) {
                _this._jsonValue = new csmvector_1.csmVector();
                _this._jsonValue.pushBack(_this._json.getRoot().getValueByString(Groups));
                _this._jsonValue.pushBack(_this._json
                    .getRoot()
                    .getValueByString(FileReferences)
                    .getValueByString(Moc));
                _this._jsonValue.pushBack(_this._json
                    .getRoot()
                    .getValueByString(FileReferences)
                    .getValueByString(Motions));
                _this._jsonValue.pushBack(_this._json
                    .getRoot()
                    .getValueByString(FileReferences)
                    .getValueByString(Expressions));
                _this._jsonValue.pushBack(_this._json
                    .getRoot()
                    .getValueByString(FileReferences)
                    .getValueByString(Textures));
                _this._jsonValue.pushBack(_this._json
                    .getRoot()
                    .getValueByString(FileReferences)
                    .getValueByString(Physics));
                _this._jsonValue.pushBack(_this._json
                    .getRoot()
                    .getValueByString(FileReferences)
                    .getValueByString(Pose));
                _this._jsonValue.pushBack(_this._json.getRoot().getValueByString(HitAreas));
            }
            return _this;
        }
        CubismModelSettingJson.prototype.release = function () {
            cubismjson_1.CubismJson.delete(this._json);
            this._jsonValue = null;
        };
        CubismModelSettingJson.prototype.GetJson = function () {
            return this._json;
        };
        CubismModelSettingJson.prototype.getModelFileName = function () {
            if (!this.isExistModelFile()) {
                return '';
            }
            return this._jsonValue.at(FrequestNode.FrequestNode_Moc).getRawString();
        };
        CubismModelSettingJson.prototype.getTextureCount = function () {
            if (!this.isExistTextureFiles()) {
                return 0;
            }
            return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getSize();
        };
        CubismModelSettingJson.prototype.getTextureDirectory = function () {
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Textures)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getTextureFileName = function (index) {
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Textures)
                .getValueByIndex(index)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getHitAreasCount = function () {
            if (!this.isExistHitAreas()) {
                return 0;
            }
            return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getSize();
        };
        CubismModelSettingJson.prototype.getHitAreaId = function (index) {
            return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._jsonValue
                .at(FrequestNode.FrequestNode_HitAreas)
                .getValueByIndex(index)
                .getValueByString(Id)
                .getRawString());
        };
        CubismModelSettingJson.prototype.getHitAreaName = function (index) {
            return this._jsonValue
                .at(FrequestNode.FrequestNode_HitAreas)
                .getValueByIndex(index)
                .getValueByString(Name)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getPhysicsFileName = function () {
            if (!this.isExistPhysicsFile()) {
                return '';
            }
            return this._jsonValue.at(FrequestNode.FrequestNode_Physics).getRawString();
        };
        CubismModelSettingJson.prototype.getPoseFileName = function () {
            if (!this.isExistPoseFile()) {
                return '';
            }
            return this._jsonValue.at(FrequestNode.FrequestNode_Pose).getRawString();
        };
        CubismModelSettingJson.prototype.getExpressionCount = function () {
            if (!this.isExistExpressionFile()) {
                return 0;
            }
            return this._jsonValue.at(FrequestNode.FrequestNode_Expressions).getSize();
        };
        CubismModelSettingJson.prototype.getExpressionName = function (index) {
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Expressions)
                .getValueByIndex(index)
                .getValueByString(Name)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getExpressionFileName = function (index) {
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Expressions)
                .getValueByIndex(index)
                .getValueByString(FilePath)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getMotionGroupCount = function () {
            if (!this.isExistMotionGroups()) {
                return 0;
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getKeys()
                .getSize();
        };
        CubismModelSettingJson.prototype.getMotionGroupName = function (index) {
            if (!this.isExistMotionGroups()) {
                return null;
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getKeys()
                .at(index);
        };
        CubismModelSettingJson.prototype.getMotionCount = function (groupName) {
            if (!this.isExistMotionGroupName(groupName)) {
                return 0;
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getSize();
        };
        CubismModelSettingJson.prototype.getMotionFileName = function (groupName, index) {
            if (!this.isExistMotionGroupName(groupName)) {
                return '';
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(FilePath)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getMotionSoundFileName = function (groupName, index) {
            if (!this.isExistMotionSoundFile(groupName, index)) {
                return '';
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(SoundPath)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getMotionFadeInTimeValue = function (groupName, index) {
            if (!this.isExistMotionFadeIn(groupName, index)) {
                return -1.0;
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(FadeInTime)
                .toFloat();
        };
        CubismModelSettingJson.prototype.getMotionFadeOutTimeValue = function (groupName, index) {
            if (!this.isExistMotionFadeOut(groupName, index)) {
                return -1.0;
            }
            return this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(FadeOutTime)
                .toFloat();
        };
        CubismModelSettingJson.prototype.getUserDataFile = function () {
            if (!this.isExistUserDataFile()) {
                return '';
            }
            return this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(UserData)
                .getRawString();
        };
        CubismModelSettingJson.prototype.getLayoutMap = function (outLayoutMap) {
            var map = this._json
                .getRoot()
                .getValueByString(Layout)
                .getMap();
            if (map == null) {
                return false;
            }
            var ret = false;
            for (var ite = map.begin(); ite.notEqual(map.end()); ite.preIncrement()) {
                outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());
                ret = true;
            }
            return ret;
        };
        CubismModelSettingJson.prototype.getEyeBlinkParameterCount = function () {
            if (!this.isExistEyeBlinkParameters()) {
                return 0;
            }
            var num = 0;
            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
                var refI = this._jsonValue
                    .at(FrequestNode.FrequestNode_Groups)
                    .getValueByIndex(i);
                if (refI.isNull() || refI.isError()) {
                    continue;
                }
                if (refI.getValueByString(Name).getRawString() == EyeBlink) {
                    num = refI
                        .getValueByString(Ids)
                        .getVector()
                        .getSize();
                    break;
                }
            }
            return num;
        };
        CubismModelSettingJson.prototype.getEyeBlinkParameterId = function (index) {
            if (!this.isExistEyeBlinkParameters()) {
                return null;
            }
            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
                var refI = this._jsonValue
                    .at(FrequestNode.FrequestNode_Groups)
                    .getValueByIndex(i);
                if (refI.isNull() || refI.isError()) {
                    continue;
                }
                if (refI.getValueByString(Name).getRawString() == EyeBlink) {
                    return live2dcubismframework_1.CubismFramework.getIdManager().getId(refI
                        .getValueByString(Ids)
                        .getValueByIndex(index)
                        .getRawString());
                }
            }
            return null;
        };
        CubismModelSettingJson.prototype.getLipSyncParameterCount = function () {
            if (!this.isExistLipSyncParameters()) {
                return 0;
            }
            var num = 0;
            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
                var refI = this._jsonValue
                    .at(FrequestNode.FrequestNode_Groups)
                    .getValueByIndex(i);
                if (refI.isNull() || refI.isError()) {
                    continue;
                }
                if (refI.getValueByString(Name).getRawString() == LipSync) {
                    num = refI
                        .getValueByString(Ids)
                        .getVector()
                        .getSize();
                    break;
                }
            }
            return num;
        };
        CubismModelSettingJson.prototype.getLipSyncParameterId = function (index) {
            if (!this.isExistLipSyncParameters()) {
                return null;
            }
            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
                var refI = this._jsonValue
                    .at(FrequestNode.FrequestNode_Groups)
                    .getValueByIndex(i);
                if (refI.isNull() || refI.isError()) {
                    continue;
                }
                if (refI.getValueByString(Name).getRawString() == LipSync) {
                    return live2dcubismframework_1.CubismFramework.getIdManager().getId(refI
                        .getValueByString(Ids)
                        .getValueByIndex(index)
                        .getRawString());
                }
            }
            return null;
        };
        CubismModelSettingJson.prototype.isExistModelFile = function () {
            var node = this._jsonValue.at(FrequestNode.FrequestNode_Moc);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistTextureFiles = function () {
            var node = this._jsonValue.at(FrequestNode.FrequestNode_Textures);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistHitAreas = function () {
            var node = this._jsonValue.at(FrequestNode.FrequestNode_HitAreas);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistPhysicsFile = function () {
            var node = this._jsonValue.at(FrequestNode.FrequestNode_Physics);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistPoseFile = function () {
            var node = this._jsonValue.at(FrequestNode.FrequestNode_Pose);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistExpressionFile = function () {
            var node = this._jsonValue.at(FrequestNode.FrequestNode_Expressions);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistMotionGroups = function () {
            var node = this._jsonValue.at(FrequestNode.FrequestNode_Motions);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistMotionGroupName = function (groupName) {
            var node = this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistMotionSoundFile = function (groupName, index) {
            var node = this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(SoundPath);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistMotionFadeIn = function (groupName, index) {
            var node = this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(FadeInTime);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistMotionFadeOut = function (groupName, index) {
            var node = this._jsonValue
                .at(FrequestNode.FrequestNode_Motions)
                .getValueByString(groupName)
                .getValueByIndex(index)
                .getValueByString(FadeOutTime);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistUserDataFile = function () {
            var node = this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(UserData);
            return !node.isNull() && !node.isError();
        };
        CubismModelSettingJson.prototype.isExistEyeBlinkParameters = function () {
            if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||
                this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {
                return false;
            }
            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {
                if (this._jsonValue
                    .at(FrequestNode.FrequestNode_Groups)
                    .getValueByIndex(i)
                    .getValueByString(Name)
                    .getRawString() == EyeBlink) {
                    return true;
                }
            }
            return false;
        };
        CubismModelSettingJson.prototype.isExistLipSyncParameters = function () {
            if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||
                this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {
                return false;
            }
            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {
                if (this._jsonValue
                    .at(FrequestNode.FrequestNode_Groups)
                    .getValueByIndex(i)
                    .getValueByString(Name)
                    .getRawString() == LipSync) {
                    return true;
                }
            }
            return false;
        };
        return CubismModelSettingJson;
    }(icubismmodelsetting_1.ICubismModelSetting));
    exports.CubismModelSettingJson = CubismModelSettingJson;
    var $ = __importStar(__webpack_require__(/*! ./cubismmodelsettingjson */ "../../../Framework/src/cubismmodelsettingjson.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismModelSettingJson = $.CubismModelSettingJson;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/effect/cubismbreath.ts":
    /*!*****************************************************!*\
      !*** ../../../Framework/src/effect/cubismbreath.ts ***!
      \*****************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.BreathParameterData = exports.CubismBreath = void 0;
    var CubismBreath = (function () {
        function CubismBreath() {
            this._currentTime = 0.0;
        }
        CubismBreath.create = function () {
            return new CubismBreath();
        };
        CubismBreath.delete = function (instance) {
            if (instance != null) {
                instance = null;
            }
        };
        CubismBreath.prototype.setParameters = function (breathParameters) {
            this._breathParameters = breathParameters;
        };
        CubismBreath.prototype.getParameters = function () {
            return this._breathParameters;
        };
        CubismBreath.prototype.updateParameters = function (model, deltaTimeSeconds) {
            this._currentTime += deltaTimeSeconds;
            var t = this._currentTime * 2.0 * 3.14159;
            for (var i = 0; i < this._breathParameters.getSize(); ++i) {
                var data = this._breathParameters.at(i);
                model.addParameterValueById(data.parameterId, data.offset + data.peak * Math.sin(t / data.cycle), data.weight);
            }
        };
        return CubismBreath;
    }());
    exports.CubismBreath = CubismBreath;
    var BreathParameterData = (function () {
        function BreathParameterData(parameterId, offset, peak, cycle, weight) {
            this.parameterId = parameterId == undefined ? null : parameterId;
            this.offset = offset == undefined ? 0.0 : offset;
            this.peak = peak == undefined ? 0.0 : peak;
            this.cycle = cycle == undefined ? 0.0 : cycle;
            this.weight = weight == undefined ? 0.0 : weight;
        }
        return BreathParameterData;
    }());
    exports.BreathParameterData = BreathParameterData;
    var $ = __importStar(__webpack_require__(/*! ./cubismbreath */ "../../../Framework/src/effect/cubismbreath.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.BreathParameterData = $.BreathParameterData;
        Live2DCubismFramework.CubismBreath = $.CubismBreath;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/effect/cubismeyeblink.ts":
    /*!*******************************************************!*\
      !*** ../../../Framework/src/effect/cubismeyeblink.ts ***!
      \*******************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.EyeState = exports.CubismEyeBlink = void 0;
    var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var CubismEyeBlink = (function () {
        function CubismEyeBlink(modelSetting) {
            this._blinkingState = EyeState.EyeState_First;
            this._nextBlinkingTime = 0.0;
            this._stateStartTimeSeconds = 0.0;
            this._blinkingIntervalSeconds = 4.0;
            this._closingSeconds = 0.1;
            this._closedSeconds = 0.05;
            this._openingSeconds = 0.15;
            this._userTimeSeconds = 0.0;
            this._parameterIds = new csmvector_1.csmVector();
            if (modelSetting == null) {
                return;
            }
            for (var i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {
                this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));
            }
        }
        CubismEyeBlink.create = function (modelSetting) {
            if (modelSetting === void 0) { modelSetting = null; }
            return new CubismEyeBlink(modelSetting);
        };
        CubismEyeBlink.delete = function (eyeBlink) {
            if (eyeBlink != null) {
                eyeBlink = null;
            }
        };
        CubismEyeBlink.prototype.setBlinkingInterval = function (blinkingInterval) {
            this._blinkingIntervalSeconds = blinkingInterval;
        };
        CubismEyeBlink.prototype.setBlinkingSetting = function (closing, closed, opening) {
            this._closingSeconds = closing;
            this._closedSeconds = closed;
            this._openingSeconds = opening;
        };
        CubismEyeBlink.prototype.setParameterIds = function (parameterIds) {
            this._parameterIds = parameterIds;
        };
        CubismEyeBlink.prototype.getParameterIds = function () {
            return this._parameterIds;
        };
        CubismEyeBlink.prototype.updateParameters = function (model, deltaTimeSeconds) {
            this._userTimeSeconds += deltaTimeSeconds;
            var parameterValue;
            var t = 0.0;
            switch (this._blinkingState) {
                case EyeState.EyeState_Closing:
                    t =
                        (this._userTimeSeconds - this._stateStartTimeSeconds) /
                            this._closingSeconds;
                    if (t >= 1.0) {
                        t = 1.0;
                        this._blinkingState = EyeState.EyeState_Closed;
                        this._stateStartTimeSeconds = this._userTimeSeconds;
                    }
                    parameterValue = 1.0 - t;
                    break;
                case EyeState.EyeState_Closed:
                    t =
                        (this._userTimeSeconds - this._stateStartTimeSeconds) /
                            this._closedSeconds;
                    if (t >= 1.0) {
                        this._blinkingState = EyeState.EyeState_Opening;
                        this._stateStartTimeSeconds = this._userTimeSeconds;
                    }
                    parameterValue = 0.0;
                    break;
                case EyeState.EyeState_Opening:
                    t =
                        (this._userTimeSeconds - this._stateStartTimeSeconds) /
                            this._openingSeconds;
                    if (t >= 1.0) {
                        t = 1.0;
                        this._blinkingState = EyeState.EyeState_Interval;
                        this._nextBlinkingTime = this.determinNextBlinkingTiming();
                    }
                    parameterValue = t;
                    break;
                case EyeState.EyeState_Interval:
                    if (this._nextBlinkingTime < this._userTimeSeconds) {
                        this._blinkingState = EyeState.EyeState_Closing;
                        this._stateStartTimeSeconds = this._userTimeSeconds;
                    }
                    parameterValue = 1.0;
                    break;
                case EyeState.EyeState_First:
                default:
                    this._blinkingState = EyeState.EyeState_Interval;
                    this._nextBlinkingTime = this.determinNextBlinkingTiming();
                    parameterValue = 1.0;
                    break;
            }
            if (!CubismEyeBlink.CloseIfZero) {
                parameterValue = -parameterValue;
            }
            for (var i = 0; i < this._parameterIds.getSize(); ++i) {
                model.setParameterValueById(this._parameterIds.at(i), parameterValue);
            }
        };
        CubismEyeBlink.prototype.determinNextBlinkingTiming = function () {
            var r = Math.random();
            return (this._userTimeSeconds + r * (2.0 * this._blinkingIntervalSeconds - 1.0));
        };
        CubismEyeBlink.CloseIfZero = true;
        return CubismEyeBlink;
    }());
    exports.CubismEyeBlink = CubismEyeBlink;
    var EyeState;
    (function (EyeState) {
        EyeState[EyeState["EyeState_First"] = 0] = "EyeState_First";
        EyeState[EyeState["EyeState_Interval"] = 1] = "EyeState_Interval";
        EyeState[EyeState["EyeState_Closing"] = 2] = "EyeState_Closing";
        EyeState[EyeState["EyeState_Closed"] = 3] = "EyeState_Closed";
        EyeState[EyeState["EyeState_Opening"] = 4] = "EyeState_Opening";
    })(EyeState = exports.EyeState || (exports.EyeState = {}));
    var $ = __importStar(__webpack_require__(/*! ./cubismeyeblink */ "../../../Framework/src/effect/cubismeyeblink.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismEyeBlink = $.CubismEyeBlink;
        Live2DCubismFramework.EyeState = $.EyeState;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/effect/cubismpose.ts":
    /*!***************************************************!*\
      !*** ../../../Framework/src/effect/cubismpose.ts ***!
      \***************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.PartData = exports.CubismPose = void 0;
    var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "../../../Framework/src/utils/cubismjson.ts");
    var Epsilon = 0.001;
    var DefaultFadeInSeconds = 0.5;
    var FadeIn = 'FadeInTime';
    var Link = 'Link';
    var Groups = 'Groups';
    var Id = 'Id';
    var CubismPose = (function () {
        function CubismPose() {
            this._fadeTimeSeconds = DefaultFadeInSeconds;
            this._lastModel = null;
            this._partGroups = new csmvector_1.csmVector();
            this._partGroupCounts = new csmvector_1.csmVector();
        }
        CubismPose.create = function (pose3json, size) {
            var ret = new CubismPose();
            var json = cubismjson_1.CubismJson.create(pose3json, size);
            var root = json.getRoot();
            if (!root.getValueByString(FadeIn).isNull()) {
                ret._fadeTimeSeconds = root
                    .getValueByString(FadeIn)
                    .toFloat(DefaultFadeInSeconds);
                if (ret._fadeTimeSeconds <= 0.0) {
                    ret._fadeTimeSeconds = DefaultFadeInSeconds;
                }
            }
            var poseListInfo = root.getValueByString(Groups);
            var poseCount = poseListInfo.getSize();
            for (var poseIndex = 0; poseIndex < poseCount; ++poseIndex) {
                var idListInfo = poseListInfo.getValueByIndex(poseIndex);
                var idCount = idListInfo.getSize();
                var groupCount = 0;
                for (var groupIndex = 0; groupIndex < idCount; ++groupIndex) {
                    var partInfo = idListInfo.getValueByIndex(groupIndex);
                    var partData = new PartData();
                    var parameterId = live2dcubismframework_1.CubismFramework.getIdManager().getId(partInfo.getValueByString(Id).getRawString());
                    partData.partId = parameterId;
                    if (!partInfo.getValueByString(Link).isNull()) {
                        var linkListInfo = partInfo.getValueByString(Link);
                        var linkCount = linkListInfo.getSize();
                        for (var linkIndex = 0; linkIndex < linkCount; ++linkIndex) {
                            var linkPart = new PartData();
                            var linkId = live2dcubismframework_1.CubismFramework.getIdManager().getId(linkListInfo.getValueByIndex(linkIndex).getString());
                            linkPart.partId = linkId;
                            partData.link.pushBack(linkPart);
                        }
                    }
                    ret._partGroups.pushBack(partData.clone());
                    ++groupCount;
                }
                ret._partGroupCounts.pushBack(groupCount);
            }
            cubismjson_1.CubismJson.delete(json);
            return ret;
        };
        CubismPose.delete = function (pose) {
            if (pose != null) {
                pose = null;
            }
        };
        CubismPose.prototype.updateParameters = function (model, deltaTimeSeconds) {
            if (model != this._lastModel) {
                this.reset(model);
            }
            this._lastModel = model;
            if (deltaTimeSeconds < 0.0) {
                deltaTimeSeconds = 0.0;
            }
            var beginIndex = 0;
            for (var i = 0; i < this._partGroupCounts.getSize(); i++) {
                var partGroupCount = this._partGroupCounts.at(i);
                this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);
                beginIndex += partGroupCount;
            }
            this.copyPartOpacities(model);
        };
        CubismPose.prototype.reset = function (model) {
            var beginIndex = 0;
            for (var i = 0; i < this._partGroupCounts.getSize(); ++i) {
                var groupCount = this._partGroupCounts.at(i);
                for (var j = beginIndex; j < beginIndex + groupCount; ++j) {
                    this._partGroups.at(j).initialize(model);
                    var partsIndex = this._partGroups.at(j).partIndex;
                    var paramIndex = this._partGroups.at(j).parameterIndex;
                    if (partsIndex < 0) {
                        continue;
                    }
                    model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1.0 : 0.0);
                    model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1.0 : 0.0);
                    for (var k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {
                        this._partGroups
                            .at(j)
                            .link.at(k)
                            .initialize(model);
                    }
                }
                beginIndex += groupCount;
            }
        };
        CubismPose.prototype.copyPartOpacities = function (model) {
            for (var groupIndex = 0; groupIndex < this._partGroups.getSize(); ++groupIndex) {
                var partData = this._partGroups.at(groupIndex);
                if (partData.link.getSize() == 0) {
                    continue;
                }
                var partIndex = this._partGroups.at(groupIndex).partIndex;
                var opacity = model.getPartOpacityByIndex(partIndex);
                for (var linkIndex = 0; linkIndex < partData.link.getSize(); ++linkIndex) {
                    var linkPart = partData.link.at(linkIndex);
                    var linkPartIndex = linkPart.partIndex;
                    if (linkPartIndex < 0) {
                        continue;
                    }
                    model.setPartOpacityByIndex(linkPartIndex, opacity);
                }
            }
        };
        CubismPose.prototype.doFade = function (model, deltaTimeSeconds, beginIndex, partGroupCount) {
            var visiblePartIndex = -1;
            var newOpacity = 1.0;
            var phi = 0.5;
            var backOpacityThreshold = 0.15;
            for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {
                var partIndex = this._partGroups.at(i).partIndex;
                var paramIndex = this._partGroups.at(i).parameterIndex;
                if (model.getParameterValueByIndex(paramIndex) > Epsilon) {
                    if (visiblePartIndex >= 0) {
                        break;
                    }
                    visiblePartIndex = i;
                    newOpacity = model.getPartOpacityByIndex(partIndex);
                    newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;
                    if (newOpacity > 1.0) {
                        newOpacity = 1.0;
                    }
                }
            }
            if (visiblePartIndex < 0) {
                visiblePartIndex = 0;
                newOpacity = 1.0;
            }
            for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {
                var partsIndex = this._partGroups.at(i).partIndex;
                if (visiblePartIndex == i) {
                    model.setPartOpacityByIndex(partsIndex, newOpacity);
                }
                else {
                    var opacity = model.getPartOpacityByIndex(partsIndex);
                    var a1 = void 0;
                    if (newOpacity < phi) {
                        a1 = (newOpacity * (phi - 1)) / phi + 1.0;
                    }
                    else {
                        a1 = ((1 - newOpacity) * phi) / (1.0 - phi);
                    }
                    var backOpacity = (1.0 - a1) * (1.0 - newOpacity);
                    if (backOpacity > backOpacityThreshold) {
                        a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);
                    }
                    if (opacity > a1) {
                        opacity = a1;
                    }
                    model.setPartOpacityByIndex(partsIndex, opacity);
                }
            }
        };
        return CubismPose;
    }());
    exports.CubismPose = CubismPose;
    var PartData = (function () {
        function PartData(v) {
            this.parameterIndex = 0;
            this.partIndex = 0;
            this.link = new csmvector_1.csmVector();
            if (v != undefined) {
                this.partId = v.partId;
                for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {
                    this.link.pushBack(ite.ptr().clone());
                }
            }
        }
        PartData.prototype.assignment = function (v) {
            this.partId = v.partId;
            for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {
                this.link.pushBack(ite.ptr().clone());
            }
            return this;
        };
        PartData.prototype.initialize = function (model) {
            this.parameterIndex = model.getParameterIndex(this.partId);
            this.partIndex = model.getPartIndex(this.partId);
            model.setParameterValueByIndex(this.parameterIndex, 1);
        };
        PartData.prototype.clone = function () {
            var clonePartData = new PartData();
            clonePartData.partId = this.partId;
            clonePartData.parameterIndex = this.parameterIndex;
            clonePartData.partIndex = this.partIndex;
            clonePartData.link = new csmvector_1.csmVector();
            for (var ite = this.link.begin(); ite.notEqual(this.link.end()); ite.increment()) {
                clonePartData.link.pushBack(ite.ptr().clone());
            }
            return clonePartData;
        };
        return PartData;
    }());
    exports.PartData = PartData;
    var $ = __importStar(__webpack_require__(/*! ./cubismpose */ "../../../Framework/src/effect/cubismpose.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismPose = $.CubismPose;
        Live2DCubismFramework.PartData = $.PartData;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/icubismmodelsetting.ts":
    /*!*****************************************************!*\
      !*** ../../../Framework/src/icubismmodelsetting.ts ***!
      \*****************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.ICubismModelSetting = void 0;
    var ICubismModelSetting = (function () {
        function ICubismModelSetting() {
        }
        return ICubismModelSetting;
    }());
    exports.ICubismModelSetting = ICubismModelSetting;
    var $ = __importStar(__webpack_require__(/*! ./icubismmodelsetting */ "../../../Framework/src/icubismmodelsetting.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.ICubismModelSetting = $.ICubismModelSetting;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/id/cubismid.ts":
    /*!*********************************************!*\
      !*** ../../../Framework/src/id/cubismid.ts ***!
      \*********************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismId = void 0;
    var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "../../../Framework/src/type/csmstring.ts");
    var CubismId = (function () {
        function CubismId(id) {
            if (typeof id === 'string') {
                this._id = new csmstring_1.csmString(id);
                return;
            }
            this._id = id;
        }
        CubismId.prototype.getString = function () {
            return this._id;
        };
        CubismId.prototype.isEqual = function (c) {
            if (typeof c === 'string') {
                return this._id.isEqual(c);
            }
            else if (c instanceof csmstring_1.csmString) {
                return this._id.isEqual(c.s);
            }
            else if (c instanceof CubismId) {
                return this._id.isEqual(c._id.s);
            }
            return false;
        };
        CubismId.prototype.isNotEqual = function (c) {
            if (typeof c == 'string') {
                return !this._id.isEqual(c);
            }
            else if (c instanceof csmstring_1.csmString) {
                return !this._id.isEqual(c.s);
            }
            else if (c instanceof CubismId) {
                return !this._id.isEqual(c._id.s);
            }
            return false;
        };
        return CubismId;
    }());
    exports.CubismId = CubismId;
    var $ = __importStar(__webpack_require__(/*! ./cubismid */ "../../../Framework/src/id/cubismid.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismId = $.CubismId;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/id/cubismidmanager.ts":
    /*!****************************************************!*\
      !*** ../../../Framework/src/id/cubismidmanager.ts ***!
      \****************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismIdManager = void 0;
    var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var cubismid_1 = __webpack_require__(/*! ./cubismid */ "../../../Framework/src/id/cubismid.ts");
    var CubismIdManager = (function () {
        function CubismIdManager() {
            this._ids = new csmvector_1.csmVector();
        }
        CubismIdManager.prototype.release = function () {
            for (var i = 0; i < this._ids.getSize(); ++i) {
                this._ids.set(i, void 0);
            }
            this._ids = null;
        };
        CubismIdManager.prototype.registerIds = function (ids) {
            for (var i = 0; i < ids.length; i++) {
                this.registerId(ids[i]);
            }
        };
        CubismIdManager.prototype.registerId = function (id) {
            var result = null;
            if ('string' == typeof id) {
                if ((result = this.findId(id)) != null) {
                    return result;
                }
                result = new cubismid_1.CubismId(id);
                this._ids.pushBack(result);
            }
            else {
                return this.registerId(id.s);
            }
            return result;
        };
        CubismIdManager.prototype.getId = function (id) {
            return this.registerId(id);
        };
        CubismIdManager.prototype.isExist = function (id) {
            if ('string' == typeof id) {
                return this.findId(id) != null;
            }
            return this.isExist(id.s);
        };
        CubismIdManager.prototype.findId = function (id) {
            for (var i = 0; i < this._ids.getSize(); ++i) {
                if (this._ids
                    .at(i)
                    .getString()
                    .isEqual(id)) {
                    return this._ids.at(i);
                }
            }
            return null;
        };
        return CubismIdManager;
    }());
    exports.CubismIdManager = CubismIdManager;
    var $ = __importStar(__webpack_require__(/*! ./cubismidmanager */ "../../../Framework/src/id/cubismidmanager.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismIdManager = $.CubismIdManager;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/live2dcubismframework.ts":
    /*!*******************************************************!*\
      !*** ../../../Framework/src/live2dcubismframework.ts ***!
      \*******************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.LogLevel = exports.Option = exports.CubismFramework = exports.csmDelete = exports.Constant = exports.strtod = void 0;
    var cubismidmanager_1 = __webpack_require__(/*! ./id/cubismidmanager */ "../../../Framework/src/id/cubismidmanager.ts");
    var cubismrenderer_1 = __webpack_require__(/*! ./rendering/cubismrenderer */ "../../../Framework/src/rendering/cubismrenderer.ts");
    var cubismdebug_1 = __webpack_require__(/*! ./utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
    var cubismjson_1 = __webpack_require__(/*! ./utils/cubismjson */ "../../../Framework/src/utils/cubismjson.ts");
    function strtod(s, endPtr) {
        var index = 0;
        for (var i = 1;; i++) {
            var testC = s.slice(i - 1, i);
            if (testC == 'e' || testC == '-' || testC == 'E') {
                continue;
            }
            var test = s.substring(0, i);
            var number = Number(test);
            if (isNaN(number)) {
                break;
            }
            index = i;
        }
        var d = parseFloat(s);
        if (isNaN(d)) {
            d = NaN;
        }
        endPtr[0] = s.slice(index);
        return d;
    }
    exports.strtod = strtod;
    var s_isStarted = false;
    var s_isInitialized = false;
    var s_option = null;
    var s_cubismIdManager = null;
    exports.Constant = Object.freeze({
        vertexOffset: 0,
        vertexStep: 2
    });
    function csmDelete(address) {
        if (!address) {
            return;
        }
        address = void 0;
    }
    exports.csmDelete = csmDelete;
    var CubismFramework = (function () {
        function CubismFramework() {
        }
        CubismFramework.startUp = function (option) {
            if (option === void 0) { option = null; }
            if (s_isStarted) {
                (0, cubismdebug_1.CubismLogInfo)('CubismFramework.startUp() is already done.');
                return s_isStarted;
            }
            s_option = option;
            if (s_option != null) {
                Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);
            }
            s_isStarted = true;
            if (s_isStarted) {
                var version = Live2DCubismCore.Version.csmGetVersion();
                var major = (version & 0xff000000) >> 24;
                var minor = (version & 0x00ff0000) >> 16;
                var patch = version & 0x0000ffff;
                var versionNumber = version;
                (0, cubismdebug_1.CubismLogInfo)("Live2D Cubism Core version: {0}.{1}.{2} ({3})", ('00' + major).slice(-2), ('00' + minor).slice(-2), ('0000' + patch).slice(-4), versionNumber);
            }
            (0, cubismdebug_1.CubismLogInfo)('CubismFramework.startUp() is complete.');
            return s_isStarted;
        };
        CubismFramework.cleanUp = function () {
            s_isStarted = false;
            s_isInitialized = false;
            s_option = null;
            s_cubismIdManager = null;
        };
        CubismFramework.initialize = function () {
            (0, cubismdebug_1.CSM_ASSERT)(s_isStarted);
            if (!s_isStarted) {
                (0, cubismdebug_1.CubismLogWarning)('CubismFramework is not started.');
                return;
            }
            if (s_isInitialized) {
                (0, cubismdebug_1.CubismLogWarning)('CubismFramework.initialize() skipped, already initialized.');
                return;
            }
            cubismjson_1.Value.staticInitializeNotForClientCall();
            s_cubismIdManager = new cubismidmanager_1.CubismIdManager();
            s_isInitialized = true;
            (0, cubismdebug_1.CubismLogInfo)('CubismFramework.initialize() is complete.');
        };
        CubismFramework.dispose = function () {
            (0, cubismdebug_1.CSM_ASSERT)(s_isStarted);
            if (!s_isStarted) {
                (0, cubismdebug_1.CubismLogWarning)('CubismFramework is not started.');
                return;
            }
            if (!s_isInitialized) {
                (0, cubismdebug_1.CubismLogWarning)('CubismFramework.dispose() skipped, not initialized.');
                return;
            }
            cubismjson_1.Value.staticReleaseNotForClientCall();
            s_cubismIdManager.release();
            s_cubismIdManager = null;
            cubismrenderer_1.CubismRenderer.staticRelease();
            s_isInitialized = false;
            (0, cubismdebug_1.CubismLogInfo)('CubismFramework.dispose() is complete.');
        };
        CubismFramework.isStarted = function () {
            return s_isStarted;
        };
        CubismFramework.isInitialized = function () {
            return s_isInitialized;
        };
        CubismFramework.coreLogFunction = function (message) {
            if (!Live2DCubismCore.Logging.csmGetLogFunction()) {
                return;
            }
            Live2DCubismCore.Logging.csmGetLogFunction()(message);
        };
        CubismFramework.getLoggingLevel = function () {
            if (s_option != null) {
                return s_option.loggingLevel;
            }
            return LogLevel.LogLevel_Off;
        };
        CubismFramework.getIdManager = function () {
            return s_cubismIdManager;
        };
        return CubismFramework;
    }());
    exports.CubismFramework = CubismFramework;
    var Option = (function () {
        function Option() {
        }
        return Option;
    }());
    exports.Option = Option;
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["LogLevel_Verbose"] = 0] = "LogLevel_Verbose";
        LogLevel[LogLevel["LogLevel_Debug"] = 1] = "LogLevel_Debug";
        LogLevel[LogLevel["LogLevel_Info"] = 2] = "LogLevel_Info";
        LogLevel[LogLevel["LogLevel_Warning"] = 3] = "LogLevel_Warning";
        LogLevel[LogLevel["LogLevel_Error"] = 4] = "LogLevel_Error";
        LogLevel[LogLevel["LogLevel_Off"] = 5] = "LogLevel_Off";
    })(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
    var $ = __importStar(__webpack_require__(/*! ./live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.Constant = $.Constant;
        Live2DCubismFramework.csmDelete = $.csmDelete;
        Live2DCubismFramework.CubismFramework = $.CubismFramework;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/math/cubismmath.ts":
    /*!*************************************************!*\
      !*** ../../../Framework/src/math/cubismmath.ts ***!
      \*************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismMath = void 0;
    var cubismvector2_1 = __webpack_require__(/*! ./cubismvector2 */ "../../../Framework/src/math/cubismvector2.ts");
    var CubismMath = (function () {
        function CubismMath() {
        }
        CubismMath.range = function (value, min, max) {
            if (value < min) {
                value = min;
            }
            else if (value > max) {
                value = max;
            }
            return value;
        };
        CubismMath.sin = function (x) {
            return Math.sin(x);
        };
        CubismMath.cos = function (x) {
            return Math.cos(x);
        };
        CubismMath.abs = function (x) {
            return Math.abs(x);
        };
        CubismMath.sqrt = function (x) {
            return Math.sqrt(x);
        };
        CubismMath.cbrt = function (x) {
            if (x === 0) {
                return x;
            }
            var cx = x;
            var isNegativeNumber = cx < 0;
            if (isNegativeNumber) {
                cx = -cx;
            }
            var ret;
            if (cx === Infinity) {
                ret = Infinity;
            }
            else {
                ret = Math.exp(Math.log(cx) / 3);
                ret = (cx / (ret * ret) + 2 * ret) / 3;
            }
            return isNegativeNumber ? -ret : ret;
        };
        CubismMath.getEasingSine = function (value) {
            if (value < 0.0) {
                return 0.0;
            }
            else if (value > 1.0) {
                return 1.0;
            }
            return 0.5 - 0.5 * this.cos(value * Math.PI);
        };
        CubismMath.max = function (left, right) {
            return left > right ? left : right;
        };
        CubismMath.min = function (left, right) {
            return left > right ? right : left;
        };
        CubismMath.degreesToRadian = function (degrees) {
            return (degrees / 180.0) * Math.PI;
        };
        CubismMath.radianToDegrees = function (radian) {
            return (radian * 180.0) / Math.PI;
        };
        CubismMath.directionToRadian = function (from, to) {
            var q1 = Math.atan2(to.y, to.x);
            var q2 = Math.atan2(from.y, from.x);
            var ret = q1 - q2;
            while (ret < -Math.PI) {
                ret += Math.PI * 2.0;
            }
            while (ret > Math.PI) {
                ret -= Math.PI * 2.0;
            }
            return ret;
        };
        CubismMath.directionToDegrees = function (from, to) {
            var radian = this.directionToRadian(from, to);
            var degree = this.radianToDegrees(radian);
            if (to.x - from.x > 0.0) {
                degree = -degree;
            }
            return degree;
        };
        CubismMath.radianToDirection = function (totalAngle) {
            var ret = new cubismvector2_1.CubismVector2();
            ret.x = this.sin(totalAngle);
            ret.y = this.cos(totalAngle);
            return ret;
        };
        CubismMath.quadraticEquation = function (a, b, c) {
            if (this.abs(a) < CubismMath.Epsilon) {
                if (this.abs(b) < CubismMath.Epsilon) {
                    return -c;
                }
                return -c / b;
            }
            return -(b + this.sqrt(b * b - 4.0 * a * c)) / (2.0 * a);
        };
        CubismMath.cardanoAlgorithmForBezier = function (a, b, c, d) {
            if (this.sqrt(a) < CubismMath.Epsilon) {
                return this.range(this.quadraticEquation(b, c, d), 0.0, 1.0);
            }
            var ba = b / a;
            var ca = c / a;
            var da = d / a;
            var p = (3.0 * ca - ba * ba) / 3.0;
            var p3 = p / 3.0;
            var q = (2.0 * ba * ba * ba - 9.0 * ba * ca + 27.0 * da) / 27.0;
            var q2 = q / 2.0;
            var discriminant = q2 * q2 + p3 * p3 * p3;
            var center = 0.5;
            var threshold = center + 0.01;
            if (discriminant < 0.0) {
                var mp3 = -p / 3.0;
                var mp33 = mp3 * mp3 * mp3;
                var r = this.sqrt(mp33);
                var t = -q / (2.0 * r);
                var cosphi = this.range(t, -1.0, 1.0);
                var phi = Math.acos(cosphi);
                var crtr = this.cbrt(r);
                var t1 = 2.0 * crtr;
                var root1_1 = t1 * this.cos(phi / 3.0) - ba / 3.0;
                if (this.abs(root1_1 - center) < threshold) {
                    return this.range(root1_1, 0.0, 1.0);
                }
                var root2 = t1 * this.cos((phi + 2.0 * Math.PI) / 3.0) - ba / 3.0;
                if (this.abs(root2 - center) < threshold) {
                    return this.range(root2, 0.0, 1.0);
                }
                var root3 = t1 * this.cos((phi + 4.0 * Math.PI) / 3.0) - ba / 3.0;
                return this.range(root3, 0.0, 1.0);
            }
            if (discriminant == 0.0) {
                var u1_1;
                if (q2 < 0.0) {
                    u1_1 = this.cbrt(-q2);
                }
                else {
                    u1_1 = -this.cbrt(q2);
                }
                var root1_2 = 2.0 * u1_1 - ba / 3.0;
                if (this.abs(root1_2 - center) < threshold) {
                    return this.range(root1_2, 0.0, 1.0);
                }
                var root2 = -u1_1 - ba / 3.0;
                return this.range(root2, 0.0, 1.0);
            }
            var sd = this.sqrt(discriminant);
            var u1 = this.cbrt(sd - q2);
            var v1 = this.cbrt(sd + q2);
            var root1 = u1 - v1 - ba / 3.0;
            return this.range(root1, 0.0, 1.0);
        };
        CubismMath.Epsilon = 0.00001;
        return CubismMath;
    }());
    exports.CubismMath = CubismMath;
    var $ = __importStar(__webpack_require__(/*! ./cubismmath */ "../../../Framework/src/math/cubismmath.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismMath = $.CubismMath;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/math/cubismmatrix44.ts":
    /*!*****************************************************!*\
      !*** ../../../Framework/src/math/cubismmatrix44.ts ***!
      \*****************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismMatrix44 = void 0;
    var CubismMatrix44 = (function () {
        function CubismMatrix44() {
            this._tr = new Float32Array(16);
            this.loadIdentity();
        }
        CubismMatrix44.multiply = function (a, b, dst) {
            var c = new Float32Array([
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0
            ]);
            var n = 4;
            for (var i = 0; i < n; ++i) {
                for (var j = 0; j < n; ++j) {
                    for (var k = 0; k < n; ++k) {
                        c[j + i * 4] += a[k + i * 4] * b[j + k * 4];
                    }
                }
            }
            for (var i = 0; i < 16; ++i) {
                dst[i] = c[i];
            }
        };
        CubismMatrix44.prototype.loadIdentity = function () {
            var c = new Float32Array([
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0
            ]);
            this.setMatrix(c);
        };
        CubismMatrix44.prototype.setMatrix = function (tr) {
            for (var i = 0; i < 16; ++i) {
                this._tr[i] = tr[i];
            }
        };
        CubismMatrix44.prototype.getArray = function () {
            return this._tr;
        };
        CubismMatrix44.prototype.getScaleX = function () {
            return this._tr[0];
        };
        CubismMatrix44.prototype.getScaleY = function () {
            return this._tr[5];
        };
        CubismMatrix44.prototype.getTranslateX = function () {
            return this._tr[12];
        };
        CubismMatrix44.prototype.getTranslateY = function () {
            return this._tr[13];
        };
        CubismMatrix44.prototype.transformX = function (src) {
            return this._tr[0] * src + this._tr[12];
        };
        CubismMatrix44.prototype.transformY = function (src) {
            return this._tr[5] * src + this._tr[13];
        };
        CubismMatrix44.prototype.invertTransformX = function (src) {
            return (src - this._tr[12]) / this._tr[0];
        };
        CubismMatrix44.prototype.invertTransformY = function (src) {
            return (src - this._tr[13]) / this._tr[5];
        };
        CubismMatrix44.prototype.translateRelative = function (x, y) {
            var tr1 = new Float32Array([
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                x,
                y,
                0.0,
                1.0
            ]);
            CubismMatrix44.multiply(tr1, this._tr, this._tr);
        };
        CubismMatrix44.prototype.translate = function (x, y) {
            this._tr[12] = x;
            this._tr[13] = y;
        };
        CubismMatrix44.prototype.translateX = function (x) {
            this._tr[12] = x;
        };
        CubismMatrix44.prototype.translateY = function (y) {
            this._tr[13] = y;
        };
        CubismMatrix44.prototype.scaleRelative = function (x, y) {
            var tr1 = new Float32Array([
                x,
                0.0,
                0.0,
                0.0,
                0.0,
                y,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0
            ]);
            CubismMatrix44.multiply(tr1, this._tr, this._tr);
        };
        CubismMatrix44.prototype.scale = function (x, y) {
            this._tr[0] = x;
            this._tr[5] = y;
        };
        CubismMatrix44.prototype.multiplyByMatrix = function (m) {
            CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);
        };
        CubismMatrix44.prototype.clone = function () {
            var cloneMatrix = new CubismMatrix44();
            for (var i = 0; i < this._tr.length; i++) {
                cloneMatrix._tr[i] = this._tr[i];
            }
            return cloneMatrix;
        };
        return CubismMatrix44;
    }());
    exports.CubismMatrix44 = CubismMatrix44;
    var $ = __importStar(__webpack_require__(/*! ./cubismmatrix44 */ "../../../Framework/src/math/cubismmatrix44.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismMatrix44 = $.CubismMatrix44;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/math/cubismmodelmatrix.ts":
    /*!********************************************************!*\
      !*** ../../../Framework/src/math/cubismmodelmatrix.ts ***!
      \********************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismModelMatrix = void 0;
    var cubismmatrix44_1 = __webpack_require__(/*! ./cubismmatrix44 */ "../../../Framework/src/math/cubismmatrix44.ts");
    var CubismModelMatrix = (function (_super) {
        __extends(CubismModelMatrix, _super);
        function CubismModelMatrix(w, h) {
            var _this = _super.call(this) || this;
            _this._width = w !== undefined ? w : 0.0;
            _this._height = h !== undefined ? h : 0.0;
            _this.setHeight(2.0);
            return _this;
        }
        CubismModelMatrix.prototype.setWidth = function (w) {
            var scaleX = w / this._width;
            var scaleY = scaleX;
            this.scale(scaleX, scaleY);
        };
        CubismModelMatrix.prototype.setHeight = function (h) {
            var scaleX = h / this._height;
            var scaleY = scaleX;
            this.scale(scaleX, scaleY);
        };
        CubismModelMatrix.prototype.setPosition = function (x, y) {
            this.translate(x, y);
        };
        CubismModelMatrix.prototype.setCenterPosition = function (x, y) {
            this.centerX(x);
            this.centerY(y);
        };
        CubismModelMatrix.prototype.top = function (y) {
            this.setY(y);
        };
        CubismModelMatrix.prototype.bottom = function (y) {
            var h = this._height * this.getScaleY();
            this.translateY(y - h);
        };
        CubismModelMatrix.prototype.left = function (x) {
            this.setX(x);
        };
        CubismModelMatrix.prototype.right = function (x) {
            var w = this._width * this.getScaleX();
            this.translateX(x - w);
        };
        CubismModelMatrix.prototype.centerX = function (x) {
            var w = this._width * this.getScaleX();
            this.translateX(x - w / 2.0);
        };
        CubismModelMatrix.prototype.setX = function (x) {
            this.translateX(x);
        };
        CubismModelMatrix.prototype.centerY = function (y) {
            var h = this._height * this.getScaleY();
            this.translateY(y - h / 2.0);
        };
        CubismModelMatrix.prototype.setY = function (y) {
            this.translateY(y);
        };
        CubismModelMatrix.prototype.setupFromLayout = function (layout) {
            var keyWidth = 'width';
            var keyHeight = 'height';
            var keyX = 'x';
            var keyY = 'y';
            var keyCenterX = 'center_x';
            var keyCenterY = 'center_y';
            var keyTop = 'top';
            var keyBottom = 'bottom';
            var keyLeft = 'left';
            var keyRight = 'right';
            for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {
                var key = ite.ptr().first;
                var value = ite.ptr().second;
                if (key == keyWidth) {
                    this.setWidth(value);
                }
                else if (key == keyHeight) {
                    this.setHeight(value);
                }
            }
            for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {
                var key = ite.ptr().first;
                var value = ite.ptr().second;
                if (key == keyX) {
                    this.setX(value);
                }
                else if (key == keyY) {
                    this.setY(value);
                }
                else if (key == keyCenterX) {
                    this.centerX(value);
                }
                else if (key == keyCenterY) {
                    this.centerY(value);
                }
                else if (key == keyTop) {
                    this.top(value);
                }
                else if (key == keyBottom) {
                    this.bottom(value);
                }
                else if (key == keyLeft) {
                    this.left(value);
                }
                else if (key == keyRight) {
                    this.right(value);
                }
            }
        };
        return CubismModelMatrix;
    }(cubismmatrix44_1.CubismMatrix44));
    exports.CubismModelMatrix = CubismModelMatrix;
    var $ = __importStar(__webpack_require__(/*! ./cubismmodelmatrix */ "../../../Framework/src/math/cubismmodelmatrix.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismModelMatrix = $.CubismModelMatrix;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/math/cubismtargetpoint.ts":
    /*!********************************************************!*\
      !*** ../../../Framework/src/math/cubismtargetpoint.ts ***!
      \********************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismTargetPoint = void 0;
    var cubismmath_1 = __webpack_require__(/*! ./cubismmath */ "../../../Framework/src/math/cubismmath.ts");
    var FrameRate = 30;
    var Epsilon = 0.01;
    var CubismTargetPoint = (function () {
        function CubismTargetPoint() {
            this._faceTargetX = 0.0;
            this._faceTargetY = 0.0;
            this._faceX = 0.0;
            this._faceY = 0.0;
            this._faceVX = 0.0;
            this._faceVY = 0.0;
            this._lastTimeSeconds = 0.0;
            this._userTimeSeconds = 0.0;
        }
        CubismTargetPoint.prototype.update = function (deltaTimeSeconds) {
            this._userTimeSeconds += deltaTimeSeconds;
            var faceParamMaxV = 40.0 / 10.0;
            var maxV = (faceParamMaxV * 1.0) / FrameRate;
            if (this._lastTimeSeconds == 0.0) {
                this._lastTimeSeconds = this._userTimeSeconds;
                return;
            }
            var deltaTimeWeight = (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;
            this._lastTimeSeconds = this._userTimeSeconds;
            var timeToMaxSpeed = 0.15;
            var frameToMaxSpeed = timeToMaxSpeed * FrameRate;
            var maxA = (deltaTimeWeight * maxV) / frameToMaxSpeed;
            var dx = this._faceTargetX - this._faceX;
            var dy = this._faceTargetY - this._faceY;
            if (cubismmath_1.CubismMath.abs(dx) <= Epsilon && cubismmath_1.CubismMath.abs(dy) <= Epsilon) {
                return;
            }
            var d = cubismmath_1.CubismMath.sqrt(dx * dx + dy * dy);
            var vx = (maxV * dx) / d;
            var vy = (maxV * dy) / d;
            var ax = vx - this._faceVX;
            var ay = vy - this._faceVY;
            var a = cubismmath_1.CubismMath.sqrt(ax * ax + ay * ay);
            if (a < -maxA || a > maxA) {
                ax *= maxA / a;
                ay *= maxA / a;
            }
            this._faceVX += ax;
            this._faceVY += ay;
            {
                var maxV_1 = 0.5 *
                    (cubismmath_1.CubismMath.sqrt(maxA * maxA + 16.0 * maxA * d - 8.0 * maxA * d) -
                        maxA);
                var curV = cubismmath_1.CubismMath.sqrt(this._faceVX * this._faceVX + this._faceVY * this._faceVY);
                if (curV > maxV_1) {
                    this._faceVX *= maxV_1 / curV;
                    this._faceVY *= maxV_1 / curV;
                }
            }
            this._faceX += this._faceVX;
            this._faceY += this._faceVY;
        };
        CubismTargetPoint.prototype.getX = function () {
            return this._faceX;
        };
        CubismTargetPoint.prototype.getY = function () {
            return this._faceY;
        };
        CubismTargetPoint.prototype.set = function (x, y) {
            this._faceTargetX = x;
            this._faceTargetY = y;
        };
        return CubismTargetPoint;
    }());
    exports.CubismTargetPoint = CubismTargetPoint;
    var $ = __importStar(__webpack_require__(/*! ./cubismtargetpoint */ "../../../Framework/src/math/cubismtargetpoint.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismTargetPoint = $.CubismTargetPoint;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/math/cubismvector2.ts":
    /*!****************************************************!*\
      !*** ../../../Framework/src/math/cubismvector2.ts ***!
      \****************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismVector2 = void 0;
    var CubismVector2 = (function () {
        function CubismVector2(x, y) {
            this.x = x;
            this.y = y;
            this.x = x == undefined ? 0.0 : x;
            this.y = y == undefined ? 0.0 : y;
        }
        CubismVector2.prototype.add = function (vector2) {
            var ret = new CubismVector2(0.0, 0.0);
            ret.x = this.x + vector2.x;
            ret.y = this.y + vector2.y;
            return ret;
        };
        CubismVector2.prototype.substract = function (vector2) {
            var ret = new CubismVector2(0.0, 0.0);
            ret.x = this.x - vector2.x;
            ret.y = this.y - vector2.y;
            return ret;
        };
        CubismVector2.prototype.multiply = function (vector2) {
            var ret = new CubismVector2(0.0, 0.0);
            ret.x = this.x * vector2.x;
            ret.y = this.y * vector2.y;
            return ret;
        };
        CubismVector2.prototype.multiplyByScaler = function (scalar) {
            return this.multiply(new CubismVector2(scalar, scalar));
        };
        CubismVector2.prototype.division = function (vector2) {
            var ret = new CubismVector2(0.0, 0.0);
            ret.x = this.x / vector2.x;
            ret.y = this.y / vector2.y;
            return ret;
        };
        CubismVector2.prototype.divisionByScalar = function (scalar) {
            return this.division(new CubismVector2(scalar, scalar));
        };
        CubismVector2.prototype.getLength = function () {
            return Math.sqrt(this.x * this.x + this.y * this.y);
        };
        CubismVector2.prototype.getDistanceWith = function (a) {
            return Math.sqrt((this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y));
        };
        CubismVector2.prototype.dot = function (a) {
            return this.x * a.x + this.y * a.y;
        };
        CubismVector2.prototype.normalize = function () {
            var length = Math.pow(this.x * this.x + this.y * this.y, 0.5);
            this.x = this.x / length;
            this.y = this.y / length;
        };
        CubismVector2.prototype.isEqual = function (rhs) {
            return this.x == rhs.x && this.y == rhs.y;
        };
        CubismVector2.prototype.isNotEqual = function (rhs) {
            return !this.isEqual(rhs);
        };
        return CubismVector2;
    }());
    exports.CubismVector2 = CubismVector2;
    var $ = __importStar(__webpack_require__(/*! ./cubismvector2 */ "../../../Framework/src/math/cubismvector2.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismVector2 = $.CubismVector2;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/math/cubismviewmatrix.ts":
    /*!*******************************************************!*\
      !*** ../../../Framework/src/math/cubismviewmatrix.ts ***!
      \*******************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismViewMatrix = void 0;
    var cubismmatrix44_1 = __webpack_require__(/*! ./cubismmatrix44 */ "../../../Framework/src/math/cubismmatrix44.ts");
    var CubismViewMatrix = (function (_super) {
        __extends(CubismViewMatrix, _super);
        function CubismViewMatrix() {
            var _this = _super.call(this) || this;
            _this._screenLeft = 0.0;
            _this._screenRight = 0.0;
            _this._screenTop = 0.0;
            _this._screenBottom = 0.0;
            _this._maxLeft = 0.0;
            _this._maxRight = 0.0;
            _this._maxTop = 0.0;
            _this._maxBottom = 0.0;
            _this._maxScale = 0.0;
            _this._minScale = 0.0;
            return _this;
        }
        CubismViewMatrix.prototype.adjustTranslate = function (x, y) {
            if (this._tr[0] * this._maxLeft + (this._tr[12] + x) > this._screenLeft) {
                x = this._screenLeft - this._tr[0] * this._maxLeft - this._tr[12];
            }
            if (this._tr[0] * this._maxRight + (this._tr[12] + x) < this._screenRight) {
                x = this._screenRight - this._tr[0] * this._maxRight - this._tr[12];
            }
            if (this._tr[5] * this._maxTop + (this._tr[13] + y) < this._screenTop) {
                y = this._screenTop - this._tr[5] * this._maxTop - this._tr[13];
            }
            if (this._tr[5] * this._maxBottom + (this._tr[13] + y) >
                this._screenBottom) {
                y = this._screenBottom - this._tr[5] * this._maxBottom - this._tr[13];
            }
            var tr1 = new Float32Array([
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                x,
                y,
                0.0,
                1.0
            ]);
            cubismmatrix44_1.CubismMatrix44.multiply(tr1, this._tr, this._tr);
        };
        CubismViewMatrix.prototype.adjustScale = function (cx, cy, scale) {
            var maxScale = this.getMaxScale();
            var minScale = this.getMinScale();
            var targetScale = scale * this._tr[0];
            if (targetScale < minScale) {
                if (this._tr[0] > 0.0) {
                    scale = minScale / this._tr[0];
                }
            }
            else if (targetScale > maxScale) {
                if (this._tr[0] > 0.0) {
                    scale = maxScale / this._tr[0];
                }
            }
            var tr1 = new Float32Array([
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                cx,
                cy,
                0.0,
                1.0
            ]);
            var tr2 = new Float32Array([
                scale,
                0.0,
                0.0,
                0.0,
                0.0,
                scale,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0
            ]);
            var tr3 = new Float32Array([
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
                0.0,
                -cx,
                -cy,
                0.0,
                1.0
            ]);
            cubismmatrix44_1.CubismMatrix44.multiply(tr3, this._tr, this._tr);
            cubismmatrix44_1.CubismMatrix44.multiply(tr2, this._tr, this._tr);
            cubismmatrix44_1.CubismMatrix44.multiply(tr1, this._tr, this._tr);
        };
        CubismViewMatrix.prototype.setScreenRect = function (left, right, bottom, top) {
            this._screenLeft = left;
            this._screenRight = right;
            this._screenBottom = bottom;
            this._screenTop = top;
        };
        CubismViewMatrix.prototype.setMaxScreenRect = function (left, right, bottom, top) {
            this._maxLeft = left;
            this._maxRight = right;
            this._maxTop = top;
            this._maxBottom = bottom;
        };
        CubismViewMatrix.prototype.setMaxScale = function (maxScale) {
            this._maxScale = maxScale;
        };
        CubismViewMatrix.prototype.setMinScale = function (minScale) {
            this._minScale = minScale;
        };
        CubismViewMatrix.prototype.getMaxScale = function () {
            return this._maxScale;
        };
        CubismViewMatrix.prototype.getMinScale = function () {
            return this._minScale;
        };
        CubismViewMatrix.prototype.isMaxScale = function () {
            return this.getScaleX() >= this._maxScale;
        };
        CubismViewMatrix.prototype.isMinScale = function () {
            return this.getScaleX() <= this._minScale;
        };
        CubismViewMatrix.prototype.getScreenLeft = function () {
            return this._screenLeft;
        };
        CubismViewMatrix.prototype.getScreenRight = function () {
            return this._screenRight;
        };
        CubismViewMatrix.prototype.getScreenBottom = function () {
            return this._screenBottom;
        };
        CubismViewMatrix.prototype.getScreenTop = function () {
            return this._screenTop;
        };
        CubismViewMatrix.prototype.getMaxLeft = function () {
            return this._maxLeft;
        };
        CubismViewMatrix.prototype.getMaxRight = function () {
            return this._maxRight;
        };
        CubismViewMatrix.prototype.getMaxBottom = function () {
            return this._maxBottom;
        };
        CubismViewMatrix.prototype.getMaxTop = function () {
            return this._maxTop;
        };
        return CubismViewMatrix;
    }(cubismmatrix44_1.CubismMatrix44));
    exports.CubismViewMatrix = CubismViewMatrix;
    var $ = __importStar(__webpack_require__(/*! ./cubismviewmatrix */ "../../../Framework/src/math/cubismviewmatrix.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismViewMatrix = $.CubismViewMatrix;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/model/cubismmoc.ts":
    /*!*************************************************!*\
      !*** ../../../Framework/src/model/cubismmoc.ts ***!
      \*************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismMoc = void 0;
    var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
    var cubismmodel_1 = __webpack_require__(/*! ./cubismmodel */ "../../../Framework/src/model/cubismmodel.ts");
    var CubismMoc = (function () {
        function CubismMoc(moc) {
            this._moc = moc;
            this._modelCount = 0;
        }
        CubismMoc.create = function (mocBytes) {
            var cubismMoc = null;
            var moc = Live2DCubismCore.Moc.fromArrayBuffer(mocBytes);
            if (moc) {
                cubismMoc = new CubismMoc(moc);
            }
            return cubismMoc;
        };
        CubismMoc.delete = function (moc) {
            moc._moc._release();
            moc._moc = null;
            moc = null;
        };
        CubismMoc.prototype.createModel = function () {
            var cubismModel = null;
            var model = Live2DCubismCore.Model.fromMoc(this._moc);
            if (model) {
                cubismModel = new cubismmodel_1.CubismModel(model);
                cubismModel.initialize();
                ++this._modelCount;
            }
            return cubismModel;
        };
        CubismMoc.prototype.deleteModel = function (model) {
            if (model != null) {
                model.release();
                model = null;
                --this._modelCount;
            }
        };
        CubismMoc.prototype.release = function () {
            (0, cubismdebug_1.CSM_ASSERT)(this._modelCount == 0);
            this._moc._release();
            this._moc = null;
        };
        return CubismMoc;
    }());
    exports.CubismMoc = CubismMoc;
    var $ = __importStar(__webpack_require__(/*! ./cubismmoc */ "../../../Framework/src/model/cubismmoc.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismMoc = $.CubismMoc;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/model/cubismmodel.ts":
    /*!***************************************************!*\
      !*** ../../../Framework/src/model/cubismmodel.ts ***!
      \***************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismModel = void 0;
    var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    var cubismrenderer_1 = __webpack_require__(/*! ../rendering/cubismrenderer */ "../../../Framework/src/rendering/cubismrenderer.ts");
    var csmmap_1 = __webpack_require__(/*! ../type/csmmap */ "../../../Framework/src/type/csmmap.ts");
    var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
    var CubismModel = (function () {
        function CubismModel(model) {
            this._model = model;
            this._parameterValues = null;
            this._parameterMaximumValues = null;
            this._parameterMinimumValues = null;
            this._partOpacities = null;
            this._savedParameters = new csmvector_1.csmVector();
            this._parameterIds = new csmvector_1.csmVector();
            this._drawableIds = new csmvector_1.csmVector();
            this._partIds = new csmvector_1.csmVector();
            this._notExistPartId = new csmmap_1.csmMap();
            this._notExistParameterId = new csmmap_1.csmMap();
            this._notExistParameterValues = new csmmap_1.csmMap();
            this._notExistPartOpacities = new csmmap_1.csmMap();
        }
        CubismModel.prototype.update = function () {
            this._model.update();
            this._model.drawables.resetDynamicFlags();
        };
        CubismModel.prototype.getCanvasWidth = function () {
            if (this._model == null) {
                return 0.0;
            }
            return (this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit);
        };
        CubismModel.prototype.getCanvasHeight = function () {
            if (this._model == null) {
                return 0.0;
            }
            return (this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit);
        };
        CubismModel.prototype.saveParameters = function () {
            var parameterCount = this._model.parameters.count;
            var savedParameterCount = this._savedParameters.getSize();
            for (var i = 0; i < parameterCount; ++i) {
                if (i < savedParameterCount) {
                    this._savedParameters.set(i, this._parameterValues[i]);
                }
                else {
                    this._savedParameters.pushBack(this._parameterValues[i]);
                }
            }
        };
        CubismModel.prototype.getModel = function () {
            return this._model;
        };
        CubismModel.prototype.getPartIndex = function (partId) {
            var partIndex;
            var partCount = this._model.parts.count;
            for (partIndex = 0; partIndex < partCount; ++partIndex) {
                if (partId == this._partIds.at(partIndex)) {
                    return partIndex;
                }
            }
            if (this._notExistPartId.isExist(partId)) {
                return this._notExistPartId.getValue(partId);
            }
            partIndex = partCount + this._notExistPartId.getSize();
            this._notExistPartId.setValue(partId, partIndex);
            this._notExistPartOpacities.appendKey(partIndex);
            return partIndex;
        };
        CubismModel.prototype.getPartCount = function () {
            var partCount = this._model.parts.count;
            return partCount;
        };
        CubismModel.prototype.setPartOpacityByIndex = function (partIndex, opacity) {
            if (this._notExistPartOpacities.isExist(partIndex)) {
                this._notExistPartOpacities.setValue(partIndex, opacity);
                return;
            }
            (0, cubismdebug_1.CSM_ASSERT)(0 <= partIndex && partIndex < this.getPartCount());
            this._partOpacities[partIndex] = opacity;
        };
        CubismModel.prototype.setPartOpacityById = function (partId, opacity) {
            var index = this.getPartIndex(partId);
            if (index < 0) {
                return;
            }
            this.setPartOpacityByIndex(index, opacity);
        };
        CubismModel.prototype.getPartOpacityByIndex = function (partIndex) {
            if (this._notExistPartOpacities.isExist(partIndex)) {
                return this._notExistPartOpacities.getValue(partIndex);
            }
            (0, cubismdebug_1.CSM_ASSERT)(0 <= partIndex && partIndex < this.getPartCount());
            return this._partOpacities[partIndex];
        };
        CubismModel.prototype.getPartOpacityById = function (partId) {
            var index = this.getPartIndex(partId);
            if (index < 0) {
                return 0;
            }
            return this.getPartOpacityByIndex(index);
        };
        CubismModel.prototype.getParameterIndex = function (parameterId) {
            var parameterIndex;
            var idCount = this._model.parameters.count;
            for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {
                if (parameterId != this._parameterIds.at(parameterIndex)) {
                    continue;
                }
                return parameterIndex;
            }
            if (this._notExistParameterId.isExist(parameterId)) {
                return this._notExistParameterId.getValue(parameterId);
            }
            parameterIndex =
                this._model.parameters.count + this._notExistParameterId.getSize();
            this._notExistParameterId.setValue(parameterId, parameterIndex);
            this._notExistParameterValues.appendKey(parameterIndex);
            return parameterIndex;
        };
        CubismModel.prototype.getParameterCount = function () {
            return this._model.parameters.count;
        };
        CubismModel.prototype.getParameterMaximumValue = function (parameterIndex) {
            return this._model.parameters.maximumValues[parameterIndex];
        };
        CubismModel.prototype.getParameterMinimumValue = function (parameterIndex) {
            return this._model.parameters.minimumValues[parameterIndex];
        };
        CubismModel.prototype.getParameterDefaultValue = function (parameterIndex) {
            return this._model.parameters.defaultValues[parameterIndex];
        };
        CubismModel.prototype.getParameterValueByIndex = function (parameterIndex) {
            if (this._notExistParameterValues.isExist(parameterIndex)) {
                return this._notExistParameterValues.getValue(parameterIndex);
            }
            (0, cubismdebug_1.CSM_ASSERT)(0 <= parameterIndex && parameterIndex < this.getParameterCount());
            return this._parameterValues[parameterIndex];
        };
        CubismModel.prototype.getParameterValueById = function (parameterId) {
            var parameterIndex = this.getParameterIndex(parameterId);
            return this.getParameterValueByIndex(parameterIndex);
        };
        CubismModel.prototype.setParameterValueByIndex = function (parameterIndex, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            if (this._notExistParameterValues.isExist(parameterIndex)) {
                this._notExistParameterValues.setValue(parameterIndex, weight == 1
                    ? value
                    : this._notExistParameterValues.getValue(parameterIndex) *
                        (1 - weight) +
                        value * weight);
                return;
            }
            (0, cubismdebug_1.CSM_ASSERT)(0 <= parameterIndex && parameterIndex < this.getParameterCount());
            if (this._model.parameters.maximumValues[parameterIndex] < value) {
                value = this._model.parameters.maximumValues[parameterIndex];
            }
            if (this._model.parameters.minimumValues[parameterIndex] > value) {
                value = this._model.parameters.minimumValues[parameterIndex];
            }
            this._parameterValues[parameterIndex] =
                weight == 1
                    ? value
                    : (this._parameterValues[parameterIndex] =
                        this._parameterValues[parameterIndex] * (1 - weight) +
                            value * weight);
        };
        CubismModel.prototype.setParameterValueById = function (parameterId, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            var index = this.getParameterIndex(parameterId);
            this.setParameterValueByIndex(index, value, weight);
        };
        CubismModel.prototype.addParameterValueByIndex = function (parameterIndex, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) + value * weight);
        };
        CubismModel.prototype.addParameterValueById = function (parameterId, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            var index = this.getParameterIndex(parameterId);
            this.addParameterValueByIndex(index, value, weight);
        };
        CubismModel.prototype.multiplyParameterValueById = function (parameterId, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            var index = this.getParameterIndex(parameterId);
            this.multiplyParameterValueByIndex(index, value, weight);
        };
        CubismModel.prototype.multiplyParameterValueByIndex = function (parameterIndex, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) *
                (1.0 + (value - 1.0) * weight));
        };
        CubismModel.prototype.getDrawableIndex = function (drawableId) {
            var drawableCount = this._model.drawables.count;
            for (var drawableIndex = 0; drawableIndex < drawableCount; ++drawableIndex) {
                if (this._drawableIds.at(drawableIndex) == drawableId) {
                    return drawableIndex;
                }
            }
            return -1;
        };
        CubismModel.prototype.getDrawableCount = function () {
            var drawableCount = this._model.drawables.count;
            return drawableCount;
        };
        CubismModel.prototype.getDrawableId = function (drawableIndex) {
            var parameterIds = this._model.drawables.ids;
            return live2dcubismframework_1.CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);
        };
        CubismModel.prototype.getDrawableRenderOrders = function () {
            var renderOrders = this._model.drawables.renderOrders;
            return renderOrders;
        };
        CubismModel.prototype.getDrawableTextureIndices = function (drawableIndex) {
            var textureIndices = this._model.drawables.textureIndices;
            return textureIndices[drawableIndex];
        };
        CubismModel.prototype.getDrawableDynamicFlagVertexPositionsDidChange = function (drawableIndex) {
            var dynamicFlags = this._model.drawables.dynamicFlags;
            return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(dynamicFlags[drawableIndex]);
        };
        CubismModel.prototype.getDrawableVertexIndexCount = function (drawableIndex) {
            var indexCounts = this._model.drawables.indexCounts;
            return indexCounts[drawableIndex];
        };
        CubismModel.prototype.getDrawableVertexCount = function (drawableIndex) {
            var vertexCounts = this._model.drawables.vertexCounts;
            return vertexCounts[drawableIndex];
        };
        CubismModel.prototype.getDrawableVertices = function (drawableIndex) {
            return this.getDrawableVertexPositions(drawableIndex);
        };
        CubismModel.prototype.getDrawableVertexIndices = function (drawableIndex) {
            var indicesArray = this._model.drawables.indices;
            return indicesArray[drawableIndex];
        };
        CubismModel.prototype.getDrawableVertexPositions = function (drawableIndex) {
            var verticesArray = this._model.drawables.vertexPositions;
            return verticesArray[drawableIndex];
        };
        CubismModel.prototype.getDrawableVertexUvs = function (drawableIndex) {
            var uvsArray = this._model.drawables.vertexUvs;
            return uvsArray[drawableIndex];
        };
        CubismModel.prototype.getDrawableOpacity = function (drawableIndex) {
            var opacities = this._model.drawables.opacities;
            return opacities[drawableIndex];
        };
        CubismModel.prototype.getDrawableCulling = function (drawableIndex) {
            var constantFlags = this._model.drawables.constantFlags;
            return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(constantFlags[drawableIndex]);
        };
        CubismModel.prototype.getDrawableBlendMode = function (drawableIndex) {
            var constantFlags = this._model.drawables.constantFlags;
            return Live2DCubismCore.Utils.hasBlendAdditiveBit(constantFlags[drawableIndex])
                ? cubismrenderer_1.CubismBlendMode.CubismBlendMode_Additive
                : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(constantFlags[drawableIndex])
                    ? cubismrenderer_1.CubismBlendMode.CubismBlendMode_Multiplicative
                    : cubismrenderer_1.CubismBlendMode.CubismBlendMode_Normal;
        };
        CubismModel.prototype.getDrawableInvertedMaskBit = function (drawableIndex) {
            var constantFlags = this._model.drawables.constantFlags;
            return Live2DCubismCore.Utils.hasIsInvertedMaskBit(constantFlags[drawableIndex]);
        };
        CubismModel.prototype.getDrawableMasks = function () {
            var masks = this._model.drawables.masks;
            return masks;
        };
        CubismModel.prototype.getDrawableMaskCounts = function () {
            var maskCounts = this._model.drawables.maskCounts;
            return maskCounts;
        };
        CubismModel.prototype.isUsingMasking = function () {
            for (var d = 0; d < this._model.drawables.count; ++d) {
                if (this._model.drawables.maskCounts[d] <= 0) {
                    continue;
                }
                return true;
            }
            return false;
        };
        CubismModel.prototype.getDrawableDynamicFlagIsVisible = function (drawableIndex) {
            var dynamicFlags = this._model.drawables.dynamicFlags;
            return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);
        };
        CubismModel.prototype.getDrawableDynamicFlagVisibilityDidChange = function (drawableIndex) {
            var dynamicFlags = this._model.drawables.dynamicFlags;
            return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(dynamicFlags[drawableIndex]);
        };
        CubismModel.prototype.getDrawableDynamicFlagOpacityDidChange = function (drawableIndex) {
            var dynamicFlags = this._model.drawables.dynamicFlags;
            return Live2DCubismCore.Utils.hasOpacityDidChangeBit(dynamicFlags[drawableIndex]);
        };
        CubismModel.prototype.getDrawableDynamicFlagRenderOrderDidChange = function (drawableIndex) {
            var dynamicFlags = this._model.drawables.dynamicFlags;
            return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(dynamicFlags[drawableIndex]);
        };
        CubismModel.prototype.loadParameters = function () {
            var parameterCount = this._model.parameters.count;
            var savedParameterCount = this._savedParameters.getSize();
            if (parameterCount > savedParameterCount) {
                parameterCount = savedParameterCount;
            }
            for (var i = 0; i < parameterCount; ++i) {
                this._parameterValues[i] = this._savedParameters.at(i);
            }
        };
        CubismModel.prototype.initialize = function () {
            (0, cubismdebug_1.CSM_ASSERT)(this._model);
            this._parameterValues = this._model.parameters.values;
            this._partOpacities = this._model.parts.opacities;
            this._parameterMaximumValues = this._model.parameters.maximumValues;
            this._parameterMinimumValues = this._model.parameters.minimumValues;
            {
                var parameterIds = this._model.parameters.ids;
                var parameterCount = this._model.parameters.count;
                this._parameterIds.prepareCapacity(parameterCount);
                for (var i = 0; i < parameterCount; ++i) {
                    this._parameterIds.pushBack(live2dcubismframework_1.CubismFramework.getIdManager().getId(parameterIds[i]));
                }
            }
            {
                var partIds = this._model.parts.ids;
                var partCount = this._model.parts.count;
                this._partIds.prepareCapacity(partCount);
                for (var i = 0; i < partCount; ++i) {
                    this._partIds.pushBack(live2dcubismframework_1.CubismFramework.getIdManager().getId(partIds[i]));
                }
            }
            {
                var drawableIds = this._model.drawables.ids;
                var drawableCount = this._model.drawables.count;
                this._drawableIds.prepareCapacity(drawableCount);
                for (var i = 0; i < drawableCount; ++i) {
                    this._drawableIds.pushBack(live2dcubismframework_1.CubismFramework.getIdManager().getId(drawableIds[i]));
                }
            }
        };
        CubismModel.prototype.release = function () {
            this._model.release();
            this._model = null;
        };
        return CubismModel;
    }());
    exports.CubismModel = CubismModel;
    var $ = __importStar(__webpack_require__(/*! ./cubismmodel */ "../../../Framework/src/model/cubismmodel.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismModel = $.CubismModel;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/model/cubismmodeluserdata.ts":
    /*!***********************************************************!*\
      !*** ../../../Framework/src/model/cubismmodeluserdata.ts ***!
      \***********************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismModelUserData = exports.CubismModelUserDataNode = void 0;
    var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "../../../Framework/src/type/csmstring.ts");
    var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var cubismmodeluserdatajson_1 = __webpack_require__(/*! ./cubismmodeluserdatajson */ "../../../Framework/src/model/cubismmodeluserdatajson.ts");
    var ArtMesh = 'ArtMesh';
    var CubismModelUserDataNode = (function () {
        function CubismModelUserDataNode() {
        }
        return CubismModelUserDataNode;
    }());
    exports.CubismModelUserDataNode = CubismModelUserDataNode;
    var CubismModelUserData = (function () {
        function CubismModelUserData() {
            this._userDataNodes = new csmvector_1.csmVector();
            this._artMeshUserDataNode = new csmvector_1.csmVector();
        }
        CubismModelUserData.create = function (buffer, size) {
            var ret = new CubismModelUserData();
            ret.parseUserData(buffer, size);
            return ret;
        };
        CubismModelUserData.delete = function (modelUserData) {
            if (modelUserData != null) {
                modelUserData.release();
                modelUserData = null;
            }
        };
        CubismModelUserData.prototype.getArtMeshUserDatas = function () {
            return this._artMeshUserDataNode;
        };
        CubismModelUserData.prototype.parseUserData = function (buffer, size) {
            var json = new cubismmodeluserdatajson_1.CubismModelUserDataJson(buffer, size);
            var typeOfArtMesh = live2dcubismframework_1.CubismFramework.getIdManager().getId(ArtMesh);
            var nodeCount = json.getUserDataCount();
            for (var i = 0; i < nodeCount; i++) {
                var addNode = new CubismModelUserDataNode();
                addNode.targetId = json.getUserDataId(i);
                addNode.targetType = live2dcubismframework_1.CubismFramework.getIdManager().getId(json.getUserDataTargetType(i));
                addNode.value = new csmstring_1.csmString(json.getUserDataValue(i));
                this._userDataNodes.pushBack(addNode);
                if (addNode.targetType == typeOfArtMesh) {
                    this._artMeshUserDataNode.pushBack(addNode);
                }
            }
            json.release();
            json = void 0;
        };
        CubismModelUserData.prototype.release = function () {
            for (var i = 0; i < this._userDataNodes.getSize(); ++i) {
                this._userDataNodes.set(i, null);
            }
            this._userDataNodes = null;
        };
        return CubismModelUserData;
    }());
    exports.CubismModelUserData = CubismModelUserData;
    var $ = __importStar(__webpack_require__(/*! ./cubismmodeluserdata */ "../../../Framework/src/model/cubismmodeluserdata.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismModelUserData = $.CubismModelUserData;
        Live2DCubismFramework.CubismModelUserDataNode = $.CubismModelUserDataNode;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/model/cubismmodeluserdatajson.ts":
    /*!***************************************************************!*\
      !*** ../../../Framework/src/model/cubismmodeluserdatajson.ts ***!
      \***************************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismModelUserDataJson = void 0;
    var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "../../../Framework/src/utils/cubismjson.ts");
    var Meta = 'Meta';
    var UserDataCount = 'UserDataCount';
    var TotalUserDataSize = 'TotalUserDataSize';
    var UserData = 'UserData';
    var Target = 'Target';
    var Id = 'Id';
    var Value = 'Value';
    var CubismModelUserDataJson = (function () {
        function CubismModelUserDataJson(buffer, size) {
            this._json = cubismjson_1.CubismJson.create(buffer, size);
        }
        CubismModelUserDataJson.prototype.release = function () {
            cubismjson_1.CubismJson.delete(this._json);
        };
        CubismModelUserDataJson.prototype.getUserDataCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(UserDataCount)
                .toInt();
        };
        CubismModelUserDataJson.prototype.getTotalUserDataSize = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(TotalUserDataSize)
                .toInt();
        };
        CubismModelUserDataJson.prototype.getUserDataTargetType = function (i) {
            return this._json
                .getRoot()
                .getValueByString(UserData)
                .getValueByIndex(i)
                .getValueByString(Target)
                .getRawString();
        };
        CubismModelUserDataJson.prototype.getUserDataId = function (i) {
            return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json
                .getRoot()
                .getValueByString(UserData)
                .getValueByIndex(i)
                .getValueByString(Id)
                .getRawString());
        };
        CubismModelUserDataJson.prototype.getUserDataValue = function (i) {
            return this._json
                .getRoot()
                .getValueByString(UserData)
                .getValueByIndex(i)
                .getValueByString(Value)
                .getRawString();
        };
        return CubismModelUserDataJson;
    }());
    exports.CubismModelUserDataJson = CubismModelUserDataJson;
    var $ = __importStar(__webpack_require__(/*! ./cubismmodeluserdatajson */ "../../../Framework/src/model/cubismmodeluserdatajson.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismModelUserDataJson = $.CubismModelUserDataJson;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/model/cubismusermodel.ts":
    /*!*******************************************************!*\
      !*** ../../../Framework/src/model/cubismusermodel.ts ***!
      \*******************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismUserModel = void 0;
    var cubismbreath_1 = __webpack_require__(/*! ../effect/cubismbreath */ "../../../Framework/src/effect/cubismbreath.ts");
    var cubismeyeblink_1 = __webpack_require__(/*! ../effect/cubismeyeblink */ "../../../Framework/src/effect/cubismeyeblink.ts");
    var cubismpose_1 = __webpack_require__(/*! ../effect/cubismpose */ "../../../Framework/src/effect/cubismpose.ts");
    var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    var cubismmodelmatrix_1 = __webpack_require__(/*! ../math/cubismmodelmatrix */ "../../../Framework/src/math/cubismmodelmatrix.ts");
    var cubismtargetpoint_1 = __webpack_require__(/*! ../math/cubismtargetpoint */ "../../../Framework/src/math/cubismtargetpoint.ts");
    var cubismexpressionmotion_1 = __webpack_require__(/*! ../motion/cubismexpressionmotion */ "../../../Framework/src/motion/cubismexpressionmotion.ts");
    var cubismmotion_1 = __webpack_require__(/*! ../motion/cubismmotion */ "../../../Framework/src/motion/cubismmotion.ts");
    var cubismmotionmanager_1 = __webpack_require__(/*! ../motion/cubismmotionmanager */ "../../../Framework/src/motion/cubismmotionmanager.ts");
    var cubismphysics_1 = __webpack_require__(/*! ../physics/cubismphysics */ "../../../Framework/src/physics/cubismphysics.ts");
    var cubismrenderer_webgl_1 = __webpack_require__(/*! ../rendering/cubismrenderer_webgl */ "../../../Framework/src/rendering/cubismrenderer_webgl.ts");
    var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
    var cubismmoc_1 = __webpack_require__(/*! ./cubismmoc */ "../../../Framework/src/model/cubismmoc.ts");
    var cubismmodeluserdata_1 = __webpack_require__(/*! ./cubismmodeluserdata */ "../../../Framework/src/model/cubismmodeluserdata.ts");
    var CubismUserModel = (function () {
        function CubismUserModel() {
            this.loadMotion = function (buffer, size, name, onFinishedMotionHandler) { return cubismmotion_1.CubismMotion.create(buffer, size, onFinishedMotionHandler); };
            this._moc = null;
            this._model = null;
            this._motionManager = null;
            this._expressionManager = null;
            this._eyeBlink = null;
            this._breath = null;
            this._modelMatrix = null;
            this._pose = null;
            this._dragManager = null;
            this._physics = null;
            this._modelUserData = null;
            this._initialized = false;
            this._updating = false;
            this._opacity = 1.0;
            this._lipsync = true;
            this._lastLipSyncValue = 0.0;
            this._dragX = 0.0;
            this._dragY = 0.0;
            this._accelerationX = 0.0;
            this._accelerationY = 0.0;
            this._accelerationZ = 0.0;
            this._debugMode = false;
            this._renderer = null;
            this._motionManager = new cubismmotionmanager_1.CubismMotionManager();
            this._motionManager.setEventCallback(CubismUserModel.cubismDefaultMotionEventCallback, this);
            this._expressionManager = new cubismmotionmanager_1.CubismMotionManager();
            this._dragManager = new cubismtargetpoint_1.CubismTargetPoint();
        }
        CubismUserModel.prototype.isInitialized = function () {
            return this._initialized;
        };
        CubismUserModel.prototype.setInitialized = function (v) {
            this._initialized = v;
        };
        CubismUserModel.prototype.isUpdating = function () {
            return this._updating;
        };
        CubismUserModel.prototype.setUpdating = function (v) {
            this._updating = v;
        };
        CubismUserModel.prototype.setDragging = function (x, y) {
            this._dragManager.set(x, y);
        };
        CubismUserModel.prototype.setAcceleration = function (x, y, z) {
            this._accelerationX = x;
            this._accelerationY = y;
            this._accelerationZ = z;
        };
        CubismUserModel.prototype.getModelMatrix = function () {
            return this._modelMatrix;
        };
        CubismUserModel.prototype.setOpacity = function (a) {
            this._opacity = a;
        };
        CubismUserModel.prototype.getOpacity = function () {
            return this._opacity;
        };
        CubismUserModel.prototype.loadModel = function (buffer) {
            this._moc = cubismmoc_1.CubismMoc.create(buffer);
            this._model = this._moc.createModel();
            this._model.saveParameters();
            if (this._moc == null || this._model == null) {
                (0, cubismdebug_1.CubismLogError)('Failed to CreateModel().');
                return;
            }
            this._modelMatrix = new cubismmodelmatrix_1.CubismModelMatrix(this._model.getCanvasWidth(), this._model.getCanvasHeight());
        };
        CubismUserModel.prototype.loadExpression = function (buffer, size, name) {
            return cubismexpressionmotion_1.CubismExpressionMotion.create(buffer, size);
        };
        CubismUserModel.prototype.loadPose = function (buffer, size) {
            this._pose = cubismpose_1.CubismPose.create(buffer, size);
        };
        CubismUserModel.prototype.loadUserData = function (buffer, size) {
            this._modelUserData = cubismmodeluserdata_1.CubismModelUserData.create(buffer, size);
        };
        CubismUserModel.prototype.loadPhysics = function (buffer, size) {
            this._physics = cubismphysics_1.CubismPhysics.create(buffer, size);
        };
        CubismUserModel.prototype.isHit = function (drawableId, pointX, pointY) {
            var drawIndex = this._model.getDrawableIndex(drawableId);
            if (drawIndex < 0) {
                return false;
            }
            var count = this._model.getDrawableVertexCount(drawIndex);
            var vertices = this._model.getDrawableVertices(drawIndex);
            var left = vertices[0];
            var right = vertices[0];
            var top = vertices[1];
            var bottom = vertices[1];
            for (var j = 1; j < count; ++j) {
                var x = vertices[live2dcubismframework_1.Constant.vertexOffset + j * live2dcubismframework_1.Constant.vertexStep];
                var y = vertices[live2dcubismframework_1.Constant.vertexOffset + j * live2dcubismframework_1.Constant.vertexStep + 1];
                if (x < left) {
                    left = x;
                }
                if (x > right) {
                    right = x;
                }
                if (y < top) {
                    top = y;
                }
                if (y > bottom) {
                    bottom = y;
                }
            }
            var tx = this._modelMatrix.invertTransformX(pointX);
            var ty = this._modelMatrix.invertTransformY(pointY);
            return left <= tx && tx <= right && top <= ty && ty <= bottom;
        };
        CubismUserModel.prototype.getModel = function () {
            return this._model;
        };
        CubismUserModel.prototype.getRenderer = function () {
            return this._renderer;
        };
        CubismUserModel.prototype.createRenderer = function () {
            if (this._renderer) {
                this.deleteRenderer();
            }
            this._renderer = new cubismrenderer_webgl_1.CubismRenderer_WebGL();
            this._renderer.initialize(this._model);
        };
        CubismUserModel.prototype.deleteRenderer = function () {
            if (this._renderer != null) {
                this._renderer.release();
                this._renderer = null;
            }
        };
        CubismUserModel.prototype.motionEventFired = function (eventValue) {
            (0, cubismdebug_1.CubismLogInfo)('{0}', eventValue.s);
        };
        CubismUserModel.cubismDefaultMotionEventCallback = function (caller, eventValue, customData) {
            var model = customData;
            if (model != null) {
                model.motionEventFired(eventValue);
            }
        };
        CubismUserModel.prototype.release = function () {
            if (this._motionManager != null) {
                this._motionManager.release();
                this._motionManager = null;
            }
            if (this._expressionManager != null) {
                this._expressionManager.release();
                this._expressionManager = null;
            }
            if (this._moc != null) {
                this._moc.deleteModel(this._model);
                this._moc.release();
                this._moc = null;
            }
            this._modelMatrix = null;
            cubismpose_1.CubismPose.delete(this._pose);
            cubismeyeblink_1.CubismEyeBlink.delete(this._eyeBlink);
            cubismbreath_1.CubismBreath.delete(this._breath);
            this._dragManager = null;
            cubismphysics_1.CubismPhysics.delete(this._physics);
            cubismmodeluserdata_1.CubismModelUserData.delete(this._modelUserData);
            this.deleteRenderer();
        };
        return CubismUserModel;
    }());
    exports.CubismUserModel = CubismUserModel;
    var $ = __importStar(__webpack_require__(/*! ./cubismusermodel */ "../../../Framework/src/model/cubismusermodel.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismUserModel = $.CubismUserModel;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/motion/acubismmotion.ts":
    /*!******************************************************!*\
      !*** ../../../Framework/src/motion/acubismmotion.ts ***!
      \******************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.ACubismMotion = void 0;
    var cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ "../../../Framework/src/math/cubismmath.ts");
    var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
    var ACubismMotion = (function () {
        function ACubismMotion() {
            var _this = this;
            this.setFinishedMotionHandler = function (onFinishedMotionHandler) { return (_this._onFinishedMotion = onFinishedMotionHandler); };
            this.getFinishedMotionHandler = function () { return _this._onFinishedMotion; };
            this._fadeInSeconds = -1.0;
            this._fadeOutSeconds = -1.0;
            this._weight = 1.0;
            this._offsetSeconds = 0.0;
            this._firedEventValues = new csmvector_1.csmVector();
        }
        ACubismMotion.delete = function (motion) {
            motion.release();
            motion = null;
        };
        ACubismMotion.prototype.release = function () {
            this._weight = 0.0;
        };
        ACubismMotion.prototype.updateParameters = function (model, motionQueueEntry, userTimeSeconds) {
            if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {
                return;
            }
            if (!motionQueueEntry.isStarted()) {
                motionQueueEntry.setIsStarted(true);
                motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds);
                motionQueueEntry.setFadeInStartTime(userTimeSeconds);
                var duration = this.getDuration();
                if (motionQueueEntry.getEndTime() < 0) {
                    motionQueueEntry.setEndTime(duration <= 0 ? -1 : motionQueueEntry.getStartTime() + duration);
                }
            }
            var fadeWeight = this._weight;
            var fadeIn = this._fadeInSeconds == 0.0
                ? 1.0
                : cubismmath_1.CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /
                    this._fadeInSeconds);
            var fadeOut = this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0
                ? 1.0
                : cubismmath_1.CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /
                    this._fadeOutSeconds);
            fadeWeight = fadeWeight * fadeIn * fadeOut;
            motionQueueEntry.setState(userTimeSeconds, fadeWeight);
            (0, cubismdebug_1.CSM_ASSERT)(0.0 <= fadeWeight && fadeWeight <= 1.0);
            this.doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry);
            if (motionQueueEntry.getEndTime() > 0 &&
                motionQueueEntry.getEndTime() < userTimeSeconds) {
                motionQueueEntry.setIsFinished(true);
            }
        };
        ACubismMotion.prototype.setFadeInTime = function (fadeInSeconds) {
            this._fadeInSeconds = fadeInSeconds;
        };
        ACubismMotion.prototype.setFadeOutTime = function (fadeOutSeconds) {
            this._fadeOutSeconds = fadeOutSeconds;
        };
        ACubismMotion.prototype.getFadeOutTime = function () {
            return this._fadeOutSeconds;
        };
        ACubismMotion.prototype.getFadeInTime = function () {
            return this._fadeInSeconds;
        };
        ACubismMotion.prototype.setWeight = function (weight) {
            this._weight = weight;
        };
        ACubismMotion.prototype.getWeight = function () {
            return this._weight;
        };
        ACubismMotion.prototype.getDuration = function () {
            return -1.0;
        };
        ACubismMotion.prototype.getLoopDuration = function () {
            return -1.0;
        };
        ACubismMotion.prototype.setOffsetTime = function (offsetSeconds) {
            this._offsetSeconds = offsetSeconds;
        };
        ACubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {
            return this._firedEventValues;
        };
        return ACubismMotion;
    }());
    exports.ACubismMotion = ACubismMotion;
    var $ = __importStar(__webpack_require__(/*! ./acubismmotion */ "../../../Framework/src/motion/acubismmotion.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.ACubismMotion = $.ACubismMotion;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/motion/cubismexpressionmotion.ts":
    /*!***************************************************************!*\
      !*** ../../../Framework/src/motion/cubismexpressionmotion.ts ***!
      \***************************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.ExpressionParameter = exports.ExpressionBlendType = exports.CubismExpressionMotion = void 0;
    var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "../../../Framework/src/utils/cubismjson.ts");
    var acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ "../../../Framework/src/motion/acubismmotion.ts");
    var ExpressionKeyFadeIn = 'FadeInTime';
    var ExpressionKeyFadeOut = 'FadeOutTime';
    var ExpressionKeyParameters = 'Parameters';
    var ExpressionKeyId = 'Id';
    var ExpressionKeyValue = 'Value';
    var ExpressionKeyBlend = 'Blend';
    var BlendValueAdd = 'Add';
    var BlendValueMultiply = 'Multiply';
    var BlendValueOverwrite = 'Overwrite';
    var DefaultFadeTime = 1.0;
    var CubismExpressionMotion = (function (_super) {
        __extends(CubismExpressionMotion, _super);
        function CubismExpressionMotion() {
            var _this = _super.call(this) || this;
            _this._parameters = new csmvector_1.csmVector();
            return _this;
        }
        CubismExpressionMotion.create = function (buffer, size) {
            var expression = new CubismExpressionMotion();
            var json = cubismjson_1.CubismJson.create(buffer, size);
            var root = json.getRoot();
            expression.setFadeInTime(root.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime));
            expression.setFadeOutTime(root.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime));
            var parameterCount = root
                .getValueByString(ExpressionKeyParameters)
                .getSize();
            expression._parameters.prepareCapacity(parameterCount);
            for (var i = 0; i < parameterCount; ++i) {
                var param = root
                    .getValueByString(ExpressionKeyParameters)
                    .getValueByIndex(i);
                var parameterId = live2dcubismframework_1.CubismFramework.getIdManager().getId(param.getValueByString(ExpressionKeyId).getRawString());
                var value = param
                    .getValueByString(ExpressionKeyValue)
                    .toFloat();
                var blendType = void 0;
                if (param.getValueByString(ExpressionKeyBlend).isNull() ||
                    param.getValueByString(ExpressionKeyBlend).getString() == BlendValueAdd) {
                    blendType = ExpressionBlendType.ExpressionBlendType_Add;
                }
                else if (param.getValueByString(ExpressionKeyBlend).getString() ==
                    BlendValueMultiply) {
                    blendType = ExpressionBlendType.ExpressionBlendType_Multiply;
                }
                else if (param.getValueByString(ExpressionKeyBlend).getString() ==
                    BlendValueOverwrite) {
                    blendType = ExpressionBlendType.ExpressionBlendType_Overwrite;
                }
                else {
                    blendType = ExpressionBlendType.ExpressionBlendType_Add;
                }
                var item = new ExpressionParameter();
                item.parameterId = parameterId;
                item.blendType = blendType;
                item.value = value;
                expression._parameters.pushBack(item);
            }
            cubismjson_1.CubismJson.delete(json);
            return expression;
        };
        CubismExpressionMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, weight, motionQueueEntry) {
            for (var i = 0; i < this._parameters.getSize(); ++i) {
                var parameter = this._parameters.at(i);
                switch (parameter.blendType) {
                    case ExpressionBlendType.ExpressionBlendType_Add: {
                        model.addParameterValueById(parameter.parameterId, parameter.value, weight);
                        break;
                    }
                    case ExpressionBlendType.ExpressionBlendType_Multiply: {
                        model.multiplyParameterValueById(parameter.parameterId, parameter.value, weight);
                        break;
                    }
                    case ExpressionBlendType.ExpressionBlendType_Overwrite: {
                        model.setParameterValueById(parameter.parameterId, parameter.value, weight);
                        break;
                    }
                    default:
                        break;
                }
            }
        };
        return CubismExpressionMotion;
    }(acubismmotion_1.ACubismMotion));
    exports.CubismExpressionMotion = CubismExpressionMotion;
    var ExpressionBlendType;
    (function (ExpressionBlendType) {
        ExpressionBlendType[ExpressionBlendType["ExpressionBlendType_Add"] = 0] = "ExpressionBlendType_Add";
        ExpressionBlendType[ExpressionBlendType["ExpressionBlendType_Multiply"] = 1] = "ExpressionBlendType_Multiply";
        ExpressionBlendType[ExpressionBlendType["ExpressionBlendType_Overwrite"] = 2] = "ExpressionBlendType_Overwrite";
    })(ExpressionBlendType = exports.ExpressionBlendType || (exports.ExpressionBlendType = {}));
    var ExpressionParameter = (function () {
        function ExpressionParameter() {
        }
        return ExpressionParameter;
    }());
    exports.ExpressionParameter = ExpressionParameter;
    var $ = __importStar(__webpack_require__(/*! ./cubismexpressionmotion */ "../../../Framework/src/motion/cubismexpressionmotion.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismExpressionMotion = $.CubismExpressionMotion;
        Live2DCubismFramework.ExpressionBlendType = $.ExpressionBlendType;
        Live2DCubismFramework.ExpressionParameter = $.ExpressionParameter;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/motion/cubismmotion.ts":
    /*!*****************************************************!*\
      !*** ../../../Framework/src/motion/cubismmotion.ts ***!
      \*****************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismMotion = void 0;
    var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    var cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ "../../../Framework/src/math/cubismmath.ts");
    var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "../../../Framework/src/type/csmstring.ts");
    var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
    var acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ "../../../Framework/src/motion/acubismmotion.ts");
    var cubismmotioninternal_1 = __webpack_require__(/*! ./cubismmotioninternal */ "../../../Framework/src/motion/cubismmotioninternal.ts");
    var cubismmotionjson_1 = __webpack_require__(/*! ./cubismmotionjson */ "../../../Framework/src/motion/cubismmotionjson.ts");
    var EffectNameEyeBlink = 'EyeBlink';
    var EffectNameLipSync = 'LipSync';
    var TargetNameModel = 'Model';
    var TargetNameParameter = 'Parameter';
    var TargetNamePartOpacity = 'PartOpacity';
    var UseOldBeziersCurveMotion = false;
    function lerpPoints(a, b, t) {
        var result = new cubismmotioninternal_1.CubismMotionPoint();
        result.time = a.time + (b.time - a.time) * t;
        result.value = a.value + (b.value - a.value) * t;
        return result;
    }
    function linearEvaluate(points, time) {
        var t = (time - points[0].time) / (points[1].time - points[0].time);
        if (t < 0.0) {
            t = 0.0;
        }
        return points[0].value + (points[1].value - points[0].value) * t;
    }
    function bezierEvaluate(points, time) {
        var t = (time - points[0].time) / (points[3].time - points[0].time);
        if (t < 0.0) {
            t = 0.0;
        }
        var p01 = lerpPoints(points[0], points[1], t);
        var p12 = lerpPoints(points[1], points[2], t);
        var p23 = lerpPoints(points[2], points[3], t);
        var p012 = lerpPoints(p01, p12, t);
        var p123 = lerpPoints(p12, p23, t);
        return lerpPoints(p012, p123, t).value;
    }
    function bezierEvaluateBinarySearch(points, time) {
        var x_error = 0.01;
        var x = time;
        var x1 = points[0].time;
        var x2 = points[3].time;
        var cx1 = points[1].time;
        var cx2 = points[2].time;
        var ta = 0.0;
        var tb = 1.0;
        var t = 0.0;
        var i = 0;
        for (var var33 = true; i < 20; ++i) {
            if (x < x1 + x_error) {
                t = ta;
                break;
            }
            if (x2 - x_error < x) {
                t = tb;
                break;
            }
            var centerx = (cx1 + cx2) * 0.5;
            cx1 = (x1 + cx1) * 0.5;
            cx2 = (x2 + cx2) * 0.5;
            var ctrlx12 = (cx1 + centerx) * 0.5;
            var ctrlx21 = (cx2 + centerx) * 0.5;
            centerx = (ctrlx12 + ctrlx21) * 0.5;
            if (x < centerx) {
                tb = (ta + tb) * 0.5;
                if (centerx - x_error < x) {
                    t = tb;
                    break;
                }
                x2 = centerx;
                cx2 = ctrlx12;
            }
            else {
                ta = (ta + tb) * 0.5;
                if (x < centerx + x_error) {
                    t = ta;
                    break;
                }
                x1 = centerx;
                cx1 = ctrlx21;
            }
        }
        if (i == 20) {
            t = (ta + tb) * 0.5;
        }
        if (t < 0.0) {
            t = 0.0;
        }
        if (t > 1.0) {
            t = 1.0;
        }
        var p01 = lerpPoints(points[0], points[1], t);
        var p12 = lerpPoints(points[1], points[2], t);
        var p23 = lerpPoints(points[2], points[3], t);
        var p012 = lerpPoints(p01, p12, t);
        var p123 = lerpPoints(p12, p23, t);
        return lerpPoints(p012, p123, t).value;
    }
    function bezierEvaluateCardanoInterpretation(points, time) {
        var x = time;
        var x1 = points[0].time;
        var x2 = points[3].time;
        var cx1 = points[1].time;
        var cx2 = points[2].time;
        var a = x2 - 3.0 * cx2 + 3.0 * cx1 - x1;
        var b = 3.0 * cx2 - 6.0 * cx1 + 3.0 * x1;
        var c = 3.0 * cx1 - 3.0 * x1;
        var d = x1 - x;
        var t = cubismmath_1.CubismMath.cardanoAlgorithmForBezier(a, b, c, d);
        var p01 = lerpPoints(points[0], points[1], t);
        var p12 = lerpPoints(points[1], points[2], t);
        var p23 = lerpPoints(points[2], points[3], t);
        var p012 = lerpPoints(p01, p12, t);
        var p123 = lerpPoints(p12, p23, t);
        return lerpPoints(p012, p123, t).value;
    }
    function steppedEvaluate(points, time) {
        return points[0].value;
    }
    function inverseSteppedEvaluate(points, time) {
        return points[1].value;
    }
    function evaluateCurve(motionData, index, time) {
        var curve = motionData.curves.at(index);
        var target = -1;
        var totalSegmentCount = curve.baseSegmentIndex + curve.segmentCount;
        var pointPosition = 0;
        for (var i = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {
            pointPosition =
                motionData.segments.at(i).basePointIndex +
                    (motionData.segments.at(i).segmentType ==
                        cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Bezier
                        ? 3
                        : 1);
            if (motionData.points.at(pointPosition).time > time) {
                target = i;
                break;
            }
        }
        if (target == -1) {
            return motionData.points.at(pointPosition).value;
        }
        var segment = motionData.segments.at(target);
        return segment.evaluate(motionData.points.get(segment.basePointIndex), time);
    }
    var CubismMotion = (function (_super) {
        __extends(CubismMotion, _super);
        function CubismMotion() {
            var _this = _super.call(this) || this;
            _this._sourceFrameRate = 30.0;
            _this._loopDurationSeconds = -1.0;
            _this._isLoop = false;
            _this._isLoopFadeIn = true;
            _this._lastWeight = 0.0;
            _this._motionData = null;
            _this._modelCurveIdEyeBlink = null;
            _this._modelCurveIdLipSync = null;
            _this._eyeBlinkParameterIds = null;
            _this._lipSyncParameterIds = null;
            return _this;
        }
        CubismMotion.create = function (buffer, size, onFinishedMotionHandler) {
            var ret = new CubismMotion();
            ret.parse(buffer, size);
            ret._sourceFrameRate = ret._motionData.fps;
            ret._loopDurationSeconds = ret._motionData.duration;
            ret._onFinishedMotion = onFinishedMotionHandler;
            return ret;
        };
        CubismMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, fadeWeight, motionQueueEntry) {
            if (this._modelCurveIdEyeBlink == null) {
                this._modelCurveIdEyeBlink = live2dcubismframework_1.CubismFramework.getIdManager().getId(EffectNameEyeBlink);
            }
            if (this._modelCurveIdLipSync == null) {
                this._modelCurveIdLipSync = live2dcubismframework_1.CubismFramework.getIdManager().getId(EffectNameLipSync);
            }
            var timeOffsetSeconds = userTimeSeconds - motionQueueEntry.getStartTime();
            if (timeOffsetSeconds < 0.0) {
                timeOffsetSeconds = 0.0;
            }
            var lipSyncValue = Number.MAX_VALUE;
            var eyeBlinkValue = Number.MAX_VALUE;
            var MaxTargetSize = 64;
            var lipSyncFlags = 0;
            var eyeBlinkFlags = 0;
            if (this._eyeBlinkParameterIds.getSize() > MaxTargetSize) {
                (0, cubismdebug_1.CubismLogDebug)('too many eye blink targets : {0}', this._eyeBlinkParameterIds.getSize());
            }
            if (this._lipSyncParameterIds.getSize() > MaxTargetSize) {
                (0, cubismdebug_1.CubismLogDebug)('too many lip sync targets : {0}', this._lipSyncParameterIds.getSize());
            }
            var tmpFadeIn = this._fadeInSeconds <= 0.0
                ? 1.0
                : cubismmath_1.CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /
                    this._fadeInSeconds);
            var tmpFadeOut = this._fadeOutSeconds <= 0.0 || motionQueueEntry.getEndTime() < 0.0
                ? 1.0
                : cubismmath_1.CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /
                    this._fadeOutSeconds);
            var value;
            var c, parameterIndex;
            var time = timeOffsetSeconds;
            if (this._isLoop) {
                while (time > this._motionData.duration) {
                    time -= this._motionData.duration;
                }
            }
            var curves = this._motionData.curves;
            for (c = 0; c < this._motionData.curveCount &&
                curves.at(c).type ==
                    cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Model; ++c) {
                value = evaluateCurve(this._motionData, c, time);
                if (curves.at(c).id == this._modelCurveIdEyeBlink) {
                    eyeBlinkValue = value;
                }
                else if (curves.at(c).id == this._modelCurveIdLipSync) {
                    lipSyncValue = value;
                }
            }
            var parameterMotionCurveCount = 0;
            for (; c < this._motionData.curveCount &&
                curves.at(c).type ==
                    cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter; ++c) {
                parameterMotionCurveCount++;
                parameterIndex = model.getParameterIndex(curves.at(c).id);
                if (parameterIndex == -1) {
                    continue;
                }
                var sourceValue = model.getParameterValueByIndex(parameterIndex);
                value = evaluateCurve(this._motionData, c, time);
                if (eyeBlinkValue != Number.MAX_VALUE) {
                    for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {
                        if (this._eyeBlinkParameterIds.at(i) == curves.at(c).id) {
                            value *= eyeBlinkValue;
                            eyeBlinkFlags |= 1 << i;
                            break;
                        }
                    }
                }
                if (lipSyncValue != Number.MAX_VALUE) {
                    for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {
                        if (this._lipSyncParameterIds.at(i) == curves.at(c).id) {
                            value += lipSyncValue;
                            lipSyncFlags |= 1 << i;
                            break;
                        }
                    }
                }
                var v = void 0;
                if (curves.at(c).fadeInTime < 0.0 && curves.at(c).fadeOutTime < 0.0) {
                    v = sourceValue + (value - sourceValue) * fadeWeight;
                }
                else {
                    var fin = void 0;
                    var fout = void 0;
                    if (curves.at(c).fadeInTime < 0.0) {
                        fin = tmpFadeIn;
                    }
                    else {
                        fin =
                            curves.at(c).fadeInTime == 0.0
                                ? 1.0
                                : cubismmath_1.CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /
                                    curves.at(c).fadeInTime);
                    }
                    if (curves.at(c).fadeOutTime < 0.0) {
                        fout = tmpFadeOut;
                    }
                    else {
                        fout =
                            curves.at(c).fadeOutTime == 0.0 ||
                                motionQueueEntry.getEndTime() < 0.0
                                ? 1.0
                                : cubismmath_1.CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /
                                    curves.at(c).fadeOutTime);
                    }
                    var paramWeight = this._weight * fin * fout;
                    v = sourceValue + (value - sourceValue) * paramWeight;
                }
                model.setParameterValueByIndex(parameterIndex, v, 1.0);
            }
            {
                if (eyeBlinkValue != Number.MAX_VALUE) {
                    for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {
                        var sourceValue = model.getParameterValueById(this._eyeBlinkParameterIds.at(i));
                        if ((eyeBlinkFlags >> i) & 0x01) {
                            continue;
                        }
                        var v = sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;
                        model.setParameterValueById(this._eyeBlinkParameterIds.at(i), v);
                    }
                }
                if (lipSyncValue != Number.MAX_VALUE) {
                    for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {
                        var sourceValue = model.getParameterValueById(this._lipSyncParameterIds.at(i));
                        if ((lipSyncFlags >> i) & 0x01) {
                            continue;
                        }
                        var v = sourceValue + (lipSyncValue - sourceValue) * fadeWeight;
                        model.setParameterValueById(this._lipSyncParameterIds.at(i), v);
                    }
                }
            }
            for (; c < this._motionData.curveCount &&
                curves.at(c).type ==
                    cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity; ++c) {
                parameterIndex = model.getParameterIndex(curves.at(c).id);
                if (parameterIndex == -1) {
                    continue;
                }
                value = evaluateCurve(this._motionData, c, time);
                model.setParameterValueByIndex(parameterIndex, value);
            }
            if (timeOffsetSeconds >= this._motionData.duration) {
                if (this._isLoop) {
                    motionQueueEntry.setStartTime(userTimeSeconds);
                    if (this._isLoopFadeIn) {
                        motionQueueEntry.setFadeInStartTime(userTimeSeconds);
                    }
                }
                else {
                    if (this._onFinishedMotion) {
                        this._onFinishedMotion(this);
                    }
                    motionQueueEntry.setIsFinished(true);
                }
            }
            this._lastWeight = fadeWeight;
        };
        CubismMotion.prototype.setIsLoop = function (loop) {
            this._isLoop = loop;
        };
        CubismMotion.prototype.isLoop = function () {
            return this._isLoop;
        };
        CubismMotion.prototype.setIsLoopFadeIn = function (loopFadeIn) {
            this._isLoopFadeIn = loopFadeIn;
        };
        CubismMotion.prototype.isLoopFadeIn = function () {
            return this._isLoopFadeIn;
        };
        CubismMotion.prototype.getDuration = function () {
            return this._isLoop ? -1.0 : this._loopDurationSeconds;
        };
        CubismMotion.prototype.getLoopDuration = function () {
            return this._loopDurationSeconds;
        };
        CubismMotion.prototype.setParameterFadeInTime = function (parameterId, value) {
            var curves = this._motionData.curves;
            for (var i = 0; i < this._motionData.curveCount; ++i) {
                if (parameterId == curves.at(i).id) {
                    curves.at(i).fadeInTime = value;
                    return;
                }
            }
        };
        CubismMotion.prototype.setParameterFadeOutTime = function (parameterId, value) {
            var curves = this._motionData.curves;
            for (var i = 0; i < this._motionData.curveCount; ++i) {
                if (parameterId == curves.at(i).id) {
                    curves.at(i).fadeOutTime = value;
                    return;
                }
            }
        };
        CubismMotion.prototype.getParameterFadeInTime = function (parameterId) {
            var curves = this._motionData.curves;
            for (var i = 0; i < this._motionData.curveCount; ++i) {
                if (parameterId == curves.at(i).id) {
                    return curves.at(i).fadeInTime;
                }
            }
            return -1;
        };
        CubismMotion.prototype.getParameterFadeOutTime = function (parameterId) {
            var curves = this._motionData.curves;
            for (var i = 0; i < this._motionData.curveCount; ++i) {
                if (parameterId == curves.at(i).id) {
                    return curves.at(i).fadeOutTime;
                }
            }
            return -1;
        };
        CubismMotion.prototype.setEffectIds = function (eyeBlinkParameterIds, lipSyncParameterIds) {
            this._eyeBlinkParameterIds = eyeBlinkParameterIds;
            this._lipSyncParameterIds = lipSyncParameterIds;
        };
        CubismMotion.prototype.release = function () {
            this._motionData = void 0;
            this._motionData = null;
        };
        CubismMotion.prototype.parse = function (motionJson, size) {
            this._motionData = new cubismmotioninternal_1.CubismMotionData();
            var json = new cubismmotionjson_1.CubismMotionJson(motionJson, size);
            this._motionData.duration = json.getMotionDuration();
            this._motionData.loop = json.isMotionLoop();
            this._motionData.curveCount = json.getMotionCurveCount();
            this._motionData.fps = json.getMotionFps();
            this._motionData.eventCount = json.getEventCount();
            var areBeziersRestructed = json.getEvaluationOptionFlag(cubismmotionjson_1.EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted);
            if (json.isExistMotionFadeInTime()) {
                this._fadeInSeconds =
                    json.getMotionFadeInTime() < 0.0 ? 1.0 : json.getMotionFadeInTime();
            }
            else {
                this._fadeInSeconds = 1.0;
            }
            if (json.isExistMotionFadeOutTime()) {
                this._fadeOutSeconds =
                    json.getMotionFadeOutTime() < 0.0 ? 1.0 : json.getMotionFadeOutTime();
            }
            else {
                this._fadeOutSeconds = 1.0;
            }
            this._motionData.curves.updateSize(this._motionData.curveCount, cubismmotioninternal_1.CubismMotionCurve, true);
            this._motionData.segments.updateSize(json.getMotionTotalSegmentCount(), cubismmotioninternal_1.CubismMotionSegment, true);
            this._motionData.points.updateSize(json.getMotionTotalPointCount(), cubismmotioninternal_1.CubismMotionPoint, true);
            this._motionData.events.updateSize(this._motionData.eventCount, cubismmotioninternal_1.CubismMotionEvent, true);
            var totalPointCount = 0;
            var totalSegmentCount = 0;
            for (var curveCount = 0; curveCount < this._motionData.curveCount; ++curveCount) {
                if (json.getMotionCurveTarget(curveCount) == TargetNameModel) {
                    this._motionData.curves.at(curveCount).type =
                        cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Model;
                }
                else if (json.getMotionCurveTarget(curveCount) == TargetNameParameter) {
                    this._motionData.curves.at(curveCount).type =
                        cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;
                }
                else if (json.getMotionCurveTarget(curveCount) == TargetNamePartOpacity) {
                    this._motionData.curves.at(curveCount).type =
                        cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;
                }
                else {
                    (0, cubismdebug_1.CubismLogWarning)('Warning : Unable to get segment type from Curve! The number of "CurveCount" may be incorrect!');
                }
                this._motionData.curves.at(curveCount).id = json.getMotionCurveId(curveCount);
                this._motionData.curves.at(curveCount).baseSegmentIndex = totalSegmentCount;
                this._motionData.curves.at(curveCount).fadeInTime = json.isExistMotionCurveFadeInTime(curveCount)
                    ? json.getMotionCurveFadeInTime(curveCount)
                    : -1.0;
                this._motionData.curves.at(curveCount).fadeOutTime = json.isExistMotionCurveFadeOutTime(curveCount)
                    ? json.getMotionCurveFadeOutTime(curveCount)
                    : -1.0;
                for (var segmentPosition = 0; segmentPosition < json.getMotionCurveSegmentCount(curveCount);) {
                    if (segmentPosition == 0) {
                        this._motionData.segments.at(totalSegmentCount).basePointIndex = totalPointCount;
                        this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition);
                        this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                        totalPointCount += 1;
                        segmentPosition += 2;
                    }
                    else {
                        this._motionData.segments.at(totalSegmentCount).basePointIndex =
                            totalPointCount - 1;
                    }
                    var segment = json.getMotionCurveSegment(curveCount, segmentPosition);
                    switch (segment) {
                        case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Linear: {
                            this._motionData.segments.at(totalSegmentCount).segmentType =
                                cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Linear;
                            this._motionData.segments.at(totalSegmentCount).evaluate = linearEvaluate;
                            this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                            this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                            totalPointCount += 1;
                            segmentPosition += 3;
                            break;
                        }
                        case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Bezier: {
                            this._motionData.segments.at(totalSegmentCount).segmentType =
                                cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Bezier;
                            if (areBeziersRestructed || UseOldBeziersCurveMotion) {
                                this._motionData.segments.at(totalSegmentCount).evaluate = bezierEvaluate;
                            }
                            else {
                                this._motionData.segments.at(totalSegmentCount).evaluate = bezierEvaluateCardanoInterpretation;
                            }
                            this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                            this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                            this._motionData.points.at(totalPointCount + 1).time = json.getMotionCurveSegment(curveCount, segmentPosition + 3);
                            this._motionData.points.at(totalPointCount + 1).value = json.getMotionCurveSegment(curveCount, segmentPosition + 4);
                            this._motionData.points.at(totalPointCount + 2).time = json.getMotionCurveSegment(curveCount, segmentPosition + 5);
                            this._motionData.points.at(totalPointCount + 2).value = json.getMotionCurveSegment(curveCount, segmentPosition + 6);
                            totalPointCount += 3;
                            segmentPosition += 7;
                            break;
                        }
                        case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Stepped: {
                            this._motionData.segments.at(totalSegmentCount).segmentType =
                                cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Stepped;
                            this._motionData.segments.at(totalSegmentCount).evaluate = steppedEvaluate;
                            this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                            this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                            totalPointCount += 1;
                            segmentPosition += 3;
                            break;
                        }
                        case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped: {
                            this._motionData.segments.at(totalSegmentCount).segmentType =
                                cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;
                            this._motionData.segments.at(totalSegmentCount).evaluate = inverseSteppedEvaluate;
                            this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                            this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                            totalPointCount += 1;
                            segmentPosition += 3;
                            break;
                        }
                        default: {
                            (0, cubismdebug_1.CSM_ASSERT)(0);
                            break;
                        }
                    }
                    ++this._motionData.curves.at(curveCount).segmentCount;
                    ++totalSegmentCount;
                }
            }
            for (var userdatacount = 0; userdatacount < json.getEventCount(); ++userdatacount) {
                this._motionData.events.at(userdatacount).fireTime = json.getEventTime(userdatacount);
                this._motionData.events.at(userdatacount).value = json.getEventValue(userdatacount);
            }
            json.release();
            json = void 0;
            json = null;
        };
        CubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {
            this._firedEventValues.updateSize(0);
            for (var u = 0; u < this._motionData.eventCount; ++u) {
                if (this._motionData.events.at(u).fireTime > beforeCheckTimeSeconds &&
                    this._motionData.events.at(u).fireTime <= motionTimeSeconds) {
                    this._firedEventValues.pushBack(new csmstring_1.csmString(this._motionData.events.at(u).value.s));
                }
            }
            return this._firedEventValues;
        };
        return CubismMotion;
    }(acubismmotion_1.ACubismMotion));
    exports.CubismMotion = CubismMotion;
    var $ = __importStar(__webpack_require__(/*! ./cubismmotion */ "../../../Framework/src/motion/cubismmotion.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismMotion = $.CubismMotion;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/motion/cubismmotioninternal.ts":
    /*!*************************************************************!*\
      !*** ../../../Framework/src/motion/cubismmotioninternal.ts ***!
      \*************************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismMotionData = exports.CubismMotionEvent = exports.CubismMotionCurve = exports.CubismMotionSegment = exports.CubismMotionPoint = exports.CubismMotionSegmentType = exports.CubismMotionCurveTarget = void 0;
    var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var CubismMotionCurveTarget;
    (function (CubismMotionCurveTarget) {
        CubismMotionCurveTarget[CubismMotionCurveTarget["CubismMotionCurveTarget_Model"] = 0] = "CubismMotionCurveTarget_Model";
        CubismMotionCurveTarget[CubismMotionCurveTarget["CubismMotionCurveTarget_Parameter"] = 1] = "CubismMotionCurveTarget_Parameter";
        CubismMotionCurveTarget[CubismMotionCurveTarget["CubismMotionCurveTarget_PartOpacity"] = 2] = "CubismMotionCurveTarget_PartOpacity";
    })(CubismMotionCurveTarget = exports.CubismMotionCurveTarget || (exports.CubismMotionCurveTarget = {}));
    var CubismMotionSegmentType;
    (function (CubismMotionSegmentType) {
        CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_Linear"] = 0] = "CubismMotionSegmentType_Linear";
        CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_Bezier"] = 1] = "CubismMotionSegmentType_Bezier";
        CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_Stepped"] = 2] = "CubismMotionSegmentType_Stepped";
        CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_InverseStepped"] = 3] = "CubismMotionSegmentType_InverseStepped";
    })(CubismMotionSegmentType = exports.CubismMotionSegmentType || (exports.CubismMotionSegmentType = {}));
    var CubismMotionPoint = (function () {
        function CubismMotionPoint() {
            this.time = 0.0;
            this.value = 0.0;
        }
        return CubismMotionPoint;
    }());
    exports.CubismMotionPoint = CubismMotionPoint;
    var CubismMotionSegment = (function () {
        function CubismMotionSegment() {
            this.evaluate = null;
            this.basePointIndex = 0;
            this.segmentType = 0;
        }
        return CubismMotionSegment;
    }());
    exports.CubismMotionSegment = CubismMotionSegment;
    var CubismMotionCurve = (function () {
        function CubismMotionCurve() {
            this.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;
            this.segmentCount = 0;
            this.baseSegmentIndex = 0;
            this.fadeInTime = 0.0;
            this.fadeOutTime = 0.0;
        }
        return CubismMotionCurve;
    }());
    exports.CubismMotionCurve = CubismMotionCurve;
    var CubismMotionEvent = (function () {
        function CubismMotionEvent() {
            this.fireTime = 0.0;
        }
        return CubismMotionEvent;
    }());
    exports.CubismMotionEvent = CubismMotionEvent;
    var CubismMotionData = (function () {
        function CubismMotionData() {
            this.duration = 0.0;
            this.loop = false;
            this.curveCount = 0;
            this.eventCount = 0;
            this.fps = 0.0;
            this.curves = new csmvector_1.csmVector();
            this.segments = new csmvector_1.csmVector();
            this.points = new csmvector_1.csmVector();
            this.events = new csmvector_1.csmVector();
        }
        return CubismMotionData;
    }());
    exports.CubismMotionData = CubismMotionData;
    var $ = __importStar(__webpack_require__(/*! ./cubismmotioninternal */ "../../../Framework/src/motion/cubismmotioninternal.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismMotionCurve = $.CubismMotionCurve;
        Live2DCubismFramework.CubismMotionCurveTarget = $.CubismMotionCurveTarget;
        Live2DCubismFramework.CubismMotionData = $.CubismMotionData;
        Live2DCubismFramework.CubismMotionEvent = $.CubismMotionEvent;
        Live2DCubismFramework.CubismMotionPoint = $.CubismMotionPoint;
        Live2DCubismFramework.CubismMotionSegment = $.CubismMotionSegment;
        Live2DCubismFramework.CubismMotionSegmentType = $.CubismMotionSegmentType;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/motion/cubismmotionjson.ts":
    /*!*********************************************************!*\
      !*** ../../../Framework/src/motion/cubismmotionjson.ts ***!
      \*********************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.EvaluationOptionFlag = exports.CubismMotionJson = void 0;
    var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "../../../Framework/src/type/csmstring.ts");
    var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "../../../Framework/src/utils/cubismjson.ts");
    var Meta = 'Meta';
    var Duration = 'Duration';
    var Loop = 'Loop';
    var AreBeziersRestricted = 'AreBeziersRestricted';
    var CurveCount = 'CurveCount';
    var Fps = 'Fps';
    var TotalSegmentCount = 'TotalSegmentCount';
    var TotalPointCount = 'TotalPointCount';
    var Curves = 'Curves';
    var Target = 'Target';
    var Id = 'Id';
    var FadeInTime = 'FadeInTime';
    var FadeOutTime = 'FadeOutTime';
    var Segments = 'Segments';
    var UserData = 'UserData';
    var UserDataCount = 'UserDataCount';
    var TotalUserDataSize = 'TotalUserDataSize';
    var Time = 'Time';
    var Value = 'Value';
    var CubismMotionJson = (function () {
        function CubismMotionJson(buffer, size) {
            this._json = cubismjson_1.CubismJson.create(buffer, size);
        }
        CubismMotionJson.prototype.release = function () {
            cubismjson_1.CubismJson.delete(this._json);
        };
        CubismMotionJson.prototype.getMotionDuration = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(Duration)
                .toFloat();
        };
        CubismMotionJson.prototype.isMotionLoop = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(Loop)
                .toBoolean();
        };
        CubismMotionJson.prototype.getEvaluationOptionFlag = function (flagType) {
            if (EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted == flagType) {
                return this._json
                    .getRoot()
                    .getValueByString(Meta)
                    .getValueByString(AreBeziersRestricted)
                    .toBoolean();
            }
            return false;
        };
        CubismMotionJson.prototype.getMotionCurveCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(CurveCount)
                .toInt();
        };
        CubismMotionJson.prototype.getMotionFps = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(Fps)
                .toFloat();
        };
        CubismMotionJson.prototype.getMotionTotalSegmentCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(TotalSegmentCount)
                .toInt();
        };
        CubismMotionJson.prototype.getMotionTotalPointCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(TotalPointCount)
                .toInt();
        };
        CubismMotionJson.prototype.isExistMotionFadeInTime = function () {
            return !this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(FadeInTime)
                .isNull();
        };
        CubismMotionJson.prototype.isExistMotionFadeOutTime = function () {
            return !this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(FadeOutTime)
                .isNull();
        };
        CubismMotionJson.prototype.getMotionFadeInTime = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(FadeInTime)
                .toFloat();
        };
        CubismMotionJson.prototype.getMotionFadeOutTime = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(FadeOutTime)
                .toFloat();
        };
        CubismMotionJson.prototype.getMotionCurveTarget = function (curveIndex) {
            return this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(Target)
                .getRawString();
        };
        CubismMotionJson.prototype.getMotionCurveId = function (curveIndex) {
            return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(Id)
                .getRawString());
        };
        CubismMotionJson.prototype.isExistMotionCurveFadeInTime = function (curveIndex) {
            return !this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(FadeInTime)
                .isNull();
        };
        CubismMotionJson.prototype.isExistMotionCurveFadeOutTime = function (curveIndex) {
            return !this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(FadeOutTime)
                .isNull();
        };
        CubismMotionJson.prototype.getMotionCurveFadeInTime = function (curveIndex) {
            return this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(FadeInTime)
                .toFloat();
        };
        CubismMotionJson.prototype.getMotionCurveFadeOutTime = function (curveIndex) {
            return this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(FadeOutTime)
                .toFloat();
        };
        CubismMotionJson.prototype.getMotionCurveSegmentCount = function (curveIndex) {
            return this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(Segments)
                .getVector()
                .getSize();
        };
        CubismMotionJson.prototype.getMotionCurveSegment = function (curveIndex, segmentIndex) {
            return this._json
                .getRoot()
                .getValueByString(Curves)
                .getValueByIndex(curveIndex)
                .getValueByString(Segments)
                .getValueByIndex(segmentIndex)
                .toFloat();
        };
        CubismMotionJson.prototype.getEventCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(UserDataCount)
                .toInt();
        };
        CubismMotionJson.prototype.getTotalEventValueSize = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(TotalUserDataSize)
                .toInt();
        };
        CubismMotionJson.prototype.getEventTime = function (userDataIndex) {
            return this._json
                .getRoot()
                .getValueByString(UserData)
                .getValueByIndex(userDataIndex)
                .getValueByString(Time)
                .toFloat();
        };
        CubismMotionJson.prototype.getEventValue = function (userDataIndex) {
            return new csmstring_1.csmString(this._json
                .getRoot()
                .getValueByString(UserData)
                .getValueByIndex(userDataIndex)
                .getValueByString(Value)
                .getRawString());
        };
        return CubismMotionJson;
    }());
    exports.CubismMotionJson = CubismMotionJson;
    var EvaluationOptionFlag;
    (function (EvaluationOptionFlag) {
        EvaluationOptionFlag[EvaluationOptionFlag["EvaluationOptionFlag_AreBeziersRistricted"] = 0] = "EvaluationOptionFlag_AreBeziersRistricted";
    })(EvaluationOptionFlag = exports.EvaluationOptionFlag || (exports.EvaluationOptionFlag = {}));
    var $ = __importStar(__webpack_require__(/*! ./cubismmotionjson */ "../../../Framework/src/motion/cubismmotionjson.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismMotionJson = $.CubismMotionJson;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/motion/cubismmotionmanager.ts":
    /*!************************************************************!*\
      !*** ../../../Framework/src/motion/cubismmotionmanager.ts ***!
      \************************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismMotionManager = void 0;
    var cubismmotionqueuemanager_1 = __webpack_require__(/*! ./cubismmotionqueuemanager */ "../../../Framework/src/motion/cubismmotionqueuemanager.ts");
    var CubismMotionManager = (function (_super) {
        __extends(CubismMotionManager, _super);
        function CubismMotionManager() {
            var _this = _super.call(this) || this;
            _this._currentPriority = 0;
            _this._reservePriority = 0;
            return _this;
        }
        CubismMotionManager.prototype.getCurrentPriority = function () {
            return this._currentPriority;
        };
        CubismMotionManager.prototype.getReservePriority = function () {
            return this._reservePriority;
        };
        CubismMotionManager.prototype.setReservePriority = function (val) {
            this._reservePriority = val;
        };
        CubismMotionManager.prototype.startMotionPriority = function (motion, autoDelete, priority) {
            if (priority == this._reservePriority) {
                this._reservePriority = 0;
            }
            this._currentPriority = priority;
            return _super.prototype.startMotion.call(this, motion, autoDelete, this._userTimeSeconds);
        };
        CubismMotionManager.prototype.updateMotion = function (model, deltaTimeSeconds) {
            this._userTimeSeconds += deltaTimeSeconds;
            var updated = _super.prototype.doUpdateMotion.call(this, model, this._userTimeSeconds);
            if (this.isFinished()) {
                this._currentPriority = 0;
            }
            return updated;
        };
        CubismMotionManager.prototype.reserveMotion = function (priority) {
            if (priority <= this._reservePriority ||
                priority <= this._currentPriority) {
                return false;
            }
            this._reservePriority = priority;
            return true;
        };
        return CubismMotionManager;
    }(cubismmotionqueuemanager_1.CubismMotionQueueManager));
    exports.CubismMotionManager = CubismMotionManager;
    var $ = __importStar(__webpack_require__(/*! ./cubismmotionmanager */ "../../../Framework/src/motion/cubismmotionmanager.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismMotionManager = $.CubismMotionManager;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/motion/cubismmotionqueueentry.ts":
    /*!***************************************************************!*\
      !*** ../../../Framework/src/motion/cubismmotionqueueentry.ts ***!
      \***************************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismMotionQueueEntry = void 0;
    var acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ "../../../Framework/src/motion/acubismmotion.ts");
    var CubismMotionQueueEntry = (function () {
        function CubismMotionQueueEntry() {
            this._autoDelete = false;
            this._motion = null;
            this._available = true;
            this._finished = false;
            this._started = false;
            this._startTimeSeconds = -1.0;
            this._fadeInStartTimeSeconds = 0.0;
            this._endTimeSeconds = -1.0;
            this._stateTimeSeconds = 0.0;
            this._stateWeight = 0.0;
            this._lastEventCheckSeconds = 0.0;
            this._motionQueueEntryHandle = this;
            this._fadeOutSeconds = 0.0;
            this._isTriggeredFadeOut = false;
        }
        CubismMotionQueueEntry.prototype.release = function () {
            if (this._autoDelete && this._motion) {
                acubismmotion_1.ACubismMotion.delete(this._motion);
            }
        };
        CubismMotionQueueEntry.prototype.setFadeOut = function (fadeOutSeconds) {
            this._fadeOutSeconds = fadeOutSeconds;
            this._isTriggeredFadeOut = true;
        };
        CubismMotionQueueEntry.prototype.startFadeOut = function (fadeOutSeconds, userTimeSeconds) {
            var newEndTimeSeconds = userTimeSeconds + fadeOutSeconds;
            this._isTriggeredFadeOut = true;
            if (this._endTimeSeconds < 0.0 ||
                newEndTimeSeconds < this._endTimeSeconds) {
                this._endTimeSeconds = newEndTimeSeconds;
            }
        };
        CubismMotionQueueEntry.prototype.isFinished = function () {
            return this._finished;
        };
        CubismMotionQueueEntry.prototype.isStarted = function () {
            return this._started;
        };
        CubismMotionQueueEntry.prototype.getStartTime = function () {
            return this._startTimeSeconds;
        };
        CubismMotionQueueEntry.prototype.getFadeInStartTime = function () {
            return this._fadeInStartTimeSeconds;
        };
        CubismMotionQueueEntry.prototype.getEndTime = function () {
            return this._endTimeSeconds;
        };
        CubismMotionQueueEntry.prototype.setStartTime = function (startTime) {
            this._startTimeSeconds = startTime;
        };
        CubismMotionQueueEntry.prototype.setFadeInStartTime = function (startTime) {
            this._fadeInStartTimeSeconds = startTime;
        };
        CubismMotionQueueEntry.prototype.setEndTime = function (endTime) {
            this._endTimeSeconds = endTime;
        };
        CubismMotionQueueEntry.prototype.setIsFinished = function (f) {
            this._finished = f;
        };
        CubismMotionQueueEntry.prototype.setIsStarted = function (f) {
            this._started = f;
        };
        CubismMotionQueueEntry.prototype.isAvailable = function () {
            return this._available;
        };
        CubismMotionQueueEntry.prototype.setIsAvailable = function (v) {
            this._available = v;
        };
        CubismMotionQueueEntry.prototype.setState = function (timeSeconds, weight) {
            this._stateTimeSeconds = timeSeconds;
            this._stateWeight = weight;
        };
        CubismMotionQueueEntry.prototype.getStateTime = function () {
            return this._stateTimeSeconds;
        };
        CubismMotionQueueEntry.prototype.getStateWeight = function () {
            return this._stateWeight;
        };
        CubismMotionQueueEntry.prototype.getLastCheckEventSeconds = function () {
            return this._lastEventCheckSeconds;
        };
        CubismMotionQueueEntry.prototype.setLastCheckEventSeconds = function (checkSeconds) {
            this._lastEventCheckSeconds = checkSeconds;
        };
        CubismMotionQueueEntry.prototype.isTriggeredFadeOut = function () {
            return this._isTriggeredFadeOut;
        };
        CubismMotionQueueEntry.prototype.getFadeOutSeconds = function () {
            return this._fadeOutSeconds;
        };
        return CubismMotionQueueEntry;
    }());
    exports.CubismMotionQueueEntry = CubismMotionQueueEntry;
    var $ = __importStar(__webpack_require__(/*! ./cubismmotionqueueentry */ "../../../Framework/src/motion/cubismmotionqueueentry.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismMotionQueueEntry = $.CubismMotionQueueEntry;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/motion/cubismmotionqueuemanager.ts":
    /*!*****************************************************************!*\
      !*** ../../../Framework/src/motion/cubismmotionqueuemanager.ts ***!
      \*****************************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.InvalidMotionQueueEntryHandleValue = exports.CubismMotionQueueManager = void 0;
    var cubismmotionqueueentry_1 = __webpack_require__(/*! ./cubismmotionqueueentry */ "../../../Framework/src/motion/cubismmotionqueueentry.ts");
    var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var CubismMotionQueueManager = (function () {
        function CubismMotionQueueManager() {
            this._userTimeSeconds = 0.0;
            this._eventCallBack = null;
            this._eventCustomData = null;
            this._motions = new csmvector_1.csmVector();
        }
        CubismMotionQueueManager.prototype.release = function () {
            for (var i = 0; i < this._motions.getSize(); ++i) {
                if (this._motions.at(i)) {
                    this._motions.at(i).release();
                    this._motions.set(i, null);
                }
            }
            this._motions = null;
        };
        CubismMotionQueueManager.prototype.startMotion = function (motion, autoDelete, userTimeSeconds) {
            if (motion == null) {
                return exports.InvalidMotionQueueEntryHandleValue;
            }
            var motionQueueEntry = null;
            for (var i = 0; i < this._motions.getSize(); ++i) {
                motionQueueEntry = this._motions.at(i);
                if (motionQueueEntry == null) {
                    continue;
                }
                motionQueueEntry.setFadeOut(motionQueueEntry._motion.getFadeOutTime());
            }
            motionQueueEntry = new cubismmotionqueueentry_1.CubismMotionQueueEntry();
            motionQueueEntry._autoDelete = autoDelete;
            motionQueueEntry._motion = motion;
            this._motions.pushBack(motionQueueEntry);
            return motionQueueEntry._motionQueueEntryHandle;
        };
        CubismMotionQueueManager.prototype.isFinished = function () {
            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {
                var motionQueueEntry = ite.ptr();
                if (motionQueueEntry == null) {
                    ite = this._motions.erase(ite);
                    continue;
                }
                var motion = motionQueueEntry._motion;
                if (motion == null) {
                    motionQueueEntry.release();
                    motionQueueEntry = null;
                    ite = this._motions.erase(ite);
                    continue;
                }
                if (!motionQueueEntry.isFinished()) {
                    return false;
                }
                else {
                    ite.preIncrement();
                }
            }
            return true;
        };
        CubismMotionQueueManager.prototype.isFinishedByHandle = function (motionQueueEntryNumber) {
            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.increment()) {
                var motionQueueEntry = ite.ptr();
                if (motionQueueEntry == null) {
                    continue;
                }
                if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber &&
                    !motionQueueEntry.isFinished()) {
                    return false;
                }
            }
            return true;
        };
        CubismMotionQueueManager.prototype.stopAllMotions = function () {
            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {
                var motionQueueEntry = ite.ptr();
                if (motionQueueEntry == null) {
                    ite = this._motions.erase(ite);
                    continue;
                }
                motionQueueEntry.release();
                motionQueueEntry = null;
                ite = this._motions.erase(ite);
            }
        };
        CubismMotionQueueManager.prototype.getCubismMotionQueueEntry = function (motionQueueEntryNumber) {
            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.preIncrement()) {
                var motionQueueEntry = ite.ptr();
                if (motionQueueEntry == null) {
                    continue;
                }
                if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber) {
                    return motionQueueEntry;
                }
            }
            return null;
        };
        CubismMotionQueueManager.prototype.setEventCallback = function (callback, customData) {
            if (customData === void 0) { customData = null; }
            this._eventCallBack = callback;
            this._eventCustomData = customData;
        };
        CubismMotionQueueManager.prototype.doUpdateMotion = function (model, userTimeSeconds) {
            var updated = false;
            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {
                var motionQueueEntry = ite.ptr();
                if (motionQueueEntry == null) {
                    ite = this._motions.erase(ite);
                    continue;
                }
                var motion = motionQueueEntry._motion;
                if (motion == null) {
                    motionQueueEntry.release();
                    motionQueueEntry = null;
                    ite = this._motions.erase(ite);
                    continue;
                }
                motion.updateParameters(model, motionQueueEntry, userTimeSeconds);
                updated = true;
                var firedList = motion.getFiredEvent(motionQueueEntry.getLastCheckEventSeconds() -
                    motionQueueEntry.getStartTime(), userTimeSeconds - motionQueueEntry.getStartTime());
                for (var i = 0; i < firedList.getSize(); ++i) {
                    this._eventCallBack(this, firedList.at(i), this._eventCustomData);
                }
                motionQueueEntry.setLastCheckEventSeconds(userTimeSeconds);
                if (motionQueueEntry.isFinished()) {
                    motionQueueEntry.release();
                    motionQueueEntry = null;
                    ite = this._motions.erase(ite);
                }
                else {
                    if (motionQueueEntry.isTriggeredFadeOut()) {
                        motionQueueEntry.startFadeOut(motionQueueEntry.getFadeOutSeconds(), userTimeSeconds);
                    }
                    ite.preIncrement();
                }
            }
            return updated;
        };
        return CubismMotionQueueManager;
    }());
    exports.CubismMotionQueueManager = CubismMotionQueueManager;
    exports.InvalidMotionQueueEntryHandleValue = -1;
    var $ = __importStar(__webpack_require__(/*! ./cubismmotionqueuemanager */ "../../../Framework/src/motion/cubismmotionqueuemanager.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismMotionQueueManager = $.CubismMotionQueueManager;
        Live2DCubismFramework.InvalidMotionQueueEntryHandleValue = $.InvalidMotionQueueEntryHandleValue;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/physics/cubismphysics.ts":
    /*!*******************************************************!*\
      !*** ../../../Framework/src/physics/cubismphysics.ts ***!
      \*******************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.Options = exports.CubismPhysics = void 0;
    var cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ "../../../Framework/src/math/cubismmath.ts");
    var cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ "../../../Framework/src/math/cubismvector2.ts");
    var cubismphysicsinternal_1 = __webpack_require__(/*! ./cubismphysicsinternal */ "../../../Framework/src/physics/cubismphysicsinternal.ts");
    var cubismphysicsjson_1 = __webpack_require__(/*! ./cubismphysicsjson */ "../../../Framework/src/physics/cubismphysicsjson.ts");
    var PhysicsTypeTagX = 'X';
    var PhysicsTypeTagY = 'Y';
    var PhysicsTypeTagAngle = 'Angle';
    var AirResistance = 5.0;
    var MaximumWeight = 100.0;
    var MovementThreshold = 0.001;
    var CubismPhysics = (function () {
        function CubismPhysics() {
            this._physicsRig = null;
            this._options = new Options();
            this._options.gravity.y = -1.0;
            this._options.gravity.x = 0;
            this._options.wind.x = 0;
            this._options.wind.y = 0;
        }
        CubismPhysics.create = function (buffer, size) {
            var ret = new CubismPhysics();
            ret.parse(buffer, size);
            ret._physicsRig.gravity.y = 0;
            return ret;
        };
        CubismPhysics.delete = function (physics) {
            if (physics != null) {
                physics.release();
                physics = null;
            }
        };
        CubismPhysics.prototype.evaluate = function (model, deltaTimeSeconds) {
            var totalAngle;
            var weight;
            var radAngle;
            var outputValue;
            var totalTranslation = new cubismvector2_1.CubismVector2();
            var currentSetting;
            var currentInput;
            var currentOutput;
            var currentParticles;
            var parameterValue;
            var parameterMaximumValue;
            var parameterMinimumValue;
            var parameterDefaultValue;
            parameterValue = model.getModel().parameters.values;
            parameterMaximumValue = model.getModel().parameters.maximumValues;
            parameterMinimumValue = model.getModel().parameters.minimumValues;
            parameterDefaultValue = model.getModel().parameters.defaultValues;
            for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
                totalAngle = { angle: 0.0 };
                totalTranslation.x = 0.0;
                totalTranslation.y = 0.0;
                currentSetting = this._physicsRig.settings.at(settingIndex);
                currentInput = this._physicsRig.inputs.get(currentSetting.baseInputIndex);
                currentOutput = this._physicsRig.outputs.get(currentSetting.baseOutputIndex);
                currentParticles = this._physicsRig.particles.get(currentSetting.baseParticleIndex);
                for (var i = 0; i < currentSetting.inputCount; ++i) {
                    weight = currentInput[i].weight / MaximumWeight;
                    if (currentInput[i].sourceParameterIndex == -1) {
                        currentInput[i].sourceParameterIndex = model.getParameterIndex(currentInput[i].source.id);
                    }
                    currentInput[i].getNormalizedParameterValue(totalTranslation, totalAngle, parameterValue[currentInput[i].sourceParameterIndex], parameterMinimumValue[currentInput[i].sourceParameterIndex], parameterMaximumValue[currentInput[i].sourceParameterIndex], parameterDefaultValue[currentInput[i].sourceParameterIndex], currentSetting.normalizationPosition, currentSetting.normalizationAngle, currentInput[i].reflect, weight);
                }
                radAngle = cubismmath_1.CubismMath.degreesToRadian(-totalAngle.angle);
                totalTranslation.x =
                    totalTranslation.x * cubismmath_1.CubismMath.cos(radAngle) -
                        totalTranslation.y * cubismmath_1.CubismMath.sin(radAngle);
                totalTranslation.y =
                    totalTranslation.x * cubismmath_1.CubismMath.sin(radAngle) +
                        totalTranslation.y * cubismmath_1.CubismMath.cos(radAngle);
                updateParticles(currentParticles, currentSetting.particleCount, totalTranslation, totalAngle.angle, this._options.wind, MovementThreshold * currentSetting.normalizationPosition.maximum, deltaTimeSeconds, AirResistance);
                for (var i = 0; i < currentSetting.outputCount; ++i) {
                    var particleIndex = currentOutput[i].vertexIndex;
                    if (particleIndex < 1 ||
                        particleIndex >= currentSetting.particleCount) {
                        break;
                    }
                    if (currentOutput[i].destinationParameterIndex == -1) {
                        currentOutput[i].destinationParameterIndex = model.getParameterIndex(currentOutput[i].destination.id);
                    }
                    var translation = new cubismvector2_1.CubismVector2();
                    translation.x =
                        currentParticles[particleIndex].position.x -
                            currentParticles[particleIndex - 1].position.x;
                    translation.y =
                        currentParticles[particleIndex].position.y -
                            currentParticles[particleIndex - 1].position.y;
                    outputValue = currentOutput[i].getValue(translation, currentParticles, particleIndex, currentOutput[i].reflect, this._options.gravity);
                    var destinationParameterIndex = currentOutput[i].destinationParameterIndex;
                    var outParameterValue = !Float32Array.prototype.slice && 'subarray' in Float32Array.prototype
                        ? JSON.parse(JSON.stringify(parameterValue.subarray(destinationParameterIndex)))
                        : parameterValue.slice(destinationParameterIndex);
                    updateOutputParameterValue(outParameterValue, parameterMinimumValue[destinationParameterIndex], parameterMaximumValue[destinationParameterIndex], outputValue, currentOutput[i]);
                    for (var offset = destinationParameterIndex, outParamIndex = 0; offset < parameterValue.length; offset++, outParamIndex++) {
                        parameterValue[offset] = outParameterValue[outParamIndex];
                    }
                }
            }
        };
        CubismPhysics.prototype.setOptions = function (options) {
            this._options = options;
        };
        CubismPhysics.prototype.getOption = function () {
            return this._options;
        };
        CubismPhysics.prototype.release = function () {
            this._physicsRig = void 0;
            this._physicsRig = null;
        };
        CubismPhysics.prototype.parse = function (physicsJson, size) {
            this._physicsRig = new cubismphysicsinternal_1.CubismPhysicsRig();
            var json = new cubismphysicsjson_1.CubismPhysicsJson(physicsJson, size);
            this._physicsRig.gravity = json.getGravity();
            this._physicsRig.wind = json.getWind();
            this._physicsRig.subRigCount = json.getSubRigCount();
            this._physicsRig.settings.updateSize(this._physicsRig.subRigCount, cubismphysicsinternal_1.CubismPhysicsSubRig, true);
            this._physicsRig.inputs.updateSize(json.getTotalInputCount(), cubismphysicsinternal_1.CubismPhysicsInput, true);
            this._physicsRig.outputs.updateSize(json.getTotalOutputCount(), cubismphysicsinternal_1.CubismPhysicsOutput, true);
            this._physicsRig.particles.updateSize(json.getVertexCount(), cubismphysicsinternal_1.CubismPhysicsParticle, true);
            var inputIndex = 0, outputIndex = 0, particleIndex = 0;
            for (var i = 0; i < this._physicsRig.settings.getSize(); ++i) {
                this._physicsRig.settings.at(i).normalizationPosition.minimum = json.getNormalizationPositionMinimumValue(i);
                this._physicsRig.settings.at(i).normalizationPosition.maximum = json.getNormalizationPositionMaximumValue(i);
                this._physicsRig.settings.at(i).normalizationPosition.defalut = json.getNormalizationPositionDefaultValue(i);
                this._physicsRig.settings.at(i).normalizationAngle.minimum = json.getNormalizationAngleMinimumValue(i);
                this._physicsRig.settings.at(i).normalizationAngle.maximum = json.getNormalizationAngleMaximumValue(i);
                this._physicsRig.settings.at(i).normalizationAngle.defalut = json.getNormalizationAngleDefaultValue(i);
                this._physicsRig.settings.at(i).inputCount = json.getInputCount(i);
                this._physicsRig.settings.at(i).baseInputIndex = inputIndex;
                for (var j = 0; j < this._physicsRig.settings.at(i).inputCount; ++j) {
                    this._physicsRig.inputs.at(inputIndex + j).sourceParameterIndex = -1;
                    this._physicsRig.inputs.at(inputIndex + j).weight = json.getInputWeight(i, j);
                    this._physicsRig.inputs.at(inputIndex + j).reflect = json.getInputReflect(i, j);
                    if (json.getInputType(i, j) == PhysicsTypeTagX) {
                        this._physicsRig.inputs.at(inputIndex + j).type =
                            cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_X;
                        this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputTranslationXFromNormalizedParameterValue;
                    }
                    else if (json.getInputType(i, j) == PhysicsTypeTagY) {
                        this._physicsRig.inputs.at(inputIndex + j).type =
                            cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Y;
                        this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputTranslationYFromNormalizedParamterValue;
                    }
                    else if (json.getInputType(i, j) == PhysicsTypeTagAngle) {
                        this._physicsRig.inputs.at(inputIndex + j).type =
                            cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Angle;
                        this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputAngleFromNormalizedParameterValue;
                    }
                    this._physicsRig.inputs.at(inputIndex + j).source.targetType =
                        cubismphysicsinternal_1.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;
                    this._physicsRig.inputs.at(inputIndex + j).source.id = json.getInputSourceId(i, j);
                }
                inputIndex += this._physicsRig.settings.at(i).inputCount;
                this._physicsRig.settings.at(i).outputCount = json.getOutputCount(i);
                this._physicsRig.settings.at(i).baseOutputIndex = outputIndex;
                for (var j = 0; j < this._physicsRig.settings.at(i).outputCount; ++j) {
                    this._physicsRig.outputs.at(outputIndex + j).destinationParameterIndex = -1;
                    this._physicsRig.outputs.at(outputIndex + j).vertexIndex = json.getOutputVertexIndex(i, j);
                    this._physicsRig.outputs.at(outputIndex + j).angleScale = json.getOutputAngleScale(i, j);
                    this._physicsRig.outputs.at(outputIndex + j).weight = json.getOutputWeight(i, j);
                    this._physicsRig.outputs.at(outputIndex + j).destination.targetType =
                        cubismphysicsinternal_1.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;
                    this._physicsRig.outputs.at(outputIndex + j).destination.id = json.getOutputDestinationId(i, j);
                    if (json.getOutputType(i, j) == PhysicsTypeTagX) {
                        this._physicsRig.outputs.at(outputIndex + j).type =
                            cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_X;
                        this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputTranslationX;
                        this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleTranslationX;
                    }
                    else if (json.getOutputType(i, j) == PhysicsTypeTagY) {
                        this._physicsRig.outputs.at(outputIndex + j).type =
                            cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Y;
                        this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputTranslationY;
                        this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleTranslationY;
                    }
                    else if (json.getOutputType(i, j) == PhysicsTypeTagAngle) {
                        this._physicsRig.outputs.at(outputIndex + j).type =
                            cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Angle;
                        this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputAngle;
                        this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleAngle;
                    }
                    this._physicsRig.outputs.at(outputIndex + j).reflect = json.getOutputReflect(i, j);
                }
                outputIndex += this._physicsRig.settings.at(i).outputCount;
                this._physicsRig.settings.at(i).particleCount = json.getParticleCount(i);
                this._physicsRig.settings.at(i).baseParticleIndex = particleIndex;
                for (var j = 0; j < this._physicsRig.settings.at(i).particleCount; ++j) {
                    this._physicsRig.particles.at(particleIndex + j).mobility = json.getParticleMobility(i, j);
                    this._physicsRig.particles.at(particleIndex + j).delay = json.getParticleDelay(i, j);
                    this._physicsRig.particles.at(particleIndex + j).acceleration = json.getParticleAcceleration(i, j);
                    this._physicsRig.particles.at(particleIndex + j).radius = json.getParticleRadius(i, j);
                    this._physicsRig.particles.at(particleIndex + j).position = json.getParticlePosition(i, j);
                }
                particleIndex += this._physicsRig.settings.at(i).particleCount;
            }
            this.initialize();
            json.release();
            json = void 0;
            json = null;
        };
        CubismPhysics.prototype.initialize = function () {
            var strand;
            var currentSetting;
            var radius;
            for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
                currentSetting = this._physicsRig.settings.at(settingIndex);
                strand = this._physicsRig.particles.get(currentSetting.baseParticleIndex);
                strand[0].initialPosition = new cubismvector2_1.CubismVector2(0.0, 0.0);
                strand[0].lastPosition = new cubismvector2_1.CubismVector2(strand[0].initialPosition.x, strand[0].initialPosition.y);
                strand[0].lastGravity = new cubismvector2_1.CubismVector2(0.0, -1.0);
                strand[0].lastGravity.y *= -1.0;
                strand[0].velocity = new cubismvector2_1.CubismVector2(0.0, 0.0);
                strand[0].force = new cubismvector2_1.CubismVector2(0.0, 0.0);
                for (var i = 1; i < currentSetting.particleCount; ++i) {
                    radius = new cubismvector2_1.CubismVector2(0.0, 0.0);
                    radius.y = strand[i].radius;
                    strand[i].initialPosition = new cubismvector2_1.CubismVector2(strand[i - 1].initialPosition.x + radius.x, strand[i - 1].initialPosition.y + radius.y);
                    strand[i].position = new cubismvector2_1.CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);
                    strand[i].lastPosition = new cubismvector2_1.CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);
                    strand[i].lastGravity = new cubismvector2_1.CubismVector2(0.0, -1.0);
                    strand[i].lastGravity.y *= -1.0;
                    strand[i].velocity = new cubismvector2_1.CubismVector2(0.0, 0.0);
                    strand[i].force = new cubismvector2_1.CubismVector2(0.0, 0.0);
                }
            }
        };
        return CubismPhysics;
    }());
    exports.CubismPhysics = CubismPhysics;
    var Options = (function () {
        function Options() {
            this.gravity = new cubismvector2_1.CubismVector2(0, 0);
            this.wind = new cubismvector2_1.CubismVector2(0, 0);
        }
        return Options;
    }());
    exports.Options = Options;
    function sign(value) {
        var ret = 0;
        if (value > 0.0) {
            ret = 1;
        }
        else if (value < 0.0) {
            ret = -1;
        }
        return ret;
    }
    function getInputTranslationXFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {
        targetTranslation.x +=
            normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;
    }
    function getInputTranslationYFromNormalizedParamterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {
        targetTranslation.y +=
            normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;
    }
    function getInputAngleFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizaitionPosition, normalizationAngle, isInverted, weight) {
        targetAngle.angle +=
            normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationAngle.minimum, normalizationAngle.maximum, normalizationAngle.defalut, isInverted) * weight;
    }
    function getOutputTranslationX(translation, particles, particleIndex, isInverted, parentGravity) {
        var outputValue = translation.x;
        if (isInverted) {
            outputValue *= -1.0;
        }
        return outputValue;
    }
    function getOutputTranslationY(translation, particles, particleIndex, isInverted, parentGravity) {
        var outputValue = translation.y;
        if (isInverted) {
            outputValue *= -1.0;
        }
        return outputValue;
    }
    function getOutputAngle(translation, particles, particleIndex, isInverted, parentGravity) {
        var outputValue;
        if (particleIndex >= 2) {
            parentGravity = particles[particleIndex - 1].position.substract(particles[particleIndex - 2].position);
        }
        else {
            parentGravity = parentGravity.multiplyByScaler(-1.0);
        }
        outputValue = cubismmath_1.CubismMath.directionToRadian(parentGravity, translation);
        if (isInverted) {
            outputValue *= -1.0;
        }
        return outputValue;
    }
    function getRangeValue(min, max) {
        var maxValue = cubismmath_1.CubismMath.max(min, max);
        var minValue = cubismmath_1.CubismMath.min(min, max);
        return cubismmath_1.CubismMath.abs(maxValue - minValue);
    }
    function getDefaultValue(min, max) {
        var minValue = cubismmath_1.CubismMath.min(min, max);
        return minValue + getRangeValue(min, max) / 2.0;
    }
    function getOutputScaleTranslationX(translationScale, angleScale) {
        return JSON.parse(JSON.stringify(translationScale.x));
    }
    function getOutputScaleTranslationY(translationScale, angleScale) {
        return JSON.parse(JSON.stringify(translationScale.y));
    }
    function getOutputScaleAngle(translationScale, angleScale) {
        return JSON.parse(JSON.stringify(angleScale));
    }
    function updateParticles(strand, strandCount, totalTranslation, totalAngle, windDirection, thresholdValue, deltaTimeSeconds, airResistance) {
        var totalRadian;
        var delay;
        var radian;
        var currentGravity;
        var direction = new cubismvector2_1.CubismVector2(0.0, 0.0);
        var velocity = new cubismvector2_1.CubismVector2(0.0, 0.0);
        var force = new cubismvector2_1.CubismVector2(0.0, 0.0);
        var newDirection = new cubismvector2_1.CubismVector2(0.0, 0.0);
        strand[0].position = new cubismvector2_1.CubismVector2(totalTranslation.x, totalTranslation.y);
        totalRadian = cubismmath_1.CubismMath.degreesToRadian(totalAngle);
        currentGravity = cubismmath_1.CubismMath.radianToDirection(totalRadian);
        currentGravity.normalize();
        for (var i = 1; i < strandCount; ++i) {
            strand[i].force = currentGravity
                .multiplyByScaler(strand[i].acceleration)
                .add(windDirection);
            strand[i].lastPosition = new cubismvector2_1.CubismVector2(strand[i].position.x, strand[i].position.y);
            delay = strand[i].delay * deltaTimeSeconds * 30.0;
            direction = strand[i].position.substract(strand[i - 1].position);
            radian =
                cubismmath_1.CubismMath.directionToRadian(strand[i].lastGravity, currentGravity) /
                    airResistance;
            direction.x =
                cubismmath_1.CubismMath.cos(radian) * direction.x -
                    direction.y * cubismmath_1.CubismMath.sin(radian);
            direction.y =
                cubismmath_1.CubismMath.sin(radian) * direction.x +
                    direction.y * cubismmath_1.CubismMath.cos(radian);
            strand[i].position = strand[i - 1].position.add(direction);
            velocity = strand[i].velocity.multiplyByScaler(delay);
            force = strand[i].force.multiplyByScaler(delay).multiplyByScaler(delay);
            strand[i].position = strand[i].position.add(velocity).add(force);
            newDirection = strand[i].position.substract(strand[i - 1].position);
            newDirection.normalize();
            strand[i].position = strand[i - 1].position.add(newDirection.multiplyByScaler(strand[i].radius));
            if (cubismmath_1.CubismMath.abs(strand[i].position.x) < thresholdValue) {
                strand[i].position.x = 0.0;
            }
            if (delay != 0.0) {
                strand[i].velocity = strand[i].position.substract(strand[i].lastPosition);
                strand[i].velocity = strand[i].velocity.divisionByScalar(delay);
                strand[i].velocity = strand[i].velocity.multiplyByScaler(strand[i].mobility);
            }
            strand[i].force = new cubismvector2_1.CubismVector2(0.0, 0.0);
            strand[i].lastGravity = new cubismvector2_1.CubismVector2(currentGravity.x, currentGravity.y);
        }
    }
    function updateOutputParameterValue(parameterValue, parameterValueMinimum, parameterValueMaximum, translation, output) {
        var outputScale;
        var value;
        var weight;
        outputScale = output.getScale(output.translationScale, output.angleScale);
        value = translation * outputScale;
        if (value < parameterValueMinimum) {
            if (value < output.valueBelowMinimum) {
                output.valueBelowMinimum = value;
            }
            value = parameterValueMinimum;
        }
        else if (value > parameterValueMaximum) {
            if (value > output.valueExceededMaximum) {
                output.valueExceededMaximum = value;
            }
            value = parameterValueMaximum;
        }
        weight = output.weight / MaximumWeight;
        if (weight >= 1.0) {
            parameterValue[0] = value;
        }
        else {
            value = parameterValue[0] * (1.0 - weight) + value * weight;
            parameterValue[0] = value;
        }
    }
    function normalizeParameterValue(value, parameterMinimum, parameterMaximum, parameterDefault, normalizedMinimum, normalizedMaximum, normalizedDefault, isInverted) {
        var result = 0.0;
        var maxValue = cubismmath_1.CubismMath.max(parameterMaximum, parameterMinimum);
        if (maxValue < value) {
            value = maxValue;
        }
        var minValue = cubismmath_1.CubismMath.min(parameterMaximum, parameterMinimum);
        if (minValue > value) {
            value = minValue;
        }
        var minNormValue = cubismmath_1.CubismMath.min(normalizedMinimum, normalizedMaximum);
        var maxNormValue = cubismmath_1.CubismMath.max(normalizedMinimum, normalizedMaximum);
        var middleNormValue = normalizedDefault;
        var middleValue = getDefaultValue(minValue, maxValue);
        var paramValue = value - middleValue;
        switch (sign(paramValue)) {
            case 1: {
                var nLength = maxNormValue - middleNormValue;
                var pLength = maxValue - middleValue;
                if (pLength != 0.0) {
                    result = paramValue * (nLength / pLength);
                    result += middleNormValue;
                }
                break;
            }
            case -1: {
                var nLength = minNormValue - middleNormValue;
                var pLength = minValue - middleValue;
                if (pLength != 0.0) {
                    result = paramValue * (nLength / pLength);
                    result += middleNormValue;
                }
                break;
            }
            case 0: {
                result = middleNormValue;
                break;
            }
            default: {
                break;
            }
        }
        return isInverted ? result : result * -1.0;
    }
    var $ = __importStar(__webpack_require__(/*! ./cubismphysics */ "../../../Framework/src/physics/cubismphysics.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismPhysics = $.CubismPhysics;
        Live2DCubismFramework.Options = $.Options;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/physics/cubismphysicsinternal.ts":
    /*!***************************************************************!*\
      !*** ../../../Framework/src/physics/cubismphysicsinternal.ts ***!
      \***************************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismPhysicsRig = exports.CubismPhysicsOutput = exports.CubismPhysicsInput = exports.CubismPhysicsSubRig = exports.CubismPhysicsParticle = exports.CubismPhysicsNormalization = exports.CubismPhysicsParameter = exports.PhysicsJsonEffectiveForces = exports.CubismPhysicsSource = exports.CubismPhysicsTargetType = void 0;
    var cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ "../../../Framework/src/math/cubismvector2.ts");
    var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var CubismPhysicsTargetType;
    (function (CubismPhysicsTargetType) {
        CubismPhysicsTargetType[CubismPhysicsTargetType["CubismPhysicsTargetType_Parameter"] = 0] = "CubismPhysicsTargetType_Parameter";
    })(CubismPhysicsTargetType = exports.CubismPhysicsTargetType || (exports.CubismPhysicsTargetType = {}));
    var CubismPhysicsSource;
    (function (CubismPhysicsSource) {
        CubismPhysicsSource[CubismPhysicsSource["CubismPhysicsSource_X"] = 0] = "CubismPhysicsSource_X";
        CubismPhysicsSource[CubismPhysicsSource["CubismPhysicsSource_Y"] = 1] = "CubismPhysicsSource_Y";
        CubismPhysicsSource[CubismPhysicsSource["CubismPhysicsSource_Angle"] = 2] = "CubismPhysicsSource_Angle";
    })(CubismPhysicsSource = exports.CubismPhysicsSource || (exports.CubismPhysicsSource = {}));
    var PhysicsJsonEffectiveForces = (function () {
        function PhysicsJsonEffectiveForces() {
            this.gravity = new cubismvector2_1.CubismVector2(0, 0);
            this.wind = new cubismvector2_1.CubismVector2(0, 0);
        }
        return PhysicsJsonEffectiveForces;
    }());
    exports.PhysicsJsonEffectiveForces = PhysicsJsonEffectiveForces;
    var CubismPhysicsParameter = (function () {
        function CubismPhysicsParameter() {
        }
        return CubismPhysicsParameter;
    }());
    exports.CubismPhysicsParameter = CubismPhysicsParameter;
    var CubismPhysicsNormalization = (function () {
        function CubismPhysicsNormalization() {
        }
        return CubismPhysicsNormalization;
    }());
    exports.CubismPhysicsNormalization = CubismPhysicsNormalization;
    var CubismPhysicsParticle = (function () {
        function CubismPhysicsParticle() {
            this.initialPosition = new cubismvector2_1.CubismVector2(0, 0);
            this.position = new cubismvector2_1.CubismVector2(0, 0);
            this.lastPosition = new cubismvector2_1.CubismVector2(0, 0);
            this.lastGravity = new cubismvector2_1.CubismVector2(0, 0);
            this.force = new cubismvector2_1.CubismVector2(0, 0);
            this.velocity = new cubismvector2_1.CubismVector2(0, 0);
        }
        return CubismPhysicsParticle;
    }());
    exports.CubismPhysicsParticle = CubismPhysicsParticle;
    var CubismPhysicsSubRig = (function () {
        function CubismPhysicsSubRig() {
            this.normalizationPosition = new CubismPhysicsNormalization();
            this.normalizationAngle = new CubismPhysicsNormalization();
        }
        return CubismPhysicsSubRig;
    }());
    exports.CubismPhysicsSubRig = CubismPhysicsSubRig;
    var CubismPhysicsInput = (function () {
        function CubismPhysicsInput() {
            this.source = new CubismPhysicsParameter();
        }
        return CubismPhysicsInput;
    }());
    exports.CubismPhysicsInput = CubismPhysicsInput;
    var CubismPhysicsOutput = (function () {
        function CubismPhysicsOutput() {
            this.destination = new CubismPhysicsParameter();
            this.translationScale = new cubismvector2_1.CubismVector2(0, 0);
        }
        return CubismPhysicsOutput;
    }());
    exports.CubismPhysicsOutput = CubismPhysicsOutput;
    var CubismPhysicsRig = (function () {
        function CubismPhysicsRig() {
            this.settings = new csmvector_1.csmVector();
            this.inputs = new csmvector_1.csmVector();
            this.outputs = new csmvector_1.csmVector();
            this.particles = new csmvector_1.csmVector();
            this.gravity = new cubismvector2_1.CubismVector2(0, 0);
            this.wind = new cubismvector2_1.CubismVector2(0, 0);
        }
        return CubismPhysicsRig;
    }());
    exports.CubismPhysicsRig = CubismPhysicsRig;
    var $ = __importStar(__webpack_require__(/*! ./cubismphysicsinternal */ "../../../Framework/src/physics/cubismphysicsinternal.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismPhysicsInput = $.CubismPhysicsInput;
        Live2DCubismFramework.CubismPhysicsNormalization = $.CubismPhysicsNormalization;
        Live2DCubismFramework.CubismPhysicsOutput = $.CubismPhysicsOutput;
        Live2DCubismFramework.CubismPhysicsParameter = $.CubismPhysicsParameter;
        Live2DCubismFramework.CubismPhysicsParticle = $.CubismPhysicsParticle;
        Live2DCubismFramework.CubismPhysicsRig = $.CubismPhysicsRig;
        Live2DCubismFramework.CubismPhysicsSource = $.CubismPhysicsSource;
        Live2DCubismFramework.CubismPhysicsSubRig = $.CubismPhysicsSubRig;
        Live2DCubismFramework.CubismPhysicsTargetType = $.CubismPhysicsTargetType;
        Live2DCubismFramework.PhysicsJsonEffectiveForces = $.PhysicsJsonEffectiveForces;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/physics/cubismphysicsjson.ts":
    /*!***********************************************************!*\
      !*** ../../../Framework/src/physics/cubismphysicsjson.ts ***!
      \***********************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismPhysicsJson = void 0;
    var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    var cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ "../../../Framework/src/math/cubismvector2.ts");
    var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "../../../Framework/src/utils/cubismjson.ts");
    var Position = 'Position';
    var X = 'X';
    var Y = 'Y';
    var Angle = 'Angle';
    var Type = 'Type';
    var Id = 'Id';
    var Meta = 'Meta';
    var EffectiveForces = 'EffectiveForces';
    var TotalInputCount = 'TotalInputCount';
    var TotalOutputCount = 'TotalOutputCount';
    var PhysicsSettingCount = 'PhysicsSettingCount';
    var Gravity = 'Gravity';
    var Wind = 'Wind';
    var VertexCount = 'VertexCount';
    var PhysicsSettings = 'PhysicsSettings';
    var Normalization = 'Normalization';
    var Minimum = 'Minimum';
    var Maximum = 'Maximum';
    var Default = 'Default';
    var Reflect = 'Reflect';
    var Weight = 'Weight';
    var Input = 'Input';
    var Source = 'Source';
    var Output = 'Output';
    var Scale = 'Scale';
    var VertexIndex = 'VertexIndex';
    var Destination = 'Destination';
    var Vertices = 'Vertices';
    var Mobility = 'Mobility';
    var Delay = 'Delay';
    var Radius = 'Radius';
    var Acceleration = 'Acceleration';
    var CubismPhysicsJson = (function () {
        function CubismPhysicsJson(buffer, size) {
            this._json = cubismjson_1.CubismJson.create(buffer, size);
        }
        CubismPhysicsJson.prototype.release = function () {
            cubismjson_1.CubismJson.delete(this._json);
        };
        CubismPhysicsJson.prototype.getGravity = function () {
            var ret = new cubismvector2_1.CubismVector2(0, 0);
            ret.x = this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(EffectiveForces)
                .getValueByString(Gravity)
                .getValueByString(X)
                .toFloat();
            ret.y = this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(EffectiveForces)
                .getValueByString(Gravity)
                .getValueByString(Y)
                .toFloat();
            return ret;
        };
        CubismPhysicsJson.prototype.getWind = function () {
            var ret = new cubismvector2_1.CubismVector2(0, 0);
            ret.x = this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(EffectiveForces)
                .getValueByString(Wind)
                .getValueByString(X)
                .toFloat();
            ret.y = this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(EffectiveForces)
                .getValueByString(Wind)
                .getValueByString(Y)
                .toFloat();
            return ret;
        };
        CubismPhysicsJson.prototype.getSubRigCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(PhysicsSettingCount)
                .toInt();
        };
        CubismPhysicsJson.prototype.getTotalInputCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(TotalInputCount)
                .toInt();
        };
        CubismPhysicsJson.prototype.getTotalOutputCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(TotalOutputCount)
                .toInt();
        };
        CubismPhysicsJson.prototype.getVertexCount = function () {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(VertexCount)
                .toInt();
        };
        CubismPhysicsJson.prototype.getNormalizationPositionMinimumValue = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Normalization)
                .getValueByString(Position)
                .getValueByString(Minimum)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getNormalizationPositionMaximumValue = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Normalization)
                .getValueByString(Position)
                .getValueByString(Maximum)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getNormalizationPositionDefaultValue = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Normalization)
                .getValueByString(Position)
                .getValueByString(Default)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getNormalizationAngleMinimumValue = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Normalization)
                .getValueByString(Angle)
                .getValueByString(Minimum)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getNormalizationAngleMaximumValue = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Normalization)
                .getValueByString(Angle)
                .getValueByString(Maximum)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getNormalizationAngleDefaultValue = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Normalization)
                .getValueByString(Angle)
                .getValueByString(Default)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getInputCount = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Input)
                .getVector()
                .getSize();
        };
        CubismPhysicsJson.prototype.getInputWeight = function (physicsSettingIndex, inputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Input)
                .getValueByIndex(inputIndex)
                .getValueByString(Weight)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getInputReflect = function (physicsSettingIndex, inputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Input)
                .getValueByIndex(inputIndex)
                .getValueByString(Reflect)
                .toBoolean();
        };
        CubismPhysicsJson.prototype.getInputType = function (physicsSettingIndex, inputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Input)
                .getValueByIndex(inputIndex)
                .getValueByString(Type)
                .getRawString();
        };
        CubismPhysicsJson.prototype.getInputSourceId = function (physicsSettingIndex, inputIndex) {
            return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Input)
                .getValueByIndex(inputIndex)
                .getValueByString(Source)
                .getValueByString(Id)
                .getRawString());
        };
        CubismPhysicsJson.prototype.getOutputCount = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Output)
                .getVector()
                .getSize();
        };
        CubismPhysicsJson.prototype.getOutputVertexIndex = function (physicsSettingIndex, outputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Output)
                .getValueByIndex(outputIndex)
                .getValueByString(VertexIndex)
                .toInt();
        };
        CubismPhysicsJson.prototype.getOutputAngleScale = function (physicsSettingIndex, outputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Output)
                .getValueByIndex(outputIndex)
                .getValueByString(Scale)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getOutputWeight = function (physicsSettingIndex, outputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Output)
                .getValueByIndex(outputIndex)
                .getValueByString(Weight)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getOutputDestinationId = function (physicsSettingIndex, outputIndex) {
            return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Output)
                .getValueByIndex(outputIndex)
                .getValueByString(Destination)
                .getValueByString(Id)
                .getRawString());
        };
        CubismPhysicsJson.prototype.getOutputType = function (physicsSettingIndex, outputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Output)
                .getValueByIndex(outputIndex)
                .getValueByString(Type)
                .getRawString();
        };
        CubismPhysicsJson.prototype.getOutputReflect = function (physicsSettingIndex, outputIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Output)
                .getValueByIndex(outputIndex)
                .getValueByString(Reflect)
                .toBoolean();
        };
        CubismPhysicsJson.prototype.getParticleCount = function (physicsSettingIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Vertices)
                .getVector()
                .getSize();
        };
        CubismPhysicsJson.prototype.getParticleMobility = function (physicsSettingIndex, vertexIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Vertices)
                .getValueByIndex(vertexIndex)
                .getValueByString(Mobility)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getParticleDelay = function (physicsSettingIndex, vertexIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Vertices)
                .getValueByIndex(vertexIndex)
                .getValueByString(Delay)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getParticleAcceleration = function (physicsSettingIndex, vertexIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Vertices)
                .getValueByIndex(vertexIndex)
                .getValueByString(Acceleration)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getParticleRadius = function (physicsSettingIndex, vertexIndex) {
            return this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Vertices)
                .getValueByIndex(vertexIndex)
                .getValueByString(Radius)
                .toFloat();
        };
        CubismPhysicsJson.prototype.getParticlePosition = function (physicsSettingIndex, vertexIndex) {
            var ret = new cubismvector2_1.CubismVector2(0, 0);
            ret.x = this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Vertices)
                .getValueByIndex(vertexIndex)
                .getValueByString(Position)
                .getValueByString(X)
                .toFloat();
            ret.y = this._json
                .getRoot()
                .getValueByString(PhysicsSettings)
                .getValueByIndex(physicsSettingIndex)
                .getValueByString(Vertices)
                .getValueByIndex(vertexIndex)
                .getValueByString(Position)
                .getValueByString(Y)
                .toFloat();
            return ret;
        };
        return CubismPhysicsJson;
    }());
    exports.CubismPhysicsJson = CubismPhysicsJson;
    var $ = __importStar(__webpack_require__(/*! ./cubismphysicsjson */ "../../../Framework/src/physics/cubismphysicsjson.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismPhysicsJson = $.CubismPhysicsJson;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/rendering/cubismrenderer.ts":
    /*!**********************************************************!*\
      !*** ../../../Framework/src/rendering/cubismrenderer.ts ***!
      \**********************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismTextureColor = exports.CubismBlendMode = exports.CubismRenderer = void 0;
    var cubismmatrix44_1 = __webpack_require__(/*! ../math/cubismmatrix44 */ "../../../Framework/src/math/cubismmatrix44.ts");
    var CubismRenderer = (function () {
        function CubismRenderer() {
            this._isCulling = false;
            this._isPremultipliedAlpha = false;
            this._anisortopy = 0.0;
            this._model = null;
            this._modelColor = new CubismTextureColor();
            this._mvpMatrix4x4 = new cubismmatrix44_1.CubismMatrix44();
            this._mvpMatrix4x4.loadIdentity();
        }
        CubismRenderer.create = function () {
            return null;
        };
        CubismRenderer.delete = function (renderer) {
            renderer = null;
        };
        CubismRenderer.prototype.initialize = function (model) {
            this._model = model;
        };
        CubismRenderer.prototype.drawModel = function () {
            if (this.getModel() == null)
                return;
            this.doDrawModel();
        };
        CubismRenderer.prototype.setMvpMatrix = function (matrix44) {
            this._mvpMatrix4x4.setMatrix(matrix44.getArray());
        };
        CubismRenderer.prototype.getMvpMatrix = function () {
            return this._mvpMatrix4x4;
        };
        CubismRenderer.prototype.setModelColor = function (red, green, blue, alpha) {
            if (red < 0.0) {
                red = 0.0;
            }
            else if (red > 1.0) {
                red = 1.0;
            }
            if (green < 0.0) {
                green = 0.0;
            }
            else if (green > 1.0) {
                green = 1.0;
            }
            if (blue < 0.0) {
                blue = 0.0;
            }
            else if (blue > 1.0) {
                blue = 1.0;
            }
            if (alpha < 0.0) {
                alpha = 0.0;
            }
            else if (alpha > 1.0) {
                alpha = 1.0;
            }
            this._modelColor.R = red;
            this._modelColor.G = green;
            this._modelColor.B = blue;
            this._modelColor.A = alpha;
        };
        CubismRenderer.prototype.getModelColor = function () {
            return JSON.parse(JSON.stringify(this._modelColor));
        };
        CubismRenderer.prototype.setIsPremultipliedAlpha = function (enable) {
            this._isPremultipliedAlpha = enable;
        };
        CubismRenderer.prototype.isPremultipliedAlpha = function () {
            return this._isPremultipliedAlpha;
        };
        CubismRenderer.prototype.setIsCulling = function (culling) {
            this._isCulling = culling;
        };
        CubismRenderer.prototype.isCulling = function () {
            return this._isCulling;
        };
        CubismRenderer.prototype.setAnisotropy = function (n) {
            this._anisortopy = n;
        };
        CubismRenderer.prototype.getAnisotropy = function () {
            return this._anisortopy;
        };
        CubismRenderer.prototype.getModel = function () {
            return this._model;
        };
        return CubismRenderer;
    }());
    exports.CubismRenderer = CubismRenderer;
    var CubismBlendMode;
    (function (CubismBlendMode) {
        CubismBlendMode[CubismBlendMode["CubismBlendMode_Normal"] = 0] = "CubismBlendMode_Normal";
        CubismBlendMode[CubismBlendMode["CubismBlendMode_Additive"] = 1] = "CubismBlendMode_Additive";
        CubismBlendMode[CubismBlendMode["CubismBlendMode_Multiplicative"] = 2] = "CubismBlendMode_Multiplicative";
    })(CubismBlendMode = exports.CubismBlendMode || (exports.CubismBlendMode = {}));
    var CubismTextureColor = (function () {
        function CubismTextureColor() {
            this.R = 1.0;
            this.G = 1.0;
            this.B = 1.0;
            this.A = 1.0;
        }
        return CubismTextureColor;
    }());
    exports.CubismTextureColor = CubismTextureColor;
    var $ = __importStar(__webpack_require__(/*! ./cubismrenderer */ "../../../Framework/src/rendering/cubismrenderer.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismBlendMode = $.CubismBlendMode;
        Live2DCubismFramework.CubismRenderer = $.CubismRenderer;
        Live2DCubismFramework.CubismTextureColor = $.CubismTextureColor;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/rendering/cubismrenderer_webgl.ts":
    /*!****************************************************************!*\
      !*** ../../../Framework/src/rendering/cubismrenderer_webgl.ts ***!
      \****************************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismRenderer_WebGL = exports.fragmentShaderSrcMaskInvertedPremultipliedAlpha = exports.fragmentShaderSrcMaskPremultipliedAlpha = exports.fragmentShaderSrcPremultipliedAlpha = exports.vertexShaderSrcMasked = exports.vertexShaderSrc = exports.fragmentShaderSrcsetupMask = exports.vertexShaderSrcSetupMask = exports.ShaderNames = exports.CubismShaderSet = exports.CubismShader_WebGL = exports.CubismClippingContext = exports.CubismRenderTextureResource = exports.CubismClippingManager_WebGL = void 0;
    var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    var cubismmatrix44_1 = __webpack_require__(/*! ../math/cubismmatrix44 */ "../../../Framework/src/math/cubismmatrix44.ts");
    var csmmap_1 = __webpack_require__(/*! ../type/csmmap */ "../../../Framework/src/type/csmmap.ts");
    var csmrectf_1 = __webpack_require__(/*! ../type/csmrectf */ "../../../Framework/src/type/csmrectf.ts");
    var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
    var cubismrenderer_1 = __webpack_require__(/*! ./cubismrenderer */ "../../../Framework/src/rendering/cubismrenderer.ts");
    var ColorChannelCount = 4;
    var shaderCount = 10;
    var s_instance;
    var s_viewport;
    var s_fbo;
    var CubismClippingManager_WebGL = (function () {
        function CubismClippingManager_WebGL() {
            this._maskRenderTexture = null;
            this._colorBuffer = null;
            this._currentFrameNo = 0;
            this._clippingMaskBufferSize = 256;
            this._clippingContextListForMask = new csmvector_1.csmVector();
            this._clippingContextListForDraw = new csmvector_1.csmVector();
            this._channelColors = new csmvector_1.csmVector();
            this._tmpBoundsOnModel = new csmrectf_1.csmRect();
            this._tmpMatrix = new cubismmatrix44_1.CubismMatrix44();
            this._tmpMatrixForMask = new cubismmatrix44_1.CubismMatrix44();
            this._tmpMatrixForDraw = new cubismmatrix44_1.CubismMatrix44();
            this._maskTexture = null;
            var tmp = new cubismrenderer_1.CubismTextureColor();
            tmp.R = 1.0;
            tmp.G = 0.0;
            tmp.B = 0.0;
            tmp.A = 0.0;
            this._channelColors.pushBack(tmp);
            tmp = new cubismrenderer_1.CubismTextureColor();
            tmp.R = 0.0;
            tmp.G = 1.0;
            tmp.B = 0.0;
            tmp.A = 0.0;
            this._channelColors.pushBack(tmp);
            tmp = new cubismrenderer_1.CubismTextureColor();
            tmp.R = 0.0;
            tmp.G = 0.0;
            tmp.B = 1.0;
            tmp.A = 0.0;
            this._channelColors.pushBack(tmp);
            tmp = new cubismrenderer_1.CubismTextureColor();
            tmp.R = 0.0;
            tmp.G = 0.0;
            tmp.B = 0.0;
            tmp.A = 1.0;
            this._channelColors.pushBack(tmp);
        }
        CubismClippingManager_WebGL.prototype.getChannelFlagAsColor = function (channelNo) {
            return this._channelColors.at(channelNo);
        };
        CubismClippingManager_WebGL.prototype.getMaskRenderTexture = function () {
            var ret = 0;
            if (this._maskTexture && this._maskTexture.texture != 0) {
                this._maskTexture.frameNo = this._currentFrameNo;
                ret = this._maskTexture.texture;
            }
            if (ret == 0) {
                var size = this._clippingMaskBufferSize;
                this._colorBuffer = this.gl.createTexture();
                this.gl.bindTexture(this.gl.TEXTURE_2D, this._colorBuffer);
                this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, size, size, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
                this.gl.bindTexture(this.gl.TEXTURE_2D, null);
                ret = this.gl.createFramebuffer();
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, ret);
                this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this._colorBuffer, 0);
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);
                this._maskTexture = new CubismRenderTextureResource(this._currentFrameNo, ret);
            }
            return ret;
        };
        CubismClippingManager_WebGL.prototype.setGL = function (gl) {
            this.gl = gl;
        };
        CubismClippingManager_WebGL.prototype.calcClippedDrawTotalBounds = function (model, clippingContext) {
            var clippedDrawTotalMinX = Number.MAX_VALUE;
            var clippedDrawTotalMinY = Number.MAX_VALUE;
            var clippedDrawTotalMaxX = Number.MIN_VALUE;
            var clippedDrawTotalMaxY = Number.MIN_VALUE;
            var clippedDrawCount = clippingContext._clippedDrawableIndexList.length;
            for (var clippedDrawableIndex = 0; clippedDrawableIndex < clippedDrawCount; clippedDrawableIndex++) {
                var drawableIndex = clippingContext._clippedDrawableIndexList[clippedDrawableIndex];
                var drawableVertexCount = model.getDrawableVertexCount(drawableIndex);
                var drawableVertexes = model.getDrawableVertices(drawableIndex);
                var minX = Number.MAX_VALUE;
                var minY = Number.MAX_VALUE;
                var maxX = Number.MIN_VALUE;
                var maxY = Number.MIN_VALUE;
                var loop = drawableVertexCount * live2dcubismframework_1.Constant.vertexStep;
                for (var pi = live2dcubismframework_1.Constant.vertexOffset; pi < loop; pi += live2dcubismframework_1.Constant.vertexStep) {
                    var x = drawableVertexes[pi];
                    var y = drawableVertexes[pi + 1];
                    if (x < minX) {
                        minX = x;
                    }
                    if (x > maxX) {
                        maxX = x;
                    }
                    if (y < minY) {
                        minY = y;
                    }
                    if (y > maxY) {
                        maxY = y;
                    }
                }
                if (minX == Number.MAX_VALUE) {
                    continue;
                }
                if (minX < clippedDrawTotalMinX) {
                    clippedDrawTotalMinX = minX;
                }
                if (minY < clippedDrawTotalMinY) {
                    clippedDrawTotalMinY = minY;
                }
                if (maxX > clippedDrawTotalMaxX) {
                    clippedDrawTotalMaxX = maxX;
                }
                if (maxY > clippedDrawTotalMaxY) {
                    clippedDrawTotalMaxY = maxY;
                }
                if (clippedDrawTotalMinX == Number.MAX_VALUE) {
                    clippingContext._allClippedDrawRect.x = 0.0;
                    clippingContext._allClippedDrawRect.y = 0.0;
                    clippingContext._allClippedDrawRect.width = 0.0;
                    clippingContext._allClippedDrawRect.height = 0.0;
                    clippingContext._isUsing = false;
                }
                else {
                    clippingContext._isUsing = true;
                    var w = clippedDrawTotalMaxX - clippedDrawTotalMinX;
                    var h = clippedDrawTotalMaxY - clippedDrawTotalMinY;
                    clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;
                    clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;
                    clippingContext._allClippedDrawRect.width = w;
                    clippingContext._allClippedDrawRect.height = h;
                }
            }
        };
        CubismClippingManager_WebGL.prototype.release = function () {
            for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {
                if (this._clippingContextListForMask.at(i)) {
                    this._clippingContextListForMask.at(i).release();
                    this._clippingContextListForMask.set(i, void 0);
                }
                this._clippingContextListForMask.set(i, null);
            }
            this._clippingContextListForMask = null;
            for (var i = 0; i < this._clippingContextListForDraw.getSize(); i++) {
                this._clippingContextListForDraw.set(i, null);
            }
            this._clippingContextListForDraw = null;
            if (this._maskTexture) {
                this.gl.deleteFramebuffer(this._maskTexture.texture);
                this._maskTexture = null;
            }
            for (var i = 0; i < this._channelColors.getSize(); i++) {
                this._channelColors.set(i, null);
            }
            this._channelColors = null;
            this.gl.deleteTexture(this._colorBuffer);
            this._colorBuffer = null;
        };
        CubismClippingManager_WebGL.prototype.initialize = function (model, drawableCount, drawableMasks, drawableMaskCounts) {
            for (var i = 0; i < drawableCount; i++) {
                if (drawableMaskCounts[i] <= 0) {
                    this._clippingContextListForDraw.pushBack(null);
                    continue;
                }
                var clippingContext = this.findSameClip(drawableMasks[i], drawableMaskCounts[i]);
                if (clippingContext == null) {
                    clippingContext = new CubismClippingContext(this, drawableMasks[i], drawableMaskCounts[i]);
                    this._clippingContextListForMask.pushBack(clippingContext);
                }
                clippingContext.addClippedDrawable(i);
                this._clippingContextListForDraw.pushBack(clippingContext);
            }
        };
        CubismClippingManager_WebGL.prototype.setupClippingContext = function (model, renderer) {
            this._currentFrameNo++;
            var usingClipCount = 0;
            for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {
                var cc = this._clippingContextListForMask.at(clipIndex);
                this.calcClippedDrawTotalBounds(model, cc);
                if (cc._isUsing) {
                    usingClipCount++;
                }
            }
            if (usingClipCount > 0) {
                this.gl.viewport(0, 0, this._clippingMaskBufferSize, this._clippingMaskBufferSize);
                this._maskRenderTexture = this.getMaskRenderTexture();
                var modelToWorldF = renderer.getMvpMatrix();
                renderer.preDraw();
                this.setupLayoutBounds(usingClipCount);
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._maskRenderTexture);
                this.gl.clearColor(1.0, 1.0, 1.0, 1.0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
                for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {
                    var clipContext = this._clippingContextListForMask.at(clipIndex);
                    var allClipedDrawRect = clipContext._allClippedDrawRect;
                    var layoutBoundsOnTex01 = clipContext._layoutBounds;
                    var MARGIN = 0.05;
                    this._tmpBoundsOnModel.setRect(allClipedDrawRect);
                    this._tmpBoundsOnModel.expand(allClipedDrawRect.width * MARGIN, allClipedDrawRect.height * MARGIN);
                    var scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;
                    var scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;
                    {
                        this._tmpMatrix.loadIdentity();
                        {
                            this._tmpMatrix.translateRelative(-1.0, -1.0);
                            this._tmpMatrix.scaleRelative(2.0, 2.0);
                        }
                        {
                            this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);
                            this._tmpMatrix.scaleRelative(scaleX, scaleY);
                            this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);
                        }
                        this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());
                    }
                    {
                        this._tmpMatrix.loadIdentity();
                        {
                            this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);
                            this._tmpMatrix.scaleRelative(scaleX, scaleY);
                            this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);
                        }
                        this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());
                    }
                    clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());
                    clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());
                    var clipDrawCount = clipContext._clippingIdCount;
                    for (var i = 0; i < clipDrawCount; i++) {
                        var clipDrawIndex = clipContext._clippingIdList[i];
                        if (!model.getDrawableDynamicFlagVertexPositionsDidChange(clipDrawIndex)) {
                            continue;
                        }
                        renderer.setIsCulling(model.getDrawableCulling(clipDrawIndex) != false);
                        renderer.setClippingContextBufferForMask(clipContext);
                        renderer.drawMesh(model.getDrawableTextureIndices(clipDrawIndex), model.getDrawableVertexIndexCount(clipDrawIndex), model.getDrawableVertexCount(clipDrawIndex), model.getDrawableVertexIndices(clipDrawIndex), model.getDrawableVertices(clipDrawIndex), model.getDrawableVertexUvs(clipDrawIndex), model.getDrawableOpacity(clipDrawIndex), cubismrenderer_1.CubismBlendMode.CubismBlendMode_Normal, false);
                    }
                }
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);
                renderer.setClippingContextBufferForMask(null);
                this.gl.viewport(s_viewport[0], s_viewport[1], s_viewport[2], s_viewport[3]);
            }
        };
        CubismClippingManager_WebGL.prototype.findSameClip = function (drawableMasks, drawableMaskCounts) {
            for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {
                var clippingContext = this._clippingContextListForMask.at(i);
                var count = clippingContext._clippingIdCount;
                if (count != drawableMaskCounts) {
                    continue;
                }
                var sameCount = 0;
                for (var j = 0; j < count; j++) {
                    var clipId = clippingContext._clippingIdList[j];
                    for (var k = 0; k < count; k++) {
                        if (drawableMasks[k] == clipId) {
                            sameCount++;
                            break;
                        }
                    }
                }
                if (sameCount == count) {
                    return clippingContext;
                }
            }
            return null;
        };
        CubismClippingManager_WebGL.prototype.setupLayoutBounds = function (usingClipCount) {
            var div = usingClipCount / ColorChannelCount;
            var mod = usingClipCount % ColorChannelCount;
            div = ~~div;
            mod = ~~mod;
            var curClipIndex = 0;
            for (var channelNo = 0; channelNo < ColorChannelCount; channelNo++) {
                var layoutCount = div + (channelNo < mod ? 1 : 0);
                if (layoutCount == 0) {
                }
                else if (layoutCount == 1) {
                    var clipContext = this._clippingContextListForMask.at(curClipIndex++);
                    clipContext._layoutChannelNo = channelNo;
                    clipContext._layoutBounds.x = 0.0;
                    clipContext._layoutBounds.y = 0.0;
                    clipContext._layoutBounds.width = 1.0;
                    clipContext._layoutBounds.height = 1.0;
                }
                else if (layoutCount == 2) {
                    for (var i = 0; i < layoutCount; i++) {
                        var xpos = i % 2;
                        xpos = ~~xpos;
                        var cc = this._clippingContextListForMask.at(curClipIndex++);
                        cc._layoutChannelNo = channelNo;
                        cc._layoutBounds.x = xpos * 0.5;
                        cc._layoutBounds.y = 0.0;
                        cc._layoutBounds.width = 0.5;
                        cc._layoutBounds.height = 1.0;
                    }
                }
                else if (layoutCount <= 4) {
                    for (var i = 0; i < layoutCount; i++) {
                        var xpos = i % 2;
                        var ypos = i / 2;
                        xpos = ~~xpos;
                        ypos = ~~ypos;
                        var cc = this._clippingContextListForMask.at(curClipIndex++);
                        cc._layoutChannelNo = channelNo;
                        cc._layoutBounds.x = xpos * 0.5;
                        cc._layoutBounds.y = ypos * 0.5;
                        cc._layoutBounds.width = 0.5;
                        cc._layoutBounds.height = 0.5;
                    }
                }
                else if (layoutCount <= 9) {
                    for (var i = 0; i < layoutCount; i++) {
                        var xpos = i % 3;
                        var ypos = i / 3;
                        xpos = ~~xpos;
                        ypos = ~~ypos;
                        var cc = this._clippingContextListForMask.at(curClipIndex++);
                        cc._layoutChannelNo = channelNo;
                        cc._layoutBounds.x = xpos / 3.0;
                        cc._layoutBounds.y = ypos / 3.0;
                        cc._layoutBounds.width = 1.0 / 3.0;
                        cc._layoutBounds.height = 1.0 / 3.0;
                    }
                }
                else {
                    (0, cubismdebug_1.CubismLogError)('not supported mask count : {0}', layoutCount);
                }
            }
        };
        CubismClippingManager_WebGL.prototype.getColorBuffer = function () {
            return this._colorBuffer;
        };
        CubismClippingManager_WebGL.prototype.getClippingContextListForDraw = function () {
            return this._clippingContextListForDraw;
        };
        CubismClippingManager_WebGL.prototype.setClippingMaskBufferSize = function (size) {
            this._clippingMaskBufferSize = size;
        };
        CubismClippingManager_WebGL.prototype.getClippingMaskBufferSize = function () {
            return this._clippingMaskBufferSize;
        };
        return CubismClippingManager_WebGL;
    }());
    exports.CubismClippingManager_WebGL = CubismClippingManager_WebGL;
    var CubismRenderTextureResource = (function () {
        function CubismRenderTextureResource(frameNo, texture) {
            this.frameNo = frameNo;
            this.texture = texture;
        }
        return CubismRenderTextureResource;
    }());
    exports.CubismRenderTextureResource = CubismRenderTextureResource;
    var CubismClippingContext = (function () {
        function CubismClippingContext(manager, clippingDrawableIndices, clipCount) {
            this._owner = manager;
            this._clippingIdList = clippingDrawableIndices;
            this._clippingIdCount = clipCount;
            this._allClippedDrawRect = new csmrectf_1.csmRect();
            this._layoutBounds = new csmrectf_1.csmRect();
            this._clippedDrawableIndexList = [];
            this._matrixForMask = new cubismmatrix44_1.CubismMatrix44();
            this._matrixForDraw = new cubismmatrix44_1.CubismMatrix44();
        }
        CubismClippingContext.prototype.release = function () {
            if (this._layoutBounds != null) {
                this._layoutBounds = null;
            }
            if (this._allClippedDrawRect != null) {
                this._allClippedDrawRect = null;
            }
            if (this._clippedDrawableIndexList != null) {
                this._clippedDrawableIndexList = null;
            }
        };
        CubismClippingContext.prototype.addClippedDrawable = function (drawableIndex) {
            this._clippedDrawableIndexList.push(drawableIndex);
        };
        CubismClippingContext.prototype.getClippingManager = function () {
            return this._owner;
        };
        CubismClippingContext.prototype.setGl = function (gl) {
            this._owner.setGL(gl);
        };
        return CubismClippingContext;
    }());
    exports.CubismClippingContext = CubismClippingContext;
    var CubismShader_WebGL = (function () {
        function CubismShader_WebGL() {
            this._shaderSets = new csmvector_1.csmVector();
        }
        CubismShader_WebGL.getInstance = function () {
            if (s_instance == null) {
                s_instance = new CubismShader_WebGL();
                return s_instance;
            }
            return s_instance;
        };
        CubismShader_WebGL.deleteInstance = function () {
            if (s_instance) {
                s_instance.release();
                s_instance = null;
            }
        };
        CubismShader_WebGL.prototype.release = function () {
            this.releaseShaderProgram();
        };
        CubismShader_WebGL.prototype.setupShaderProgram = function (renderer, textureId, vertexCount, vertexArray, indexArray, uvArray, bufferData, opacity, colorBlendMode, baseColor, isPremultipliedAlpha, matrix4x4, invertedMask) {
            if (!isPremultipliedAlpha) {
                (0, cubismdebug_1.CubismLogError)('NoPremultipliedAlpha is not allowed');
            }
            if (this._shaderSets.getSize() == 0) {
                this.generateShaders();
            }
            var SRC_COLOR;
            var DST_COLOR;
            var SRC_ALPHA;
            var DST_ALPHA;
            if (renderer.getClippingContextBufferForMask() != null) {
                var shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_SetupMask);
                this.gl.useProgram(shaderSet.shaderProgram);
                this.gl.activeTexture(this.gl.TEXTURE0);
                this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);
                this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);
                if (bufferData.vertex == null) {
                    bufferData.vertex = this.gl.createBuffer();
                }
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);
                this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);
                this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);
                this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);
                if (bufferData.uv == null) {
                    bufferData.uv = this.gl.createBuffer();
                }
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);
                this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);
                this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);
                this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);
                var channelNo = renderer.getClippingContextBufferForMask()
                    ._layoutChannelNo;
                var colorChannel = renderer
                    .getClippingContextBufferForMask()
                    .getClippingManager()
                    .getChannelFlagAsColor(channelNo);
                this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);
                this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForMask()._matrixForMask.getArray());
                var rect = renderer.getClippingContextBufferForMask()
                    ._layoutBounds;
                this.gl.uniform4f(shaderSet.uniformBaseColorLocation, rect.x * 2.0 - 1.0, rect.y * 2.0 - 1.0, rect.getRight() * 2.0 - 1.0, rect.getBottom() * 2.0 - 1.0);
                SRC_COLOR = this.gl.ZERO;
                DST_COLOR = this.gl.ONE_MINUS_SRC_COLOR;
                SRC_ALPHA = this.gl.ZERO;
                DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;
            }
            else {
                var masked = renderer.getClippingContextBufferForDraw() != null;
                var offset = masked ? (invertedMask ? 2 : 1) : 0;
                var shaderSet = new CubismShaderSet();
                switch (colorBlendMode) {
                    case cubismrenderer_1.CubismBlendMode.CubismBlendMode_Normal:
                    default:
                        shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset);
                        SRC_COLOR = this.gl.ONE;
                        DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;
                        SRC_ALPHA = this.gl.ONE;
                        DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;
                        break;
                    case cubismrenderer_1.CubismBlendMode.CubismBlendMode_Additive:
                        shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_AddPremultipliedAlpha + offset);
                        SRC_COLOR = this.gl.ONE;
                        DST_COLOR = this.gl.ONE;
                        SRC_ALPHA = this.gl.ZERO;
                        DST_ALPHA = this.gl.ONE;
                        break;
                    case cubismrenderer_1.CubismBlendMode.CubismBlendMode_Multiplicative:
                        shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_MultPremultipliedAlpha + offset);
                        SRC_COLOR = this.gl.DST_COLOR;
                        DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;
                        SRC_ALPHA = this.gl.ZERO;
                        DST_ALPHA = this.gl.ONE;
                        break;
                }
                this.gl.useProgram(shaderSet.shaderProgram);
                if (bufferData.vertex == null) {
                    bufferData.vertex = this.gl.createBuffer();
                }
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);
                this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);
                this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);
                this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);
                if (bufferData.uv == null) {
                    bufferData.uv = this.gl.createBuffer();
                }
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);
                this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);
                this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);
                this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);
                if (masked) {
                    this.gl.activeTexture(this.gl.TEXTURE1);
                    var tex = renderer
                        .getClippingContextBufferForDraw()
                        .getClippingManager()
                        .getColorBuffer();
                    this.gl.bindTexture(this.gl.TEXTURE_2D, tex);
                    this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);
                    this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForDraw()._matrixForDraw.getArray());
                    var channelNo = renderer.getClippingContextBufferForDraw()
                        ._layoutChannelNo;
                    var colorChannel = renderer
                        .getClippingContextBufferForDraw()
                        .getClippingManager()
                        .getChannelFlagAsColor(channelNo);
                    this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);
                }
                this.gl.activeTexture(this.gl.TEXTURE0);
                this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);
                this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);
                this.gl.uniformMatrix4fv(shaderSet.uniformMatrixLocation, false, matrix4x4.getArray());
                this.gl.uniform4f(shaderSet.uniformBaseColorLocation, baseColor.R, baseColor.G, baseColor.B, baseColor.A);
            }
            if (bufferData.index == null) {
                bufferData.index = this.gl.createBuffer();
            }
            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, bufferData.index);
            this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, indexArray, this.gl.DYNAMIC_DRAW);
            this.gl.blendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);
        };
        CubismShader_WebGL.prototype.releaseShaderProgram = function () {
            for (var i = 0; i < this._shaderSets.getSize(); i++) {
                this.gl.deleteProgram(this._shaderSets.at(i).shaderProgram);
                this._shaderSets.at(i).shaderProgram = 0;
                this._shaderSets.set(i, void 0);
                this._shaderSets.set(i, null);
            }
        };
        CubismShader_WebGL.prototype.generateShaders = function () {
            for (var i = 0; i < shaderCount; i++) {
                this._shaderSets.pushBack(new CubismShaderSet());
            }
            this._shaderSets.at(0).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrcSetupMask, exports.fragmentShaderSrcsetupMask);
            this._shaderSets.at(1).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrc, exports.fragmentShaderSrcPremultipliedAlpha);
            this._shaderSets.at(2).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrcMasked, exports.fragmentShaderSrcMaskPremultipliedAlpha);
            this._shaderSets.at(3).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrcMasked, exports.fragmentShaderSrcMaskInvertedPremultipliedAlpha);
            this._shaderSets.at(4).shaderProgram = this._shaderSets.at(1).shaderProgram;
            this._shaderSets.at(5).shaderProgram = this._shaderSets.at(2).shaderProgram;
            this._shaderSets.at(6).shaderProgram = this._shaderSets.at(3).shaderProgram;
            this._shaderSets.at(7).shaderProgram = this._shaderSets.at(1).shaderProgram;
            this._shaderSets.at(8).shaderProgram = this._shaderSets.at(2).shaderProgram;
            this._shaderSets.at(9).shaderProgram = this._shaderSets.at(3).shaderProgram;
            this._shaderSets.at(0).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_position');
            this._shaderSets.at(0).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_texCoord');
            this._shaderSets.at(0).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 's_texture0');
            this._shaderSets.at(0).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_clipMatrix');
            this._shaderSets.at(0).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_channelFlag');
            this._shaderSets.at(0).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_baseColor');
            this._shaderSets.at(1).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_position');
            this._shaderSets.at(1).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_texCoord');
            this._shaderSets.at(1).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 's_texture0');
            this._shaderSets.at(1).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_matrix');
            this._shaderSets.at(1).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_baseColor');
            this._shaderSets.at(2).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_position');
            this._shaderSets.at(2).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_texCoord');
            this._shaderSets.at(2).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture0');
            this._shaderSets.at(2).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture1');
            this._shaderSets.at(2).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_matrix');
            this._shaderSets.at(2).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_clipMatrix');
            this._shaderSets.at(2).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_channelFlag');
            this._shaderSets.at(2).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_baseColor');
            this._shaderSets.at(3).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_position');
            this._shaderSets.at(3).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_texCoord');
            this._shaderSets.at(3).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture0');
            this._shaderSets.at(3).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture1');
            this._shaderSets.at(3).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_matrix');
            this._shaderSets.at(3).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_clipMatrix');
            this._shaderSets.at(3).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_channelFlag');
            this._shaderSets.at(3).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_baseColor');
            this._shaderSets.at(4).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_position');
            this._shaderSets.at(4).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_texCoord');
            this._shaderSets.at(4).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 's_texture0');
            this._shaderSets.at(4).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_matrix');
            this._shaderSets.at(4).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_baseColor');
            this._shaderSets.at(5).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_position');
            this._shaderSets.at(5).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_texCoord');
            this._shaderSets.at(5).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture0');
            this._shaderSets.at(5).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture1');
            this._shaderSets.at(5).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_matrix');
            this._shaderSets.at(5).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_clipMatrix');
            this._shaderSets.at(5).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_channelFlag');
            this._shaderSets.at(5).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_baseColor');
            this._shaderSets.at(6).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_position');
            this._shaderSets.at(6).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_texCoord');
            this._shaderSets.at(6).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture0');
            this._shaderSets.at(6).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture1');
            this._shaderSets.at(6).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_matrix');
            this._shaderSets.at(6).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_clipMatrix');
            this._shaderSets.at(6).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_channelFlag');
            this._shaderSets.at(6).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_baseColor');
            this._shaderSets.at(7).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_position');
            this._shaderSets.at(7).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_texCoord');
            this._shaderSets.at(7).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 's_texture0');
            this._shaderSets.at(7).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_matrix');
            this._shaderSets.at(7).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_baseColor');
            this._shaderSets.at(8).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_position');
            this._shaderSets.at(8).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_texCoord');
            this._shaderSets.at(8).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture0');
            this._shaderSets.at(8).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture1');
            this._shaderSets.at(8).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_matrix');
            this._shaderSets.at(8).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_clipMatrix');
            this._shaderSets.at(8).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_channelFlag');
            this._shaderSets.at(8).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_baseColor');
            this._shaderSets.at(9).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_position');
            this._shaderSets.at(9).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_texCoord');
            this._shaderSets.at(9).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture0');
            this._shaderSets.at(9).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture1');
            this._shaderSets.at(9).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_matrix');
            this._shaderSets.at(9).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_clipMatrix');
            this._shaderSets.at(9).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_channelFlag');
            this._shaderSets.at(9).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_baseColor');
        };
        CubismShader_WebGL.prototype.loadShaderProgram = function (vertexShaderSource, fragmentShaderSource) {
            var shaderProgram = this.gl.createProgram();
            var vertShader = this.compileShaderSource(this.gl.VERTEX_SHADER, vertexShaderSource);
            if (!vertShader) {
                (0, cubismdebug_1.CubismLogError)('Vertex shader compile error!');
                return 0;
            }
            var fragShader = this.compileShaderSource(this.gl.FRAGMENT_SHADER, fragmentShaderSource);
            if (!fragShader) {
                (0, cubismdebug_1.CubismLogError)('Vertex shader compile error!');
                return 0;
            }
            this.gl.attachShader(shaderProgram, vertShader);
            this.gl.attachShader(shaderProgram, fragShader);
            this.gl.linkProgram(shaderProgram);
            var linkStatus = this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS);
            if (!linkStatus) {
                (0, cubismdebug_1.CubismLogError)('Failed to link program: {0}', shaderProgram);
                this.gl.deleteShader(vertShader);
                vertShader = 0;
                this.gl.deleteShader(fragShader);
                fragShader = 0;
                if (shaderProgram) {
                    this.gl.deleteProgram(shaderProgram);
                    shaderProgram = 0;
                }
                return 0;
            }
            this.gl.deleteShader(vertShader);
            this.gl.deleteShader(fragShader);
            return shaderProgram;
        };
        CubismShader_WebGL.prototype.compileShaderSource = function (shaderType, shaderSource) {
            var source = shaderSource;
            var shader = this.gl.createShader(shaderType);
            this.gl.shaderSource(shader, source);
            this.gl.compileShader(shader);
            if (!shader) {
                var log = this.gl.getShaderInfoLog(shader);
                (0, cubismdebug_1.CubismLogError)('Shader compile log: {0} ', log);
            }
            var status = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);
            if (!status) {
                this.gl.deleteShader(shader);
                return null;
            }
            return shader;
        };
        CubismShader_WebGL.prototype.setGl = function (gl) {
            this.gl = gl;
        };
        return CubismShader_WebGL;
    }());
    exports.CubismShader_WebGL = CubismShader_WebGL;
    var CubismShaderSet = (function () {
        function CubismShaderSet() {
        }
        return CubismShaderSet;
    }());
    exports.CubismShaderSet = CubismShaderSet;
    var ShaderNames;
    (function (ShaderNames) {
        ShaderNames[ShaderNames["ShaderNames_SetupMask"] = 0] = "ShaderNames_SetupMask";
        ShaderNames[ShaderNames["ShaderNames_NormalPremultipliedAlpha"] = 1] = "ShaderNames_NormalPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_NormalMaskedPremultipliedAlpha"] = 2] = "ShaderNames_NormalMaskedPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_NomralMaskedInvertedPremultipliedAlpha"] = 3] = "ShaderNames_NomralMaskedInvertedPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_AddPremultipliedAlpha"] = 4] = "ShaderNames_AddPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_AddMaskedPremultipliedAlpha"] = 5] = "ShaderNames_AddMaskedPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_AddMaskedPremultipliedAlphaInverted"] = 6] = "ShaderNames_AddMaskedPremultipliedAlphaInverted";
        ShaderNames[ShaderNames["ShaderNames_MultPremultipliedAlpha"] = 7] = "ShaderNames_MultPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_MultMaskedPremultipliedAlpha"] = 8] = "ShaderNames_MultMaskedPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_MultMaskedPremultipliedAlphaInverted"] = 9] = "ShaderNames_MultMaskedPremultipliedAlphaInverted";
    })(ShaderNames = exports.ShaderNames || (exports.ShaderNames = {}));
    exports.vertexShaderSrcSetupMask = 'attribute vec4     a_position;' +
        'attribute vec2     a_texCoord;' +
        'varying vec2       v_texCoord;' +
        'varying vec4       v_myPos;' +
        'uniform mat4       u_clipMatrix;' +
        'void main()' +
        '{' +
        '   gl_Position = u_clipMatrix * a_position;' +
        '   v_myPos = u_clipMatrix * a_position;' +
        '   v_texCoord = a_texCoord;' +
        '   v_texCoord.y = 1.0 - v_texCoord.y;' +
        '}';
    exports.fragmentShaderSrcsetupMask = 'precision mediump float;' +
        'varying vec2       v_texCoord;' +
        'varying vec4       v_myPos;' +
        'uniform vec4       u_baseColor;' +
        'uniform vec4       u_channelFlag;' +
        'uniform sampler2D  s_texture0;' +
        'void main()' +
        '{' +
        '   float isInside = ' +
        '       step(u_baseColor.x, v_myPos.x/v_myPos.w)' +
        '       * step(u_baseColor.y, v_myPos.y/v_myPos.w)' +
        '       * step(v_myPos.x/v_myPos.w, u_baseColor.z)' +
        '       * step(v_myPos.y/v_myPos.w, u_baseColor.w);' +
        '   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;' +
        '}';
    exports.vertexShaderSrc = 'attribute vec4     a_position;' +
        'attribute vec2     a_texCoord;' +
        'varying vec2       v_texCoord;' +
        'uniform mat4       u_matrix;' +
        'void main()' +
        '{' +
        '   gl_Position = u_matrix * a_position;' +
        '   v_texCoord = a_texCoord;' +
        '   v_texCoord.y = 1.0 - v_texCoord.y;' +
        '}';
    exports.vertexShaderSrcMasked = 'attribute vec4     a_position;' +
        'attribute vec2     a_texCoord;' +
        'varying vec2       v_texCoord;' +
        'varying vec4       v_clipPos;' +
        'uniform mat4       u_matrix;' +
        'uniform mat4       u_clipMatrix;' +
        'void main()' +
        '{' +
        '   gl_Position = u_matrix * a_position;' +
        '   v_clipPos = u_clipMatrix * a_position;' +
        '   v_texCoord = a_texCoord;' +
        '   v_texCoord.y = 1.0 - v_texCoord.y;' +
        '}';
    exports.fragmentShaderSrcPremultipliedAlpha = 'precision mediump float;' +
        'varying vec2       v_texCoord;' +
        'uniform vec4       u_baseColor;' +
        'uniform sampler2D  s_texture0;' +
        'void main()' +
        '{' +
        '   gl_FragColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;' +
        '}';
    exports.fragmentShaderSrcMaskPremultipliedAlpha = 'precision mediump float;' +
        'varying vec2       v_texCoord;' +
        'varying vec4       v_clipPos;' +
        'uniform vec4       u_baseColor;' +
        'uniform vec4       u_channelFlag;' +
        'uniform sampler2D  s_texture0;' +
        'uniform sampler2D  s_texture1;' +
        'void main()' +
        '{' +
        '   vec4 col_formask = texture2D(s_texture0 , v_texCoord) * u_baseColor;' +
        '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +
        '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +
        '   col_formask = col_formask * maskVal;' +
        '   gl_FragColor = col_formask;' +
        '}';
    exports.fragmentShaderSrcMaskInvertedPremultipliedAlpha = 'precision mediump float;' +
        'varying vec2 v_texCoord;' +
        'varying vec4 v_clipPos;' +
        'uniform sampler2D s_texture0;' +
        'uniform sampler2D s_texture1;' +
        'uniform vec4 u_channelFlag;' +
        'uniform vec4 u_baseColor;' +
        'void main()' +
        '{' +
        'vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;' +
        'vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +
        'float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +
        'col_formask = col_formask * (1.0 - maskVal);' +
        'gl_FragColor = col_formask;' +
        '}';
    var CubismRenderer_WebGL = (function (_super) {
        __extends(CubismRenderer_WebGL, _super);
        function CubismRenderer_WebGL() {
            var _this = _super.call(this) || this;
            _this._clippingContextBufferForMask = null;
            _this._clippingContextBufferForDraw = null;
            _this._clippingManager = new CubismClippingManager_WebGL();
            _this.firstDraw = true;
            _this._textures = new csmmap_1.csmMap();
            _this._sortedDrawableIndexList = new csmvector_1.csmVector();
            _this._bufferData = {
                vertex: WebGLBuffer = null,
                uv: WebGLBuffer = null,
                index: WebGLBuffer = null
            };
            _this._textures.prepareCapacity(32, true);
            return _this;
        }
        CubismRenderer_WebGL.prototype.initialize = function (model) {
            if (model.isUsingMasking()) {
                this._clippingManager = new CubismClippingManager_WebGL();
                this._clippingManager.initialize(model, model.getDrawableCount(), model.getDrawableMasks(), model.getDrawableMaskCounts());
            }
            this._sortedDrawableIndexList.resize(model.getDrawableCount(), 0);
            _super.prototype.initialize.call(this, model);
        };
        CubismRenderer_WebGL.prototype.bindTexture = function (modelTextureNo, glTexture) {
            this._textures.setValue(modelTextureNo, glTexture);
        };
        CubismRenderer_WebGL.prototype.getBindedTextures = function () {
            return this._textures;
        };
        CubismRenderer_WebGL.prototype.setClippingMaskBufferSize = function (size) {
            this._clippingManager.release();
            this._clippingManager = void 0;
            this._clippingManager = null;
            this._clippingManager = new CubismClippingManager_WebGL();
            this._clippingManager.setClippingMaskBufferSize(size);
            this._clippingManager.initialize(this.getModel(), this.getModel().getDrawableCount(), this.getModel().getDrawableMasks(), this.getModel().getDrawableMaskCounts());
        };
        CubismRenderer_WebGL.prototype.getClippingMaskBufferSize = function () {
            return this._clippingManager.getClippingMaskBufferSize();
        };
        CubismRenderer_WebGL.prototype.release = function () {
            this._clippingManager.release();
            this._clippingManager = void 0;
            this._clippingManager = null;
            this.gl.deleteBuffer(this._bufferData.vertex);
            this._bufferData.vertex = null;
            this.gl.deleteBuffer(this._bufferData.uv);
            this._bufferData.uv = null;
            this.gl.deleteBuffer(this._bufferData.index);
            this._bufferData.index = null;
            this._bufferData = null;
            this._textures = null;
        };
        CubismRenderer_WebGL.prototype.doDrawModel = function () {
            if (this._clippingManager != null) {
                this.preDraw();
                this._clippingManager.setupClippingContext(this.getModel(), this);
            }
            this.preDraw();
            var drawableCount = this.getModel().getDrawableCount();
            var renderOrder = this.getModel().getDrawableRenderOrders();
            for (var i = 0; i < drawableCount; ++i) {
                var order = renderOrder[i];
                this._sortedDrawableIndexList.set(order, i);
            }
            for (var i = 0; i < drawableCount; ++i) {
                var drawableIndex = this._sortedDrawableIndexList.at(i);
                if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {
                    continue;
                }
                this.setClippingContextBufferForDraw(this._clippingManager != null
                    ? this._clippingManager
                        .getClippingContextListForDraw()
                        .at(drawableIndex)
                    : null);
                this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));
                this.drawMesh(this.getModel().getDrawableTextureIndices(drawableIndex), this.getModel().getDrawableVertexIndexCount(drawableIndex), this.getModel().getDrawableVertexCount(drawableIndex), this.getModel().getDrawableVertexIndices(drawableIndex), this.getModel().getDrawableVertices(drawableIndex), this.getModel().getDrawableVertexUvs(drawableIndex), this.getModel().getDrawableOpacity(drawableIndex), this.getModel().getDrawableBlendMode(drawableIndex), this.getModel().getDrawableInvertedMaskBit(drawableIndex));
            }
        };
        CubismRenderer_WebGL.prototype.drawMesh = function (textureNo, indexCount, vertexCount, indexArray, vertexArray, uvArray, opacity, colorBlendMode, invertedMask) {
            if (this.isCulling()) {
                this.gl.enable(this.gl.CULL_FACE);
            }
            else {
                this.gl.disable(this.gl.CULL_FACE);
            }
            this.gl.frontFace(this.gl.CCW);
            var modelColorRGBA = this.getModelColor();
            if (this.getClippingContextBufferForMask() == null) {
                modelColorRGBA.A *= opacity;
                if (this.isPremultipliedAlpha()) {
                    modelColorRGBA.R *= modelColorRGBA.A;
                    modelColorRGBA.G *= modelColorRGBA.A;
                    modelColorRGBA.B *= modelColorRGBA.A;
                }
            }
            var drawtexture;
            if (this._textures.getValue(textureNo) != null) {
                drawtexture = this._textures.getValue(textureNo);
            }
            else {
                drawtexture = null;
            }
            CubismShader_WebGL.getInstance().setupShaderProgram(this, drawtexture, vertexCount, vertexArray, indexArray, uvArray, this._bufferData, opacity, colorBlendMode, modelColorRGBA, this.isPremultipliedAlpha(), this.getMvpMatrix(), invertedMask);
            this.gl.drawElements(this.gl.TRIANGLES, indexCount, this.gl.UNSIGNED_SHORT, 0);
            this.gl.useProgram(null);
            this.setClippingContextBufferForDraw(null);
            this.setClippingContextBufferForMask(null);
        };
        CubismRenderer_WebGL.doStaticRelease = function () {
            CubismShader_WebGL.deleteInstance();
        };
        CubismRenderer_WebGL.prototype.setRenderState = function (fbo, viewport) {
            s_fbo = fbo;
            s_viewport = viewport;
        };
        CubismRenderer_WebGL.prototype.preDraw = function () {
            if (this.firstDraw) {
                this.firstDraw = false;
                this._anisortopy =
                    this.gl.getExtension('EXT_texture_filter_anisotropic') ||
                        this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic') ||
                        this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic');
            }
            this.gl.disable(this.gl.SCISSOR_TEST);
            this.gl.disable(this.gl.STENCIL_TEST);
            this.gl.disable(this.gl.DEPTH_TEST);
            this.gl.frontFace(this.gl.CW);
            this.gl.enable(this.gl.BLEND);
            this.gl.colorMask(true, true, true, true);
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        };
        CubismRenderer_WebGL.prototype.setClippingContextBufferForMask = function (clip) {
            this._clippingContextBufferForMask = clip;
        };
        CubismRenderer_WebGL.prototype.getClippingContextBufferForMask = function () {
            return this._clippingContextBufferForMask;
        };
        CubismRenderer_WebGL.prototype.setClippingContextBufferForDraw = function (clip) {
            this._clippingContextBufferForDraw = clip;
        };
        CubismRenderer_WebGL.prototype.getClippingContextBufferForDraw = function () {
            return this._clippingContextBufferForDraw;
        };
        CubismRenderer_WebGL.prototype.startUp = function (gl) {
            this.gl = gl;
            this._clippingManager.setGL(gl);
            CubismShader_WebGL.getInstance().setGl(gl);
        };
        return CubismRenderer_WebGL;
    }(cubismrenderer_1.CubismRenderer));
    exports.CubismRenderer_WebGL = CubismRenderer_WebGL;
    cubismrenderer_1.CubismRenderer.staticRelease = function () {
        CubismRenderer_WebGL.doStaticRelease();
    };
    var $ = __importStar(__webpack_require__(/*! ./cubismrenderer_webgl */ "../../../Framework/src/rendering/cubismrenderer_webgl.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismClippingContext = $.CubismClippingContext;
        Live2DCubismFramework.CubismClippingManager_WebGL = $.CubismClippingManager_WebGL;
        Live2DCubismFramework.CubismRenderTextureResource = $.CubismRenderTextureResource;
        Live2DCubismFramework.CubismRenderer_WebGL = $.CubismRenderer_WebGL;
        Live2DCubismFramework.CubismShaderSet = $.CubismShaderSet;
        Live2DCubismFramework.CubismShader_WebGL = $.CubismShader_WebGL;
        Live2DCubismFramework.ShaderNames = $.ShaderNames;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/type/csmmap.ts":
    /*!*********************************************!*\
      !*** ../../../Framework/src/type/csmmap.ts ***!
      \*********************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.iterator = exports.csmMap = exports.csmPair = void 0;
    var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
    var csmPair = (function () {
        function csmPair(key, value) {
            this.first = key == undefined ? null : key;
            this.second = value == undefined ? null : value;
        }
        return csmPair;
    }());
    exports.csmPair = csmPair;
    var csmMap = (function () {
        function csmMap(size) {
            if (size != undefined) {
                if (size < 1) {
                    this._keyValues = [];
                    this._dummyValue = null;
                    this._size = 0;
                }
                else {
                    this._keyValues = new Array(size);
                    this._size = size;
                }
            }
            else {
                this._keyValues = [];
                this._dummyValue = null;
                this._size = 0;
            }
        }
        csmMap.prototype.release = function () {
            this.clear();
        };
        csmMap.prototype.appendKey = function (key) {
            this.prepareCapacity(this._size + 1, false);
            this._keyValues[this._size] = new csmPair(key);
            this._size += 1;
        };
        csmMap.prototype.getValue = function (key) {
            var found = -1;
            for (var i = 0; i < this._size; i++) {
                if (this._keyValues[i].first == key) {
                    found = i;
                    break;
                }
            }
            if (found >= 0) {
                return this._keyValues[found].second;
            }
            else {
                this.appendKey(key);
                return this._keyValues[this._size - 1].second;
            }
        };
        csmMap.prototype.setValue = function (key, value) {
            var found = -1;
            for (var i = 0; i < this._size; i++) {
                if (this._keyValues[i].first == key) {
                    found = i;
                    break;
                }
            }
            if (found >= 0) {
                this._keyValues[found].second = value;
            }
            else {
                this.appendKey(key);
                this._keyValues[this._size - 1].second = value;
            }
        };
        csmMap.prototype.isExist = function (key) {
            for (var i = 0; i < this._size; i++) {
                if (this._keyValues[i].first == key) {
                    return true;
                }
            }
            return false;
        };
        csmMap.prototype.clear = function () {
            this._keyValues = void 0;
            this._keyValues = null;
            this._keyValues = [];
            this._size = 0;
        };
        csmMap.prototype.getSize = function () {
            return this._size;
        };
        csmMap.prototype.prepareCapacity = function (newSize, fitToSize) {
            if (newSize > this._keyValues.length) {
                if (this._keyValues.length == 0) {
                    if (!fitToSize && newSize < csmMap.DefaultSize)
                        newSize = csmMap.DefaultSize;
                    this._keyValues.length = newSize;
                }
                else {
                    if (!fitToSize && newSize < this._keyValues.length * 2)
                        newSize = this._keyValues.length * 2;
                    this._keyValues.length = newSize;
                }
            }
        };
        csmMap.prototype.begin = function () {
            var ite = new iterator(this, 0);
            return ite;
        };
        csmMap.prototype.end = function () {
            var ite = new iterator(this, this._size);
            return ite;
        };
        csmMap.prototype.erase = function (ite) {
            var index = ite._index;
            if (index < 0 || this._size <= index) {
                return ite;
            }
            this._keyValues.splice(index, 1);
            --this._size;
            var ite2 = new iterator(this, index);
            return ite2;
        };
        csmMap.prototype.dumpAsInt = function () {
            for (var i = 0; i < this._size; i++) {
                (0, cubismdebug_1.CubismLogDebug)('{0} ,', this._keyValues[i]);
                (0, cubismdebug_1.CubismLogDebug)('\n');
            }
        };
        csmMap.DefaultSize = 10;
        return csmMap;
    }());
    exports.csmMap = csmMap;
    var iterator = (function () {
        function iterator(v, idx) {
            this._map = v != undefined ? v : new csmMap();
            this._index = idx != undefined ? idx : 0;
        }
        iterator.prototype.set = function (ite) {
            this._index = ite._index;
            this._map = ite._map;
            return this;
        };
        iterator.prototype.preIncrement = function () {
            ++this._index;
            return this;
        };
        iterator.prototype.preDecrement = function () {
            --this._index;
            return this;
        };
        iterator.prototype.increment = function () {
            var iteold = new iterator(this._map, this._index++);
            return iteold;
        };
        iterator.prototype.decrement = function () {
            var iteold = new iterator(this._map, this._index);
            this._map = iteold._map;
            this._index = iteold._index;
            return this;
        };
        iterator.prototype.ptr = function () {
            return this._map._keyValues[this._index];
        };
        iterator.prototype.notEqual = function (ite) {
            return this._index != ite._index || this._map != ite._map;
        };
        return iterator;
    }());
    exports.iterator = iterator;
    var $ = __importStar(__webpack_require__(/*! ./csmmap */ "../../../Framework/src/type/csmmap.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.csmMap = $.csmMap;
        Live2DCubismFramework.csmPair = $.csmPair;
        Live2DCubismFramework.iterator = $.iterator;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/type/csmrectf.ts":
    /*!***********************************************!*\
      !*** ../../../Framework/src/type/csmrectf.ts ***!
      \***********************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.csmRect = void 0;
    var csmRect = (function () {
        function csmRect(x, y, w, h) {
            this.x = x;
            this.y = y;
            this.width = w;
            this.height = h;
        }
        csmRect.prototype.getCenterX = function () {
            return this.x + 0.5 * this.width;
        };
        csmRect.prototype.getCenterY = function () {
            return this.y + 0.5 * this.height;
        };
        csmRect.prototype.getRight = function () {
            return this.x + this.width;
        };
        csmRect.prototype.getBottom = function () {
            return this.y + this.height;
        };
        csmRect.prototype.setRect = function (r) {
            this.x = r.x;
            this.y = r.y;
            this.width = r.width;
            this.height = r.height;
        };
        csmRect.prototype.expand = function (w, h) {
            this.x -= w;
            this.y -= h;
            this.width += w * 2.0;
            this.height += h * 2.0;
        };
        return csmRect;
    }());
    exports.csmRect = csmRect;
    var $ = __importStar(__webpack_require__(/*! ./csmrectf */ "../../../Framework/src/type/csmrectf.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.csmRect = $.csmRect;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/type/csmstring.ts":
    /*!************************************************!*\
      !*** ../../../Framework/src/type/csmstring.ts ***!
      \************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.csmString = void 0;
    var csmString = (function () {
        function csmString(s) {
            this.s = s;
        }
        csmString.prototype.append = function (c, length) {
            this.s += length !== undefined ? c.substr(0, length) : c;
            return this;
        };
        csmString.prototype.expansion = function (length, v) {
            for (var i = 0; i < length; i++) {
                this.append(v);
            }
            return this;
        };
        csmString.prototype.getBytes = function () {
            return encodeURIComponent(this.s).replace(/%../g, 'x').length;
        };
        csmString.prototype.getLength = function () {
            return this.s.length;
        };
        csmString.prototype.isLess = function (s) {
            return this.s < s.s;
        };
        csmString.prototype.isGreat = function (s) {
            return this.s > s.s;
        };
        csmString.prototype.isEqual = function (s) {
            return this.s == s;
        };
        csmString.prototype.isEmpty = function () {
            return this.s.length == 0;
        };
        return csmString;
    }());
    exports.csmString = csmString;
    var $ = __importStar(__webpack_require__(/*! ./csmstring */ "../../../Framework/src/type/csmstring.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.csmString = $.csmString;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/type/csmvector.ts":
    /*!************************************************!*\
      !*** ../../../Framework/src/type/csmvector.ts ***!
      \************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.iterator = exports.csmVector = void 0;
    var csmVector = (function () {
        function csmVector(initialCapacity) {
            if (initialCapacity === void 0) { initialCapacity = 0; }
            if (initialCapacity < 1) {
                this._ptr = [];
                this._capacity = 0;
                this._size = 0;
            }
            else {
                this._ptr = new Array(initialCapacity);
                this._capacity = initialCapacity;
                this._size = 0;
            }
        }
        csmVector.prototype.at = function (index) {
            return this._ptr[index];
        };
        csmVector.prototype.set = function (index, value) {
            this._ptr[index] = value;
        };
        csmVector.prototype.get = function (offset) {
            if (offset === void 0) { offset = 0; }
            var ret = new Array();
            for (var i = offset; i < this._size; i++) {
                ret.push(this._ptr[i]);
            }
            return ret;
        };
        csmVector.prototype.pushBack = function (value) {
            if (this._size >= this._capacity) {
                this.prepareCapacity(this._capacity == 0 ? csmVector.s_defaultSize : this._capacity * 2);
            }
            this._ptr[this._size++] = value;
        };
        csmVector.prototype.clear = function () {
            this._ptr.length = 0;
            this._size = 0;
        };
        csmVector.prototype.getSize = function () {
            return this._size;
        };
        csmVector.prototype.assign = function (newSize, value) {
            var curSize = this._size;
            if (curSize < newSize) {
                this.prepareCapacity(newSize);
            }
            for (var i = 0; i < newSize; i++) {
                this._ptr[i] = value;
            }
            this._size = newSize;
        };
        csmVector.prototype.resize = function (newSize, value) {
            if (value === void 0) { value = null; }
            this.updateSize(newSize, value, true);
        };
        csmVector.prototype.updateSize = function (newSize, value, callPlacementNew) {
            if (value === void 0) { value = null; }
            if (callPlacementNew === void 0) { callPlacementNew = true; }
            var curSize = this._size;
            if (curSize < newSize) {
                this.prepareCapacity(newSize);
                if (callPlacementNew) {
                    for (var i = this._size; i < newSize; i++) {
                        if (typeof value == 'function') {
                            this._ptr[i] = JSON.parse(JSON.stringify(new value()));
                        }
                        else {
                            this._ptr[i] = value;
                        }
                    }
                }
                else {
                    for (var i = this._size; i < newSize; i++) {
                        this._ptr[i] = value;
                    }
                }
            }
            else {
                var sub = this._size - newSize;
                this._ptr.splice(this._size - sub, sub);
            }
            this._size = newSize;
        };
        csmVector.prototype.insert = function (position, begin, end) {
            var dstSi = position._index;
            var srcSi = begin._index;
            var srcEi = end._index;
            var addCount = srcEi - srcSi;
            this.prepareCapacity(this._size + addCount);
            var addSize = this._size - dstSi;
            if (addSize > 0) {
                for (var i = 0; i < addSize; i++) {
                    this._ptr.splice(dstSi + i, 0, null);
                }
            }
            for (var i = srcSi; i < srcEi; i++, dstSi++) {
                this._ptr[dstSi] = begin._vector._ptr[i];
            }
            this._size = this._size + addCount;
        };
        csmVector.prototype.remove = function (index) {
            if (index < 0 || this._size <= index) {
                return false;
            }
            this._ptr.splice(index, 1);
            --this._size;
            return true;
        };
        csmVector.prototype.erase = function (ite) {
            var index = ite._index;
            if (index < 0 || this._size <= index) {
                return ite;
            }
            this._ptr.splice(index, 1);
            --this._size;
            var ite2 = new iterator(this, index);
            return ite2;
        };
        csmVector.prototype.prepareCapacity = function (newSize) {
            if (newSize > this._capacity) {
                if (this._capacity == 0) {
                    this._ptr = new Array(newSize);
                    this._capacity = newSize;
                }
                else {
                    this._ptr.length = newSize;
                    this._capacity = newSize;
                }
            }
        };
        csmVector.prototype.begin = function () {
            var ite = this._size == 0 ? this.end() : new iterator(this, 0);
            return ite;
        };
        csmVector.prototype.end = function () {
            var ite = new iterator(this, this._size);
            return ite;
        };
        csmVector.prototype.getOffset = function (offset) {
            var newVector = new csmVector();
            newVector._ptr = this.get(offset);
            newVector._size = this.get(offset).length;
            newVector._capacity = this.get(offset).length;
            return newVector;
        };
        csmVector.s_defaultSize = 10;
        return csmVector;
    }());
    exports.csmVector = csmVector;
    var iterator = (function () {
        function iterator(v, index) {
            this._vector = v != undefined ? v : null;
            this._index = index != undefined ? index : 0;
        }
        iterator.prototype.set = function (ite) {
            this._index = ite._index;
            this._vector = ite._vector;
            return this;
        };
        iterator.prototype.preIncrement = function () {
            ++this._index;
            return this;
        };
        iterator.prototype.preDecrement = function () {
            --this._index;
            return this;
        };
        iterator.prototype.increment = function () {
            var iteold = new iterator(this._vector, this._index++);
            return iteold;
        };
        iterator.prototype.decrement = function () {
            var iteold = new iterator(this._vector, this._index--);
            return iteold;
        };
        iterator.prototype.ptr = function () {
            return this._vector._ptr[this._index];
        };
        iterator.prototype.substitution = function (ite) {
            this._index = ite._index;
            this._vector = ite._vector;
            return this;
        };
        iterator.prototype.notEqual = function (ite) {
            return this._index != ite._index || this._vector != ite._vector;
        };
        return iterator;
    }());
    exports.iterator = iterator;
    var $ = __importStar(__webpack_require__(/*! ./csmvector */ "../../../Framework/src/type/csmvector.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.csmVector = $.csmVector;
        Live2DCubismFramework.iterator = $.iterator;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/utils/cubismdebug.ts":
    /*!***************************************************!*\
      !*** ../../../Framework/src/utils/cubismdebug.ts ***!
      \***************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.CubismDebug = exports.CubismLogError = exports.CubismLogWarning = exports.CubismLogInfo = exports.CubismLogDebug = exports.CubismLogVerbose = exports.CSM_ASSERT = exports.CubismLogPrintIn = exports.CubismLogPrint = void 0;
    var cubismframeworkconfig_1 = __webpack_require__(/*! ../cubismframeworkconfig */ "../../../Framework/src/cubismframeworkconfig.ts");
    var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    var CubismLogPrint = function (level, fmt, args) {
        CubismDebug.print(level, '[CSM]' + fmt, args);
    };
    exports.CubismLogPrint = CubismLogPrint;
    var CubismLogPrintIn = function (level, fmt, args) {
        (0, exports.CubismLogPrint)(level, fmt + '\n', args);
    };
    exports.CubismLogPrintIn = CubismLogPrintIn;
    var CSM_ASSERT = function (expr) {
        console.assert(expr);
    };
    exports.CSM_ASSERT = CSM_ASSERT;
    if (cubismframeworkconfig_1.CSM_LOG_LEVEL <= cubismframeworkconfig_1.CSM_LOG_LEVEL_VERBOSE) {
        exports.CubismLogVerbose = function (fmt) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Verbose, '[V]' + fmt, args);
        };
        exports.CubismLogDebug = function (fmt) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Debug, '[D]' + fmt, args);
        };
        exports.CubismLogInfo = function (fmt) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);
        };
        exports.CubismLogWarning = function (fmt) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
        };
        exports.CubismLogError = function (fmt) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
        };
    }
    else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_DEBUG) {
        exports.CubismLogDebug = function (fmt) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Debug, '[D]' + fmt, args);
        };
        exports.CubismLogInfo = function (fmt) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);
        };
        exports.CubismLogWarning = function (fmt) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
        };
        exports.CubismLogError = function (fmt) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
        };
    }
    else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_INFO) {
        exports.CubismLogInfo = function (fmt) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);
        };
        exports.CubismLogWarning = function (fmt) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
        };
        exports.CubismLogError = function (fmt) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
        };
    }
    else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_WARNING) {
        exports.CubismLogWarning = function (fmt) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
        };
        exports.CubismLogError = function (fmt) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
        };
    }
    else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_ERROR) {
        exports.CubismLogError = function (fmt) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
        };
    }
    var CubismDebug = (function () {
        function CubismDebug() {
        }
        CubismDebug.print = function (logLevel, format, args) {
            if (logLevel < live2dcubismframework_1.CubismFramework.getLoggingLevel()) {
                return;
            }
            var logPrint = live2dcubismframework_1.CubismFramework.coreLogFunction;
            if (!logPrint)
                return;
            var buffer = format.replace(/\{(\d+)\}/g, function (m, k) {
                return args[k];
            });
            logPrint(buffer);
        };
        CubismDebug.dumpBytes = function (logLevel, data, length) {
            for (var i = 0; i < length; i++) {
                if (i % 16 == 0 && i > 0)
                    this.print(logLevel, '\n');
                else if (i % 8 == 0 && i > 0)
                    this.print(logLevel, '  ');
                this.print(logLevel, '{0} ', [data[i] & 0xff]);
            }
            this.print(logLevel, '\n');
        };
        return CubismDebug;
    }());
    exports.CubismDebug = CubismDebug;
    var $ = __importStar(__webpack_require__(/*! ./cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismDebug = $.CubismDebug;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "../../../Framework/src/utils/cubismjson.ts":
    /*!**************************************************!*\
      !*** ../../../Framework/src/utils/cubismjson.ts ***!
      \**************************************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Live2DCubismFramework = exports.JsonMap = exports.JsonArray = exports.JsonNullvalue = exports.JsonError = exports.JsonString = exports.JsonBoolean = exports.JsonFloat = exports.CubismJson = exports.Value = void 0;
    var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    var csmmap_1 = __webpack_require__(/*! ../type/csmmap */ "../../../Framework/src/type/csmmap.ts");
    var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "../../../Framework/src/type/csmstring.ts");
    var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var cubismdebug_1 = __webpack_require__(/*! ./cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
    var CSM_JSON_ERROR_TYPE_MISMATCH = 'Error: type mismatch';
    var CSM_JSON_ERROR_INDEX_OF_BOUNDS = 'Error: index out of bounds';
    var Value = (function () {
        function Value() {
        }
        Value.prototype.getRawString = function (defaultValue, indent) {
            return this.getString(defaultValue, indent);
        };
        Value.prototype.toInt = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = 0; }
            return defaultValue;
        };
        Value.prototype.toFloat = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = 0; }
            return defaultValue;
        };
        Value.prototype.toBoolean = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = false; }
            return defaultValue;
        };
        Value.prototype.getSize = function () {
            return 0;
        };
        Value.prototype.getArray = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = null; }
            return defaultValue;
        };
        Value.prototype.getVector = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = new csmvector_1.csmVector(); }
            return defaultValue;
        };
        Value.prototype.getMap = function (defaultValue) {
            return defaultValue;
        };
        Value.prototype.getValueByIndex = function (index) {
            return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
        };
        Value.prototype.getValueByString = function (s) {
            return Value.nullValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
        };
        Value.prototype.getKeys = function () {
            return Value.s_dummyKeys;
        };
        Value.prototype.isError = function () {
            return false;
        };
        Value.prototype.isNull = function () {
            return false;
        };
        Value.prototype.isBool = function () {
            return false;
        };
        Value.prototype.isFloat = function () {
            return false;
        };
        Value.prototype.isString = function () {
            return false;
        };
        Value.prototype.isArray = function () {
            return false;
        };
        Value.prototype.isMap = function () {
            return false;
        };
        Value.prototype.equals = function (value) {
            return false;
        };
        Value.prototype.isStatic = function () {
            return false;
        };
        Value.prototype.setErrorNotForClientCall = function (errorStr) {
            return JsonError.errorValue;
        };
        Value.staticInitializeNotForClientCall = function () {
            JsonBoolean.trueValue = new JsonBoolean(true);
            JsonBoolean.falseValue = new JsonBoolean(false);
            Value.errorValue = new JsonError('ERROR', true);
            Value.nullValue = new JsonNullvalue();
            Value.s_dummyKeys = new csmvector_1.csmVector();
        };
        Value.staticReleaseNotForClientCall = function () {
            JsonBoolean.trueValue = null;
            JsonBoolean.falseValue = null;
            Value.errorValue = null;
            Value.nullValue = null;
            Value.s_dummyKeys = null;
        };
        return Value;
    }());
    exports.Value = Value;
    var CubismJson = (function () {
        function CubismJson(buffer, length) {
            this._error = null;
            this._lineCount = 0;
            this._root = null;
            if (buffer != undefined) {
                this.parseBytes(buffer, length);
            }
        }
        CubismJson.create = function (buffer, size) {
            var json = new CubismJson();
            var succeeded = json.parseBytes(buffer, size);
            if (!succeeded) {
                CubismJson.delete(json);
                return null;
            }
            else {
                return json;
            }
        };
        CubismJson.delete = function (instance) {
            instance = null;
        };
        CubismJson.prototype.getRoot = function () {
            return this._root;
        };
        CubismJson.prototype.arrayBufferToString = function (buffer) {
            var uint8Array = new Uint8Array(buffer);
            var str = '';
            for (var i = 0, len = uint8Array.length; i < len; ++i) {
                str += '%' + this.pad(uint8Array[i].toString(16));
            }
            str = decodeURIComponent(str);
            return str;
        };
        CubismJson.prototype.pad = function (n) {
            return n.length < 2 ? '0' + n : n;
        };
        CubismJson.prototype.parseBytes = function (buffer, size) {
            var endPos = new Array(1);
            var decodeBuffer = this.arrayBufferToString(buffer);
            this._root = this.parseValue(decodeBuffer, size, 0, endPos);
            if (this._error) {
                var strbuf = '\0';
                strbuf = 'Json parse error : @line ' + (this._lineCount + 1) + '\n';
                this._root = new JsonString(strbuf);
                (0, cubismdebug_1.CubismLogInfo)('{0}', this._root.getRawString());
                return false;
            }
            else if (this._root == null) {
                this._root = new JsonError(new csmstring_1.csmString(this._error), false);
                return false;
            }
            return true;
        };
        CubismJson.prototype.getParseError = function () {
            return this._error;
        };
        CubismJson.prototype.checkEndOfFile = function () {
            return this._root.getArray()[1].equals('EOF');
        };
        CubismJson.prototype.parseValue = function (buffer, length, begin, outEndPos) {
            if (this._error)
                return null;
            var o = null;
            var i = begin;
            var f;
            for (; i < length; i++) {
                var c = buffer[i];
                switch (c) {
                    case '-':
                    case '.':
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9': {
                        var afterString = new Array(1);
                        f = (0, live2dcubismframework_1.strtod)(buffer.slice(i), afterString);
                        outEndPos[0] = buffer.indexOf(afterString[0]);
                        return new JsonFloat(f);
                    }
                    case '"':
                        return new JsonString(this.parseString(buffer, length, i + 1, outEndPos));
                    case '[':
                        o = this.parseArray(buffer, length, i + 1, outEndPos);
                        return o;
                    case '{':
                        o = this.parseObject(buffer, length, i + 1, outEndPos);
                        return o;
                    case 'n':
                        if (i + 3 < length) {
                            o = new JsonNullvalue();
                            outEndPos[0] = i + 4;
                        }
                        else {
                            this._error = 'parse null';
                        }
                        return o;
                    case 't':
                        if (i + 3 < length) {
                            o = JsonBoolean.trueValue;
                            outEndPos[0] = i + 4;
                        }
                        else {
                            this._error = 'parse true';
                        }
                        return o;
                    case 'f':
                        if (i + 4 < length) {
                            o = JsonBoolean.falseValue;
                            outEndPos[0] = i + 5;
                        }
                        else {
                            this._error = "illegal ',' position";
                        }
                        return o;
                    case ',':
                        this._error = "illegal ',' position";
                        return null;
                    case ']':
                        outEndPos[0] = i;
                        return null;
                    case '\n':
                        this._lineCount++;
                    case ' ':
                    case '\t':
                    case '\r':
                    default:
                        break;
                }
            }
            this._error = 'illegal end of value';
            return null;
        };
        CubismJson.prototype.parseString = function (string, length, begin, outEndPos) {
            if (this._error)
                return null;
            var i = begin;
            var c, c2;
            var ret = new csmstring_1.csmString('');
            var bufStart = begin;
            for (; i < length; i++) {
                c = string[i];
                switch (c) {
                    case '"': {
                        outEndPos[0] = i + 1;
                        ret.append(string.slice(bufStart), i - bufStart);
                        return ret.s;
                    }
                    case '//': {
                        i++;
                        if (i - 1 > bufStart) {
                            ret.append(string.slice(bufStart), i - bufStart);
                        }
                        bufStart = i + 1;
                        if (i < length) {
                            c2 = string[i];
                            switch (c2) {
                                case '\\':
                                    ret.expansion(1, '\\');
                                    break;
                                case '"':
                                    ret.expansion(1, '"');
                                    break;
                                case '/':
                                    ret.expansion(1, '/');
                                    break;
                                case 'b':
                                    ret.expansion(1, '\b');
                                    break;
                                case 'f':
                                    ret.expansion(1, '\f');
                                    break;
                                case 'n':
                                    ret.expansion(1, '\n');
                                    break;
                                case 'r':
                                    ret.expansion(1, '\r');
                                    break;
                                case 't':
                                    ret.expansion(1, '\t');
                                    break;
                                case 'u':
                                    this._error = 'parse string/unicord escape not supported';
                                    break;
                                default:
                                    break;
                            }
                        }
                        else {
                            this._error = 'parse string/escape error';
                        }
                    }
                    default: {
                        break;
                    }
                }
            }
            this._error = 'parse string/illegal end';
            return null;
        };
        CubismJson.prototype.parseObject = function (buffer, length, begin, outEndPos) {
            if (this._error)
                return null;
            var ret = new JsonMap();
            var key = '';
            var i = begin;
            var c = '';
            var localRetEndPos2 = Array(1);
            var ok = false;
            for (; i < length; i++) {
                FOR_LOOP: for (; i < length; i++) {
                    c = buffer[i];
                    switch (c) {
                        case '"':
                            key = this.parseString(buffer, length, i + 1, localRetEndPos2);
                            if (this._error) {
                                return null;
                            }
                            i = localRetEndPos2[0];
                            ok = true;
                            break FOR_LOOP;
                        case '}':
                            outEndPos[0] = i + 1;
                            return ret;
                        case ':':
                            this._error = "illegal ':' position";
                            break;
                        case '\n':
                            this._lineCount++;
                        default:
                            break;
                    }
                }
                if (!ok) {
                    this._error = 'key not found';
                    return null;
                }
                ok = false;
                FOR_LOOP2: for (; i < length; i++) {
                    c = buffer[i];
                    switch (c) {
                        case ':':
                            ok = true;
                            i++;
                            break FOR_LOOP2;
                        case '}':
                            this._error = "illegal '}' position";
                            break;
                        case '\n':
                            this._lineCount++;
                        default:
                            break;
                    }
                }
                if (!ok) {
                    this._error = "':' not found";
                    return null;
                }
                var value = this.parseValue(buffer, length, i, localRetEndPos2);
                if (this._error) {
                    return null;
                }
                i = localRetEndPos2[0];
                ret.put(key, value);
                FOR_LOOP3: for (; i < length; i++) {
                    c = buffer[i];
                    switch (c) {
                        case ',':
                            break FOR_LOOP3;
                        case '}':
                            outEndPos[0] = i + 1;
                            return ret;
                        case '\n':
                            this._lineCount++;
                        default:
                            break;
                    }
                }
            }
            this._error = 'illegal end of perseObject';
            return null;
        };
        CubismJson.prototype.parseArray = function (buffer, length, begin, outEndPos) {
            if (this._error)
                return null;
            var ret = new JsonArray();
            var i = begin;
            var c;
            var localRetEndpos2 = new Array(1);
            for (; i < length; i++) {
                var value = this.parseValue(buffer, length, i, localRetEndpos2);
                if (this._error) {
                    return null;
                }
                i = localRetEndpos2[0];
                if (value) {
                    ret.add(value);
                }
                FOR_LOOP: for (; i < length; i++) {
                    c = buffer[i];
                    switch (c) {
                        case ',':
                            break FOR_LOOP;
                        case ']':
                            outEndPos[0] = i + 1;
                            return ret;
                        case '\n':
                            ++this._lineCount;
                        default:
                            break;
                    }
                }
            }
            ret = void 0;
            this._error = 'illegal end of parseObject';
            return null;
        };
        return CubismJson;
    }());
    exports.CubismJson = CubismJson;
    var JsonFloat = (function (_super) {
        __extends(JsonFloat, _super);
        function JsonFloat(v) {
            var _this = _super.call(this) || this;
            _this._value = v;
            return _this;
        }
        JsonFloat.prototype.isFloat = function () {
            return true;
        };
        JsonFloat.prototype.getString = function (defaultValue, indent) {
            var strbuf = '\0';
            this._value = parseFloat(strbuf);
            this._stringBuffer = strbuf;
            return this._stringBuffer;
        };
        JsonFloat.prototype.toInt = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = 0; }
            return parseInt(this._value.toString());
        };
        JsonFloat.prototype.toFloat = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = 0.0; }
            return this._value;
        };
        JsonFloat.prototype.equals = function (value) {
            if ('number' === typeof value) {
                if (Math.round(value)) {
                    return false;
                }
                else {
                    return value == this._value;
                }
            }
            return false;
        };
        return JsonFloat;
    }(Value));
    exports.JsonFloat = JsonFloat;
    var JsonBoolean = (function (_super) {
        __extends(JsonBoolean, _super);
        function JsonBoolean(v) {
            var _this = _super.call(this) || this;
            _this._boolValue = v;
            return _this;
        }
        JsonBoolean.prototype.isBool = function () {
            return true;
        };
        JsonBoolean.prototype.toBoolean = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = false; }
            return this._boolValue;
        };
        JsonBoolean.prototype.getString = function (defaultValue, indent) {
            this._stringBuffer = this._boolValue ? 'true' : 'false';
            return this._stringBuffer;
        };
        JsonBoolean.prototype.equals = function (value) {
            if ('boolean' === typeof value) {
                return value == this._boolValue;
            }
            return false;
        };
        JsonBoolean.prototype.isStatic = function () {
            return true;
        };
        return JsonBoolean;
    }(Value));
    exports.JsonBoolean = JsonBoolean;
    var JsonString = (function (_super) {
        __extends(JsonString, _super);
        function JsonString(s) {
            var _this = _super.call(this) || this;
            if ('string' === typeof s) {
                _this._stringBuffer = s;
            }
            if (s instanceof csmstring_1.csmString) {
                _this._stringBuffer = s.s;
            }
            return _this;
        }
        JsonString.prototype.isString = function () {
            return true;
        };
        JsonString.prototype.getString = function (defaultValue, indent) {
            return this._stringBuffer;
        };
        JsonString.prototype.equals = function (value) {
            if ('string' === typeof value) {
                return this._stringBuffer == value;
            }
            if (value instanceof csmstring_1.csmString) {
                return this._stringBuffer == value.s;
            }
            return false;
        };
        return JsonString;
    }(Value));
    exports.JsonString = JsonString;
    var JsonError = (function (_super) {
        __extends(JsonError, _super);
        function JsonError(s, isStatic) {
            var _this = this;
            if ('string' === typeof s) {
                _this = _super.call(this, s) || this;
            }
            else {
                _this = _super.call(this, s) || this;
            }
            _this._isStatic = isStatic;
            return _this;
        }
        JsonError.prototype.isStatic = function () {
            return this._isStatic;
        };
        JsonError.prototype.setErrorNotForClientCall = function (s) {
            this._stringBuffer = s;
            return this;
        };
        JsonError.prototype.isError = function () {
            return true;
        };
        return JsonError;
    }(JsonString));
    exports.JsonError = JsonError;
    var JsonNullvalue = (function (_super) {
        __extends(JsonNullvalue, _super);
        function JsonNullvalue() {
            var _this = _super.call(this) || this;
            _this._stringBuffer = 'NullValue';
            return _this;
        }
        JsonNullvalue.prototype.isNull = function () {
            return true;
        };
        JsonNullvalue.prototype.getString = function (defaultValue, indent) {
            return this._stringBuffer;
        };
        JsonNullvalue.prototype.isStatic = function () {
            return true;
        };
        JsonNullvalue.prototype.setErrorNotForClientCall = function (s) {
            this._stringBuffer = s;
            return JsonError.nullValue;
        };
        return JsonNullvalue;
    }(Value));
    exports.JsonNullvalue = JsonNullvalue;
    var JsonArray = (function (_super) {
        __extends(JsonArray, _super);
        function JsonArray() {
            var _this = _super.call(this) || this;
            _this._array = new csmvector_1.csmVector();
            return _this;
        }
        JsonArray.prototype.release = function () {
            for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.preIncrement()) {
                var v = ite.ptr();
                if (v && !v.isStatic()) {
                    v = void 0;
                    v = null;
                }
            }
        };
        JsonArray.prototype.isArray = function () {
            return true;
        };
        JsonArray.prototype.getValueByIndex = function (index) {
            if (index < 0 || this._array.getSize() <= index) {
                return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_INDEX_OF_BOUNDS);
            }
            var v = this._array.at(index);
            if (v == null) {
                return Value.nullValue;
            }
            return v;
        };
        JsonArray.prototype.getValueByString = function (s) {
            return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
        };
        JsonArray.prototype.getString = function (defaultValue, indent) {
            var stringBuffer = indent + '[\n';
            for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.increment()) {
                var v = ite.ptr();
                this._stringBuffer += indent + '' + v.getString(indent + ' ') + '\n';
            }
            this._stringBuffer = stringBuffer + indent + ']\n';
            return this._stringBuffer;
        };
        JsonArray.prototype.add = function (v) {
            this._array.pushBack(v);
        };
        JsonArray.prototype.getVector = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = null; }
            return this._array;
        };
        JsonArray.prototype.getSize = function () {
            return this._array.getSize();
        };
        return JsonArray;
    }(Value));
    exports.JsonArray = JsonArray;
    var JsonMap = (function (_super) {
        __extends(JsonMap, _super);
        function JsonMap() {
            var _this = _super.call(this) || this;
            _this._map = new csmmap_1.csmMap();
            return _this;
        }
        JsonMap.prototype.release = function () {
            var ite = this._map.begin();
            while (ite.notEqual(this._map.end())) {
                var v = ite.ptr().second;
                if (v && !v.isStatic()) {
                    v = void 0;
                    v = null;
                }
                ite.preIncrement();
            }
        };
        JsonMap.prototype.isMap = function () {
            return true;
        };
        JsonMap.prototype.getValueByString = function (s) {
            if (s instanceof csmstring_1.csmString) {
                var ret = this._map.getValue(s.s);
                if (ret == null) {
                    return Value.nullValue;
                }
                return ret;
            }
            for (var iter = this._map.begin(); iter.notEqual(this._map.end()); iter.preIncrement()) {
                if (iter.ptr().first == s) {
                    if (iter.ptr().second == null) {
                        return Value.nullValue;
                    }
                    return iter.ptr().second;
                }
            }
            return Value.nullValue;
        };
        JsonMap.prototype.getValueByIndex = function (index) {
            return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
        };
        JsonMap.prototype.getString = function (defaultValue, indent) {
            this._stringBuffer = indent + '{\n';
            var ite = this._map.begin();
            while (ite.notEqual(this._map.end())) {
                var key = ite.ptr().first;
                var v = ite.ptr().second;
                this._stringBuffer +=
                    indent + ' ' + key + ' : ' + v.getString(indent + '   ') + ' \n';
                ite.preIncrement();
            }
            this._stringBuffer += indent + '}\n';
            return this._stringBuffer;
        };
        JsonMap.prototype.getMap = function (defaultValue) {
            return this._map;
        };
        JsonMap.prototype.put = function (key, v) {
            this._map.setValue(key, v);
        };
        JsonMap.prototype.getKeys = function () {
            if (!this._keys) {
                this._keys = new csmvector_1.csmVector();
                var ite = this._map.begin();
                while (ite.notEqual(this._map.end())) {
                    var key = ite.ptr().first;
                    this._keys.pushBack(key);
                    ite.preIncrement();
                }
            }
            return this._keys;
        };
        JsonMap.prototype.getSize = function () {
            return this._keys.getSize();
        };
        return JsonMap;
    }(Value));
    exports.JsonMap = JsonMap;
    var $ = __importStar(__webpack_require__(/*! ./cubismjson */ "../../../Framework/src/utils/cubismjson.ts"));
    var Live2DCubismFramework;
    (function (Live2DCubismFramework) {
        Live2DCubismFramework.CubismJson = $.CubismJson;
        Live2DCubismFramework.JsonArray = $.JsonArray;
        Live2DCubismFramework.JsonBoolean = $.JsonBoolean;
        Live2DCubismFramework.JsonError = $.JsonError;
        Live2DCubismFramework.JsonFloat = $.JsonFloat;
        Live2DCubismFramework.JsonMap = $.JsonMap;
        Live2DCubismFramework.JsonNullvalue = $.JsonNullvalue;
        Live2DCubismFramework.JsonString = $.JsonString;
        Live2DCubismFramework.Value = $.Value;
    })(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));
    
    
    /***/ }),
    
    /***/ "./src/lappdefine.ts":
    /*!***************************!*\
      !*** ./src/lappdefine.ts ***!
      \***************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.win = exports.RenderTargetHeight = exports.RenderTargetWidth = exports.CubismLoggingLevel = exports.DebugTouchLogEnable = exports.DebugLogEnable = exports.PriorityForce = exports.PriorityNormal = exports.PriorityIdle = exports.PriorityNone = exports.HitAreaNameBody = exports.HitAreaNameHead = exports.MotionGroupTapBody = exports.MotionGroupIdle = exports.ModelDirSize = exports.ModelDir = exports.PowerImageName = exports.GearImageName = exports.BackImageName = exports.ResourcesPath = exports.ViewLogicalMaxTop = exports.ViewLogicalMaxBottom = exports.ViewLogicalMaxRight = exports.ViewLogicalMaxLeft = exports.ViewLogicalTop = exports.ViewLogicalBottom = exports.ViewLogicalRight = exports.ViewLogicalLeft = exports.ViewMinScale = exports.ViewMaxScale = exports.ViewScale = exports.CanvasSize = void 0;
    var live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    exports.CanvasSize = '';
    exports.ViewScale = 1.0;
    exports.ViewMaxScale = 2.0;
    exports.ViewMinScale = 0.8;
    exports.ViewLogicalLeft = -1.0;
    exports.ViewLogicalRight = 1.0;
    exports.ViewLogicalBottom = -1.0;
    exports.ViewLogicalTop = 1.0;
    exports.ViewLogicalMaxLeft = -2.0;
    exports.ViewLogicalMaxRight = 2.0;
    exports.ViewLogicalMaxBottom = -2.0;
    exports.ViewLogicalMaxTop = 2.0;
    exports.ResourcesPath = '../../Resources/';
    exports.BackImageName = '';
    exports.GearImageName = '';
    exports.PowerImageName = 'CloseNormal.png';
    exports.ModelDir = ['yumoze2.0', 'Haru', 'Hiyori', 'Mark', 'Natori', 'Rice'];
    exports.ModelDirSize = exports.ModelDir.length;
    exports.MotionGroupIdle = 'Idle';
    exports.MotionGroupTapBody = 'TapBody';
    exports.HitAreaNameHead = 'Head';
    exports.HitAreaNameBody = 'Body';
    exports.PriorityNone = 0;
    exports.PriorityIdle = 1;
    exports.PriorityNormal = 2;
    exports.PriorityForce = 3;
    exports.DebugLogEnable = true;
    exports.DebugTouchLogEnable = false;
    exports.CubismLoggingLevel = live2dcubismframework_1.LogLevel.LogLevel_Verbose;
    exports.RenderTargetWidth = 1900;
    exports.RenderTargetHeight = 1000;
    exports.win = window;
    exports.win.initDefine = function (resourcesPath, backImageName, modelDir, canvasSize) {
        if (canvasSize === void 0) { canvasSize = 'auto'; }
        exports.ResourcesPath = resourcesPath;
        exports.BackImageName = backImageName;
        exports.ModelDir = modelDir;
        exports.ModelDirSize = modelDir.length;
        exports.CanvasSize = canvasSize;
    };
    
    
    /***/ }),
    
    /***/ "./src/lappdelegate.ts":
    /*!*****************************!*\
      !*** ./src/lappdelegate.ts ***!
      \*****************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LAppDelegate = exports.frameBuffer = exports.gl = exports.s_instance = exports.canvas = void 0;
    var live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/lappdefine.ts"));
    var lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ "./src/lapplive2dmanager.ts");
    var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/lapppal.ts");
    var lapptexturemanager_1 = __webpack_require__(/*! ./lapptexturemanager */ "./src/lapptexturemanager.ts");
    var lappview_1 = __webpack_require__(/*! ./lappview */ "./src/lappview.ts");
    exports.canvas = null;
    exports.s_instance = null;
    exports.gl = null;
    exports.frameBuffer = null;
    var LAppDelegate = (function () {
        function LAppDelegate() {
            this._captured = false;
            this._mouseX = 0.0;
            this._mouseY = 0.0;
            this._isEnd = false;
            this._cubismOption = new live2dcubismframework_1.Option();
            this._view = new lappview_1.LAppView();
            this._textureManager = new lapptexturemanager_1.LAppTextureManager();
        }
        LAppDelegate.getInstance = function () {
            if (exports.s_instance == null) {
                exports.s_instance = new LAppDelegate();
            }
            return exports.s_instance;
        };
        LAppDelegate.releaseInstance = function () {
            if (exports.s_instance != null) {
                exports.s_instance.release();
            }
            exports.s_instance = null;
        };
        LAppDelegate.prototype.initialize = function () {
            exports.canvas = document.getElementById('live2d');
            exports.canvas.width = exports.canvas.width;
            exports.canvas.height = exports.canvas.height;
            exports.canvas.toDataURL('image/png');
            exports.gl = exports.canvas.getContext('webgl') || exports.canvas.getContext('experimental-webgl');
            if (!exports.gl) {
                alert('Cannot initialize WebGL. This browser does not support.');
                exports.gl = null;
                document.body.innerHTML =
                    'This browser does not support the <code>&lt;canvas&gt;</code> element.';
                return false;
            }
            document.body.appendChild(exports.canvas);
            if (!exports.frameBuffer) {
                exports.frameBuffer = exports.gl.getParameter(exports.gl.FRAMEBUFFER_BINDING);
            }
            exports.gl.enable(exports.gl.BLEND);
            exports.gl.blendFunc(exports.gl.SRC_ALPHA, exports.gl.ONE_MINUS_SRC_ALPHA);
            var supportTouch = 'ontouchend' in exports.canvas;
            if (supportTouch) {
                exports.canvas.ontouchstart = onTouchBegan;
                exports.canvas.ontouchmove = onTouchMoved;
                exports.canvas.ontouchend = onTouchEnded;
                exports.canvas.ontouchcancel = onTouchCancel;
            }
            else {
                exports.canvas.onmousedown = onClickBegan;
                exports.canvas.onmousemove = onMouseMoved;
                exports.canvas.onmouseup = onClickEnded;
            }
            this._view.initialize();
            this.initializeCubism();
            return true;
        };
        LAppDelegate.prototype.onResize = function () {
            this._resizeCanvas();
            this._view.initialize();
            this._view.initializeSprite();
        };
        LAppDelegate.prototype.release = function () {
            this._textureManager.release();
            this._textureManager = null;
            this._view.release();
            this._view = null;
            lapplive2dmanager_1.LAppLive2DManager.releaseInstance();
            live2dcubismframework_1.CubismFramework.dispose();
        };
        LAppDelegate.prototype.run = function () {
            var _this = this;
            var loop = function () {
                if (exports.s_instance == null) {
                    return;
                }
                lapppal_1.LAppPal.updateTime();
                exports.gl.clearColor(0.0, 0.0, 0.0, 0.0);
                exports.gl.enable(exports.gl.DEPTH_TEST);
                exports.gl.depthFunc(exports.gl.LEQUAL);
                exports.gl.clear(exports.gl.COLOR_BUFFER_BIT | exports.gl.DEPTH_BUFFER_BIT);
                exports.gl.clearDepth(1.0);
                exports.gl.enable(exports.gl.BLEND);
                exports.gl.blendFunc(exports.gl.SRC_ALPHA, exports.gl.ONE_MINUS_SRC_ALPHA);
                _this._view.render();
                requestAnimationFrame(loop);
            };
            loop();
        };
        LAppDelegate.prototype.createShader = function () {
            var vertexShaderId = exports.gl.createShader(exports.gl.VERTEX_SHADER);
            if (vertexShaderId == null) {
                lapppal_1.LAppPal.printMessage('failed to create vertexShader');
                return null;
            }
            var vertexShader = 'precision mediump float;' +
                'attribute vec3 position;' +
                'attribute vec2 uv;' +
                'varying vec2 vuv;' +
                'void main(void)' +
                '{' +
                '   gl_Position = vec4(position, 1.0);' +
                '   vuv = uv;' +
                '}';
            exports.gl.shaderSource(vertexShaderId, vertexShader);
            exports.gl.compileShader(vertexShaderId);
            var fragmentShaderId = exports.gl.createShader(exports.gl.FRAGMENT_SHADER);
            if (fragmentShaderId == null) {
                lapppal_1.LAppPal.printMessage('failed to create fragmentShader');
                return null;
            }
            var fragmentShader = 'precision mediump float;' +
                'varying vec2 vuv;' +
                'uniform sampler2D texture;' +
                'void main(void)' +
                '{' +
                '   gl_FragColor = texture2D(texture, vuv);' +
                '}';
            exports.gl.shaderSource(fragmentShaderId, fragmentShader);
            exports.gl.compileShader(fragmentShaderId);
            var programId = exports.gl.createProgram();
            exports.gl.attachShader(programId, vertexShaderId);
            exports.gl.attachShader(programId, fragmentShaderId);
            exports.gl.deleteShader(vertexShaderId);
            exports.gl.deleteShader(fragmentShaderId);
            exports.gl.linkProgram(programId);
            exports.gl.useProgram(programId);
            return programId;
        };
        LAppDelegate.prototype.getView = function () {
            return this._view;
        };
        LAppDelegate.prototype.getTextureManager = function () {
            return this._textureManager;
        };
        LAppDelegate.prototype.initializeCubism = function () {
            this._cubismOption.logFunction = lapppal_1.LAppPal.printMessage;
            this._cubismOption.loggingLevel = LAppDefine.CubismLoggingLevel;
            live2dcubismframework_1.CubismFramework.startUp(this._cubismOption);
            live2dcubismframework_1.CubismFramework.initialize();
            var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
            window['live2DManager'] = live2DManager;
            lapppal_1.LAppPal.updateTime();
            this._view.initializeSprite();
        };
        LAppDelegate.prototype._resizeCanvas = function () {
            exports.canvas.width = window.innerWidth;
            exports.canvas.height = window.innerHeight;
        };
        return LAppDelegate;
    }());
    exports.LAppDelegate = LAppDelegate;
    function onClickBegan(e) {
        if (!LAppDelegate.getInstance()._view) {
            lapppal_1.LAppPal.printMessage('view notfound');
            return;
        }
        LAppDelegate.getInstance()._captured = true;
        var posX = e.pageX;
        var posY = e.pageY;
        LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);
    }
    function onMouseMoved(e) {
        if (!LAppDelegate.getInstance()._captured) {
            return;
        }
        if (!LAppDelegate.getInstance()._view) {
            lapppal_1.LAppPal.printMessage('view notfound');
            return;
        }
        var rect = e.target.getBoundingClientRect();
        var posX = e.clientX - rect.left;
        var posY = e.clientY - rect.top;
        LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);
    }
    function onClickEnded(e) {
        LAppDelegate.getInstance()._captured = false;
        if (!LAppDelegate.getInstance()._view) {
            lapppal_1.LAppPal.printMessage('view notfound');
            return;
        }
        var rect = e.target.getBoundingClientRect();
        var posX = e.clientX - rect.left;
        var posY = e.clientY - rect.top;
        LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);
    }
    function onTouchBegan(e) {
        if (!LAppDelegate.getInstance()._view) {
            lapppal_1.LAppPal.printMessage('view notfound');
            return;
        }
        LAppDelegate.getInstance()._captured = true;
        var posX = e.changedTouches[0].pageX;
        var posY = e.changedTouches[0].pageY;
        LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);
    }
    function onTouchMoved(e) {
        if (!LAppDelegate.getInstance()._captured) {
            return;
        }
        if (!LAppDelegate.getInstance()._view) {
            lapppal_1.LAppPal.printMessage('view notfound');
            return;
        }
        var rect = e.target.getBoundingClientRect();
        var posX = e.changedTouches[0].clientX - rect.left;
        var posY = e.changedTouches[0].clientY - rect.top;
        LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);
    }
    function onTouchEnded(e) {
        LAppDelegate.getInstance()._captured = false;
        if (!LAppDelegate.getInstance()._view) {
            lapppal_1.LAppPal.printMessage('view notfound');
            return;
        }
        var rect = e.target.getBoundingClientRect();
        var posX = e.changedTouches[0].clientX - rect.left;
        var posY = e.changedTouches[0].clientY - rect.top;
        LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);
    }
    function onTouchCancel(e) {
        LAppDelegate.getInstance()._captured = false;
        if (!LAppDelegate.getInstance()._view) {
            lapppal_1.LAppPal.printMessage('view notfound');
            return;
        }
        var rect = e.target.getBoundingClientRect();
        var posX = e.changedTouches[0].clientX - rect.left;
        var posY = e.changedTouches[0].clientY - rect.top;
        LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);
    }
    
    
    /***/ }),
    
    /***/ "./src/lapplive2dmanager.ts":
    /*!**********************************!*\
      !*** ./src/lapplive2dmanager.ts ***!
      \**********************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LAppLive2DManager = exports.s_instance = void 0;
    var cubismmatrix44_1 = __webpack_require__(/*! @framework/math/cubismmatrix44 */ "../../../Framework/src/math/cubismmatrix44.ts");
    var csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/lappdefine.ts"));
    var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
    var lappmodel_1 = __webpack_require__(/*! ./lappmodel */ "./src/lappmodel.ts");
    var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/lapppal.ts");
    exports.s_instance = null;
    var LAppLive2DManager = (function () {
        function LAppLive2DManager() {
            this._finishedMotion = function (self) {
                lapppal_1.LAppPal.printMessage('Motion Finished:');
                console.log(self);
            };
            this._viewMatrix = new cubismmatrix44_1.CubismMatrix44();
            this._models = new csmvector_1.csmVector();
            this._sceneIndex = 0;
            this.changeScene(this._sceneIndex);
        }
        LAppLive2DManager.getInstance = function () {
            if (exports.s_instance == null) {
                exports.s_instance = new LAppLive2DManager();
                window['s_instance'] = exports.s_instance;
            }
            return exports.s_instance;
        };
        LAppLive2DManager.releaseInstance = function () {
            if (exports.s_instance != null) {
                exports.s_instance = void 0;
                window['s_instance'] = exports.s_instance;
            }
            exports.s_instance = null;
            window['s_instance'] = exports.s_instance;
        };
        LAppLive2DManager.prototype.getModel = function (no) {
            if (no < this._models.getSize()) {
                return this._models.at(no);
            }
            return null;
        };
        LAppLive2DManager.prototype.releaseAllModel = function () {
            for (var i = 0; i < this._models.getSize(); i++) {
                this._models.at(i).release();
                this._models.set(i, null);
            }
            this._models.clear();
        };
        LAppLive2DManager.prototype.onDrag = function (x, y) {
            for (var i = 0; i < this._models.getSize(); i++) {
                var model = this.getModel(i);
                if (model) {
                    model.setDragging(x, y);
                }
            }
        };
        LAppLive2DManager.prototype.onTap = function (x, y) {
            if (LAppDefine.DebugLogEnable) {
                lapppal_1.LAppPal.printMessage("[APP]tap point: {x: ".concat(x.toFixed(2), " y: ").concat(y.toFixed(2), "}"));
            }
            for (var i = 0; i < this._models.getSize(); i++) {
                if (this._models.at(i).hitTest(LAppDefine.HitAreaNameHead, x, y)) {
                    if (LAppDefine.DebugLogEnable) {
                        lapppal_1.LAppPal.printMessage("[APP]hit area: [".concat(LAppDefine.HitAreaNameHead, "]"));
                    }
                    this._models.at(i).setRandomExpression();
                }
                else if (this._models.at(i).hitTest(LAppDefine.HitAreaNameBody, x, y)) {
                    if (LAppDefine.DebugLogEnable) {
                        lapppal_1.LAppPal.printMessage("[APP]hit area: [".concat(LAppDefine.HitAreaNameBody, "]"));
                    }
                    this._models
                        .at(i)
                        .startRandomMotion(LAppDefine.MotionGroupTapBody, LAppDefine.PriorityNormal, this._finishedMotion);
                }
            }
        };
        LAppLive2DManager.prototype.onUpdate = function () {
            var width = lappdelegate_1.canvas.width, height = lappdelegate_1.canvas.height;
            var modelCount = this._models.getSize();
            for (var i = 0; i < modelCount; ++i) {
                var projection = new cubismmatrix44_1.CubismMatrix44();
                var model = this.getModel(i);
                if (model.getModel()) {
                    if (model.getModel().getCanvasWidth() > 1.0 && width < height) {
                        model.getModelMatrix().setWidth(2.0);
                        projection.scale(1.0, width / height);
                    }
                    else {
                        projection.scale(height / width, 1.0);
                    }
                    if (this._viewMatrix != null) {
                        projection.multiplyByMatrix(this._viewMatrix);
                    }
                }
                model.update();
                model.draw(projection);
            }
        };
        LAppLive2DManager.prototype.nextScene = function () {
            var no = (this._sceneIndex + 1) % LAppDefine.ModelDirSize;
            this.changeScene(no);
        };
        LAppLive2DManager.prototype.changeScene = function (index) {
            this._sceneIndex = index;
            if (LAppDefine.DebugLogEnable) {
                lapppal_1.LAppPal.printMessage("[APP]model index: ".concat(this._sceneIndex));
            }
            var model = LAppDefine.ModelDir[index];
            var modelPath = LAppDefine.ResourcesPath + model + '/';
            var modelJsonName = LAppDefine.ModelDir[index];
            modelJsonName += '.model3.json';
            this.releaseAllModel();
            this._models.pushBack(new lappmodel_1.LAppModel());
            this._models.at(0).loadAssets(modelPath, modelJsonName);
        };
        LAppLive2DManager.prototype.setViewMatrix = function (m) {
            for (var i = 0; i < 16; i++) {
                this._viewMatrix.getArray()[i] = m.getArray()[i];
            }
        };
        return LAppLive2DManager;
    }());
    exports.LAppLive2DManager = LAppLive2DManager;
    
    
    /***/ }),
    
    /***/ "./src/lappmodel.ts":
    /*!**************************!*\
      !*** ./src/lappmodel.ts ***!
      \**************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LAppModel = void 0;
    __webpack_require__(/*! whatwg-fetch */ "./node_modules/whatwg-fetch/fetch.js");
    var cubismdefaultparameterid_1 = __webpack_require__(/*! @framework/cubismdefaultparameterid */ "../../../Framework/src/cubismdefaultparameterid.ts");
    var cubismmodelsettingjson_1 = __webpack_require__(/*! @framework/cubismmodelsettingjson */ "../../../Framework/src/cubismmodelsettingjson.ts");
    var cubismbreath_1 = __webpack_require__(/*! @framework/effect/cubismbreath */ "../../../Framework/src/effect/cubismbreath.ts");
    var cubismeyeblink_1 = __webpack_require__(/*! @framework/effect/cubismeyeblink */ "../../../Framework/src/effect/cubismeyeblink.ts");
    var live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
    var cubismusermodel_1 = __webpack_require__(/*! @framework/model/cubismusermodel */ "../../../Framework/src/model/cubismusermodel.ts");
    var acubismmotion_1 = __webpack_require__(/*! @framework/motion/acubismmotion */ "../../../Framework/src/motion/acubismmotion.ts");
    var cubismmotionqueuemanager_1 = __webpack_require__(/*! @framework/motion/cubismmotionqueuemanager */ "../../../Framework/src/motion/cubismmotionqueuemanager.ts");
    var csmmap_1 = __webpack_require__(/*! @framework/type/csmmap */ "../../../Framework/src/type/csmmap.ts");
    var csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var cubismdebug_1 = __webpack_require__(/*! @framework/utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
    var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/lappdefine.ts"));
    var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
    var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/lapppal.ts");
    var lappwavfilehandler_1 = __webpack_require__(/*! ./lappwavfilehandler */ "./src/lappwavfilehandler.ts");
    var LoadStep;
    (function (LoadStep) {
        LoadStep[LoadStep["LoadAssets"] = 0] = "LoadAssets";
        LoadStep[LoadStep["LoadModel"] = 1] = "LoadModel";
        LoadStep[LoadStep["WaitLoadModel"] = 2] = "WaitLoadModel";
        LoadStep[LoadStep["LoadExpression"] = 3] = "LoadExpression";
        LoadStep[LoadStep["WaitLoadExpression"] = 4] = "WaitLoadExpression";
        LoadStep[LoadStep["LoadPhysics"] = 5] = "LoadPhysics";
        LoadStep[LoadStep["WaitLoadPhysics"] = 6] = "WaitLoadPhysics";
        LoadStep[LoadStep["LoadPose"] = 7] = "LoadPose";
        LoadStep[LoadStep["WaitLoadPose"] = 8] = "WaitLoadPose";
        LoadStep[LoadStep["SetupEyeBlink"] = 9] = "SetupEyeBlink";
        LoadStep[LoadStep["SetupBreath"] = 10] = "SetupBreath";
        LoadStep[LoadStep["LoadUserData"] = 11] = "LoadUserData";
        LoadStep[LoadStep["WaitLoadUserData"] = 12] = "WaitLoadUserData";
        LoadStep[LoadStep["SetupEyeBlinkIds"] = 13] = "SetupEyeBlinkIds";
        LoadStep[LoadStep["SetupLipSyncIds"] = 14] = "SetupLipSyncIds";
        LoadStep[LoadStep["SetupLayout"] = 15] = "SetupLayout";
        LoadStep[LoadStep["LoadMotion"] = 16] = "LoadMotion";
        LoadStep[LoadStep["WaitLoadMotion"] = 17] = "WaitLoadMotion";
        LoadStep[LoadStep["CompleteInitialize"] = 18] = "CompleteInitialize";
        LoadStep[LoadStep["CompleteSetupModel"] = 19] = "CompleteSetupModel";
        LoadStep[LoadStep["LoadTexture"] = 20] = "LoadTexture";
        LoadStep[LoadStep["WaitLoadTexture"] = 21] = "WaitLoadTexture";
        LoadStep[LoadStep["CompleteSetup"] = 22] = "CompleteSetup";
    })(LoadStep || (LoadStep = {}));
    var LAppModel = (function (_super) {
        __extends(LAppModel, _super);
        function LAppModel() {
            var _this = _super.call(this) || this;
            _this._modelSetting = null;
            _this._modelHomeDir = null;
            _this._userTimeSeconds = 0.0;
            _this._eyeBlinkIds = new csmvector_1.csmVector();
            _this._lipSyncIds = new csmvector_1.csmVector();
            _this._motions = new csmmap_1.csmMap();
            _this._expressions = new csmmap_1.csmMap();
            _this._hitArea = new csmvector_1.csmVector();
            _this._userArea = new csmvector_1.csmVector();
            _this._idParamAngleX = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamAngleX);
            _this._idParamAngleY = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamAngleY);
            _this._idParamAngleZ = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamAngleZ);
            _this._idParamEyeBallX = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamEyeBallX);
            _this._idParamEyeBallY = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamEyeBallY);
            _this._idParamBodyAngleX = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamBodyAngleX);
            _this._state = LoadStep.LoadAssets;
            _this._expressionCount = 0;
            _this._textureCount = 0;
            _this._motionCount = 0;
            _this._allMotionCount = 0;
            _this._wavFileHandler = new lappwavfilehandler_1.LAppWavFileHandler();
            return _this;
        }
        LAppModel.prototype.loadAssets = function (dir, fileName) {
            var _this = this;
            this._modelHomeDir = dir;
            fetch("".concat(this._modelHomeDir).concat(fileName))
                .then(function (response) { return response.arrayBuffer(); })
                .then(function (arrayBuffer) {
                var setting = new cubismmodelsettingjson_1.CubismModelSettingJson(arrayBuffer, arrayBuffer.byteLength);
                _this._state = LoadStep.LoadModel;
                _this.setupModel(setting);
            });
        };
        LAppModel.prototype.setupModel = function (setting) {
            var _this = this;
            this._updating = true;
            this._initialized = false;
            this._modelSetting = setting;
            if (this._modelSetting.getModelFileName() != '') {
                var modelFileName = this._modelSetting.getModelFileName();
                fetch("".concat(this._modelHomeDir).concat(modelFileName))
                    .then(function (response) { return response.arrayBuffer(); })
                    .then(function (arrayBuffer) {
                    _this.loadModel(arrayBuffer);
                    _this._state = LoadStep.LoadExpression;
                    loadCubismExpression();
                });
                this._state = LoadStep.WaitLoadModel;
            }
            else {
                lapppal_1.LAppPal.printMessage('Model data does not exist.');
            }
            var loadCubismExpression = function () {
                if (_this._modelSetting.getExpressionCount() > 0) {
                    var count_1 = _this._modelSetting.getExpressionCount();
                    var _loop_1 = function (i) {
                        var expressionName = _this._modelSetting.getExpressionName(i);
                        var expressionFileName = _this._modelSetting.getExpressionFileName(i);
                        fetch("".concat(_this._modelHomeDir).concat(expressionFileName))
                            .then(function (response) { return response.arrayBuffer(); })
                            .then(function (arrayBuffer) {
                            var motion = _this.loadExpression(arrayBuffer, arrayBuffer.byteLength, expressionName);
                            if (_this._expressions.getValue(expressionName) != null) {
                                acubismmotion_1.ACubismMotion.delete(_this._expressions.getValue(expressionName));
                                _this._expressions.setValue(expressionName, null);
                            }
                            _this._expressions.setValue(expressionName, motion);
                            _this._expressionCount++;
                            if (_this._expressionCount >= count_1) {
                                _this._state = LoadStep.LoadPhysics;
                                loadCubismPhysics();
                            }
                        });
                    };
                    for (var i = 0; i < count_1; i++) {
                        _loop_1(i);
                    }
                    _this._state = LoadStep.WaitLoadExpression;
                }
                else {
                    _this._state = LoadStep.LoadPhysics;
                    loadCubismPhysics();
                }
            };
            var loadCubismPhysics = function () {
                if (_this._modelSetting.getPhysicsFileName() != '') {
                    var physicsFileName = _this._modelSetting.getPhysicsFileName();
                    fetch("".concat(_this._modelHomeDir).concat(physicsFileName))
                        .then(function (response) { return response.arrayBuffer(); })
                        .then(function (arrayBuffer) {
                        _this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);
                        _this._state = LoadStep.LoadPose;
                        loadCubismPose();
                    });
                    _this._state = LoadStep.WaitLoadPhysics;
                }
                else {
                    _this._state = LoadStep.LoadPose;
                    loadCubismPose();
                }
            };
            var loadCubismPose = function () {
                if (_this._modelSetting.getPoseFileName() != '') {
                    var poseFileName = _this._modelSetting.getPoseFileName();
                    fetch("".concat(_this._modelHomeDir).concat(poseFileName))
                        .then(function (response) { return response.arrayBuffer(); })
                        .then(function (arrayBuffer) {
                        _this.loadPose(arrayBuffer, arrayBuffer.byteLength);
                        _this._state = LoadStep.SetupEyeBlink;
                        setupEyeBlink();
                    });
                    _this._state = LoadStep.WaitLoadPose;
                }
                else {
                    _this._state = LoadStep.SetupEyeBlink;
                    setupEyeBlink();
                }
            };
            var setupEyeBlink = function () {
                if (_this._modelSetting.getEyeBlinkParameterCount() > 0) {
                    _this._eyeBlink = cubismeyeblink_1.CubismEyeBlink.create(_this._modelSetting);
                    _this._state = LoadStep.SetupBreath;
                }
                setupBreath();
            };
            var setupBreath = function () {
                _this._breath = cubismbreath_1.CubismBreath.create();
                var breathParameters = new csmvector_1.csmVector();
                breathParameters.pushBack(new cubismbreath_1.BreathParameterData(_this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5));
                breathParameters.pushBack(new cubismbreath_1.BreathParameterData(_this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5));
                breathParameters.pushBack(new cubismbreath_1.BreathParameterData(_this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5));
                breathParameters.pushBack(new cubismbreath_1.BreathParameterData(_this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5));
                breathParameters.pushBack(new cubismbreath_1.BreathParameterData(live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamBreath), 0.5, 0.5, 3.2345, 1));
                _this._breath.setParameters(breathParameters);
                _this._state = LoadStep.LoadUserData;
                loadUserData();
            };
            var loadUserData = function () {
                if (_this._modelSetting.getUserDataFile() != '') {
                    var userDataFile = _this._modelSetting.getUserDataFile();
                    fetch("".concat(_this._modelHomeDir).concat(userDataFile))
                        .then(function (response) { return response.arrayBuffer(); })
                        .then(function (arrayBuffer) {
                        _this.loadUserData(arrayBuffer, arrayBuffer.byteLength);
                        _this._state = LoadStep.SetupEyeBlinkIds;
                        setupEyeBlinkIds();
                    });
                    _this._state = LoadStep.WaitLoadUserData;
                }
                else {
                    _this._state = LoadStep.SetupEyeBlinkIds;
                    setupEyeBlinkIds();
                }
            };
            var setupEyeBlinkIds = function () {
                var eyeBlinkIdCount = _this._modelSetting.getEyeBlinkParameterCount();
                for (var i = 0; i < eyeBlinkIdCount; ++i) {
                    _this._eyeBlinkIds.pushBack(_this._modelSetting.getEyeBlinkParameterId(i));
                }
                _this._state = LoadStep.SetupLipSyncIds;
                setupLipSyncIds();
            };
            var setupLipSyncIds = function () {
                var lipSyncIdCount = _this._modelSetting.getLipSyncParameterCount();
                for (var i = 0; i < lipSyncIdCount; ++i) {
                    _this._lipSyncIds.pushBack(_this._modelSetting.getLipSyncParameterId(i));
                }
                _this._state = LoadStep.SetupLayout;
                setupLayout();
            };
            var setupLayout = function () {
                var layout = new csmmap_1.csmMap();
                _this._modelSetting.getLayoutMap(layout);
                _this._modelMatrix.setupFromLayout(layout);
                _this._state = LoadStep.LoadMotion;
                loadCubismMotion();
            };
            var loadCubismMotion = function () {
                _this._state = LoadStep.WaitLoadMotion;
                _this._model.saveParameters();
                _this._allMotionCount = 0;
                _this._motionCount = 0;
                var group = [];
                var motionGroupCount = _this._modelSetting.getMotionGroupCount();
                for (var i = 0; i < motionGroupCount; i++) {
                    group[i] = _this._modelSetting.getMotionGroupName(i);
                    _this._allMotionCount += _this._modelSetting.getMotionCount(group[i]);
                }
                for (var i = 0; i < motionGroupCount; i++) {
                    _this.preLoadMotionGroup(group[i]);
                }
                if (motionGroupCount == 0) {
                    _this._state = LoadStep.LoadTexture;
                    _this._motionManager.stopAllMotions();
                    _this._updating = false;
                    _this._initialized = true;
                    _this.createRenderer();
                    _this.setupTextures();
                    _this.getRenderer().startUp(lappdelegate_1.gl);
                }
            };
        };
        LAppModel.prototype.setupTextures = function () {
            var _this = this;
            var usePremultiply = true;
            if (this._state == LoadStep.LoadTexture) {
                var textureCount_1 = this._modelSetting.getTextureCount();
                var _loop_2 = function (modelTextureNumber) {
                    if (this_1._modelSetting.getTextureFileName(modelTextureNumber) == '') {
                        console.log('getTextureFileName null');
                        return "continue";
                    }
                    var texturePath = this_1._modelSetting.getTextureFileName(modelTextureNumber);
                    texturePath = this_1._modelHomeDir + texturePath;
                    var onLoad = function (textureInfo) {
                        _this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);
                        _this._textureCount++;
                        if (_this._textureCount >= textureCount_1) {
                            _this._state = LoadStep.CompleteSetup;
                        }
                    };
                    lappdelegate_1.LAppDelegate.getInstance()
                        .getTextureManager()
                        .createTextureFromPngFile(texturePath, usePremultiply, onLoad);
                    this_1.getRenderer().setIsPremultipliedAlpha(usePremultiply);
                };
                var this_1 = this;
                for (var modelTextureNumber = 0; modelTextureNumber < textureCount_1; modelTextureNumber++) {
                    _loop_2(modelTextureNumber);
                }
                this._state = LoadStep.WaitLoadTexture;
            }
        };
        LAppModel.prototype.reloadRenderer = function () {
            this.deleteRenderer();
            this.createRenderer();
            this.setupTextures();
        };
        LAppModel.prototype.update = function () {
            if (this._state != LoadStep.CompleteSetup)
                return;
            var deltaTimeSeconds = lapppal_1.LAppPal.getDeltaTime();
            this._userTimeSeconds += deltaTimeSeconds;
            this._dragManager.update(deltaTimeSeconds);
            this._dragX = this._dragManager.getX();
            this._dragY = this._dragManager.getY();
            var motionUpdated = false;
            this._model.loadParameters();
            if (this._motionManager.isFinished()) {
                this.startRandomMotion(LAppDefine.MotionGroupIdle, LAppDefine.PriorityIdle);
            }
            else {
                motionUpdated = this._motionManager.updateMotion(this._model, deltaTimeSeconds);
            }
            this._model.saveParameters();
            if (!motionUpdated) {
                if (this._eyeBlink != null) {
                    this._eyeBlink.updateParameters(this._model, deltaTimeSeconds);
                }
            }
            if (this._expressionManager != null) {
                this._expressionManager.updateMotion(this._model, deltaTimeSeconds);
            }
            this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30);
            this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);
            this._model.addParameterValueById(this._idParamAngleZ, this._dragX * this._dragY * -30);
            this._model.addParameterValueById(this._idParamBodyAngleX, this._dragX * 10);
            this._model.addParameterValueById(this._idParamEyeBallX, this._dragX);
            this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);
            if (this._breath != null) {
                this._breath.updateParameters(this._model, deltaTimeSeconds);
            }
            if (this._physics != null) {
                this._physics.evaluate(this._model, deltaTimeSeconds);
            }
            if (this._lipsync) {
                var value = 0.0;
                this._wavFileHandler.update(deltaTimeSeconds);
                value = this._wavFileHandler.getRms();
                for (var i = 0; i < this._lipSyncIds.getSize(); ++i) {
                    this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);
                }
            }
            if (this._pose != null) {
                this._pose.updateParameters(this._model, deltaTimeSeconds);
            }
            this._model.update();
        };
        LAppModel.prototype.startMotion = function (group, no, priority, onFinishedMotionHandler) {
            var _this = this;
            if (priority == LAppDefine.PriorityForce) {
                this._motionManager.setReservePriority(priority);
            }
            else if (!this._motionManager.reserveMotion(priority)) {
                if (this._debugMode) {
                    lapppal_1.LAppPal.printMessage("[APP]can't start motion.");
                }
                return cubismmotionqueuemanager_1.InvalidMotionQueueEntryHandleValue;
            }
            var motionFileName = this._modelSetting.getMotionFileName(group, no);
            var name = "".concat(group, "_").concat(no);
            var motion = this._motions.getValue(name);
            var autoDelete = false;
            if (motion == null) {
                fetch("".concat(this._modelHomeDir).concat(motionFileName))
                    .then(function (response) { return response.arrayBuffer(); })
                    .then(function (arrayBuffer) {
                    motion = _this.loadMotion(arrayBuffer, arrayBuffer.byteLength, null, onFinishedMotionHandler);
                    var fadeTime = _this._modelSetting.getMotionFadeInTimeValue(group, no);
                    if (fadeTime >= 0.0) {
                        motion.setFadeInTime(fadeTime);
                    }
                    fadeTime = _this._modelSetting.getMotionFadeOutTimeValue(group, no);
                    if (fadeTime >= 0.0) {
                        motion.setFadeOutTime(fadeTime);
                    }
                    motion.setEffectIds(_this._eyeBlinkIds, _this._lipSyncIds);
                    autoDelete = true;
                });
            }
            else {
                motion.setFinishedMotionHandler(onFinishedMotionHandler);
            }
            var voice = this._modelSetting.getMotionSoundFileName(group, no);
            if (voice.localeCompare('') != 0) {
                var path = voice;
                path = this._modelHomeDir + path;
                this._wavFileHandler.start(path);
            }
            if (this._debugMode) {
                lapppal_1.LAppPal.printMessage("[APP]start motion: [".concat(group, "_").concat(no));
            }
            return this._motionManager.startMotionPriority(motion, autoDelete, priority);
        };
        LAppModel.prototype.startRandomMotion = function (group, priority, onFinishedMotionHandler) {
            if (this._modelSetting.getMotionCount(group) == 0) {
                return cubismmotionqueuemanager_1.InvalidMotionQueueEntryHandleValue;
            }
            var no = Math.floor(Math.random() * this._modelSetting.getMotionCount(group));
            return this.startMotion(group, no, priority, onFinishedMotionHandler);
        };
        LAppModel.prototype.setExpression = function (expressionId) {
            var motion = this._expressions.getValue(expressionId);
            if (this._debugMode) {
                lapppal_1.LAppPal.printMessage("[APP]expression: [".concat(expressionId, "]"));
            }
            if (motion != null) {
                this._expressionManager.startMotionPriority(motion, false, LAppDefine.PriorityForce);
            }
            else {
                if (this._debugMode) {
                    lapppal_1.LAppPal.printMessage("[APP]expression[".concat(expressionId, "] is null"));
                }
            }
        };
        LAppModel.prototype.setRandomExpression = function () {
            if (this._expressions.getSize() == 0) {
                return;
            }
            var no = Math.floor(Math.random() * this._expressions.getSize());
            for (var i = 0; i < this._expressions.getSize(); i++) {
                if (i == no) {
                    var name_1 = this._expressions._keyValues[i].first;
                    this.setExpression(name_1);
                    return;
                }
            }
        };
        LAppModel.prototype.motionEventFired = function (eventValue) {
            (0, cubismdebug_1.CubismLogInfo)('{0} is fired on LAppModel!!', eventValue.s);
        };
        LAppModel.prototype.hitTest = function (hitArenaName, x, y) {
            if (this._opacity < 1) {
                return false;
            }
            var count = this._modelSetting.getHitAreasCount();
            for (var i = 0; i < count; i++) {
                if (this._modelSetting.getHitAreaName(i) == hitArenaName) {
                    var drawId = this._modelSetting.getHitAreaId(i);
                    return this.isHit(drawId, x, y);
                }
            }
            return false;
        };
        LAppModel.prototype.preLoadMotionGroup = function (group) {
            var _this = this;
            var _loop_3 = function (i) {
                var motionFileName = this_2._modelSetting.getMotionFileName(group, i);
                var name_2 = "".concat(group, "_").concat(i);
                if (this_2._debugMode) {
                    lapppal_1.LAppPal.printMessage("[APP]load motion: ".concat(motionFileName, " => [").concat(name_2, "]"));
                }
                fetch("".concat(this_2._modelHomeDir).concat(motionFileName))
                    .then(function (response) { return response.arrayBuffer(); })
                    .then(function (arrayBuffer) {
                    var tmpMotion = _this.loadMotion(arrayBuffer, arrayBuffer.byteLength, name_2);
                    var fadeTime = _this._modelSetting.getMotionFadeInTimeValue(group, i);
                    if (fadeTime >= 0.0) {
                        tmpMotion.setFadeInTime(fadeTime);
                    }
                    fadeTime = _this._modelSetting.getMotionFadeOutTimeValue(group, i);
                    if (fadeTime >= 0.0) {
                        tmpMotion.setFadeOutTime(fadeTime);
                    }
                    tmpMotion.setEffectIds(_this._eyeBlinkIds, _this._lipSyncIds);
                    if (_this._motions.getValue(name_2) != null) {
                        acubismmotion_1.ACubismMotion.delete(_this._motions.getValue(name_2));
                    }
                    _this._motions.setValue(name_2, tmpMotion);
                    _this._motionCount++;
                    if (_this._motionCount >= _this._allMotionCount) {
                        _this._state = LoadStep.LoadTexture;
                        _this._motionManager.stopAllMotions();
                        _this._updating = false;
                        _this._initialized = true;
                        _this.createRenderer();
                        _this.setupTextures();
                        _this.getRenderer().startUp(lappdelegate_1.gl);
                    }
                });
            };
            var this_2 = this;
            for (var i = 0; i < this._modelSetting.getMotionCount(group); i++) {
                _loop_3(i);
            }
        };
        LAppModel.prototype.releaseMotions = function () {
            this._motions.clear();
        };
        LAppModel.prototype.releaseExpressions = function () {
            this._expressions.clear();
        };
        LAppModel.prototype.doDraw = function () {
            if (this._model == null)
                return;
            var viewport = [0, 0, lappdelegate_1.canvas.width, lappdelegate_1.canvas.height];
            this.getRenderer().setRenderState(lappdelegate_1.frameBuffer, viewport);
            this.getRenderer().drawModel();
        };
        LAppModel.prototype.draw = function (matrix) {
            if (this._model == null) {
                return;
            }
            if (this._state == LoadStep.CompleteSetup) {
                matrix.multiplyByMatrix(this._modelMatrix);
                this.getRenderer().setMvpMatrix(matrix);
                this.doDraw();
            }
        };
        return LAppModel;
    }(cubismusermodel_1.CubismUserModel));
    exports.LAppModel = LAppModel;
    
    
    /***/ }),
    
    /***/ "./src/lapppal.ts":
    /*!************************!*\
      !*** ./src/lapppal.ts ***!
      \************************/
    /***/ (function(__unused_webpack_module, exports) {
    
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LAppPal = void 0;
    var LAppPal = (function () {
        function LAppPal() {
        }
        LAppPal.loadFileAsBytes = function (filePath, callback) {
            fetch(filePath)
                .then(function (response) { return response.arrayBuffer(); })
                .then(function (arrayBuffer) { return callback(arrayBuffer, arrayBuffer.byteLength); });
        };
        LAppPal.getDeltaTime = function () {
            return this.s_deltaTime;
        };
        LAppPal.updateTime = function () {
            this.s_currentFrame = Date.now();
            this.s_deltaTime = (this.s_currentFrame - this.s_lastFrame) / 1000;
            this.s_lastFrame = this.s_currentFrame;
        };
        LAppPal.printMessage = function (message) {
            console.log(message);
        };
        LAppPal.lastUpdate = Date.now();
        LAppPal.s_currentFrame = 0.0;
        LAppPal.s_lastFrame = 0.0;
        LAppPal.s_deltaTime = 0.0;
        return LAppPal;
    }());
    exports.LAppPal = LAppPal;
    
    
    /***/ }),
    
    /***/ "./src/lappsprite.ts":
    /*!***************************!*\
      !*** ./src/lappsprite.ts ***!
      \***************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Rect = exports.LAppSprite = void 0;
    var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
    var LAppSprite = (function () {
        function LAppSprite(x, y, width, height, textureId) {
            this._rect = new Rect();
            this._rect.left = x - width * 0.5;
            this._rect.right = x + width * 0.5;
            this._rect.up = y + height * 0.5;
            this._rect.down = y - height * 0.5;
            this._texture = textureId;
            this._vertexBuffer = null;
            this._uvBuffer = null;
            this._indexBuffer = null;
            this._positionLocation = null;
            this._uvLocation = null;
            this._textureLocation = null;
            this._positionArray = null;
            this._uvArray = null;
            this._indexArray = null;
            this._firstDraw = true;
        }
        LAppSprite.prototype.release = function () {
            this._rect = null;
            lappdelegate_1.gl.deleteTexture(this._texture);
            this._texture = null;
            lappdelegate_1.gl.deleteBuffer(this._uvBuffer);
            this._uvBuffer = null;
            lappdelegate_1.gl.deleteBuffer(this._vertexBuffer);
            this._vertexBuffer = null;
            lappdelegate_1.gl.deleteBuffer(this._indexBuffer);
            this._indexBuffer = null;
        };
        LAppSprite.prototype.getTexture = function () {
            return this._texture;
        };
        LAppSprite.prototype.render = function (programId) {
            if (this._texture == null) {
                return;
            }
            if (this._firstDraw) {
                this._positionLocation = lappdelegate_1.gl.getAttribLocation(programId, 'position');
                lappdelegate_1.gl.enableVertexAttribArray(this._positionLocation);
                this._uvLocation = lappdelegate_1.gl.getAttribLocation(programId, 'uv');
                lappdelegate_1.gl.enableVertexAttribArray(this._uvLocation);
                this._textureLocation = lappdelegate_1.gl.getUniformLocation(programId, 'texture');
                lappdelegate_1.gl.uniform1i(this._textureLocation, 0);
                {
                    this._uvArray = new Float32Array([
                        1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0
                    ]);
                    this._uvBuffer = lappdelegate_1.gl.createBuffer();
                }
                {
                    var maxWidth = lappdelegate_1.canvas.width;
                    var maxHeight = lappdelegate_1.canvas.height;
                    this._positionArray = new Float32Array([
                        (this._rect.right - maxWidth * 0.5) / (maxWidth * 0.5),
                        (this._rect.up - maxHeight * 0.5) / (maxHeight * 0.5),
                        (this._rect.left - maxWidth * 0.5) / (maxWidth * 0.5),
                        (this._rect.up - maxHeight * 0.5) / (maxHeight * 0.5),
                        (this._rect.left - maxWidth * 0.5) / (maxWidth * 0.5),
                        (this._rect.down - maxHeight * 0.5) / (maxHeight * 0.5),
                        (this._rect.right - maxWidth * 0.5) / (maxWidth * 0.5),
                        (this._rect.down - maxHeight * 0.5) / (maxHeight * 0.5)
                    ]);
                    this._vertexBuffer = lappdelegate_1.gl.createBuffer();
                }
                {
                    this._indexArray = new Uint16Array([0, 1, 2, 3, 2, 0]);
                    this._indexBuffer = lappdelegate_1.gl.createBuffer();
                }
                this._firstDraw = false;
            }
            lappdelegate_1.gl.bindBuffer(lappdelegate_1.gl.ARRAY_BUFFER, this._uvBuffer);
            lappdelegate_1.gl.bufferData(lappdelegate_1.gl.ARRAY_BUFFER, this._uvArray, lappdelegate_1.gl.STATIC_DRAW);
            lappdelegate_1.gl.vertexAttribPointer(this._uvLocation, 2, lappdelegate_1.gl.FLOAT, false, 0, 0);
            lappdelegate_1.gl.bindBuffer(lappdelegate_1.gl.ARRAY_BUFFER, this._vertexBuffer);
            lappdelegate_1.gl.bufferData(lappdelegate_1.gl.ARRAY_BUFFER, this._positionArray, lappdelegate_1.gl.STATIC_DRAW);
            lappdelegate_1.gl.vertexAttribPointer(this._positionLocation, 2, lappdelegate_1.gl.FLOAT, false, 0, 0);
            lappdelegate_1.gl.bindBuffer(lappdelegate_1.gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
            lappdelegate_1.gl.bufferData(lappdelegate_1.gl.ELEMENT_ARRAY_BUFFER, this._indexArray, lappdelegate_1.gl.DYNAMIC_DRAW);
            lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, this._texture);
            lappdelegate_1.gl.drawElements(lappdelegate_1.gl.TRIANGLES, this._indexArray.length, lappdelegate_1.gl.UNSIGNED_SHORT, 0);
        };
        LAppSprite.prototype.isHit = function (pointX, pointY) {
            var height = lappdelegate_1.canvas.height;
            var y = height - pointY;
            return (pointX >= this._rect.left &&
                pointX <= this._rect.right &&
                y <= this._rect.up &&
                y >= this._rect.down);
        };
        return LAppSprite;
    }());
    exports.LAppSprite = LAppSprite;
    var Rect = (function () {
        function Rect() {
        }
        return Rect;
    }());
    exports.Rect = Rect;
    
    
    /***/ }),
    
    /***/ "./src/lapptexturemanager.ts":
    /*!***********************************!*\
      !*** ./src/lapptexturemanager.ts ***!
      \***********************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.TextureInfo = exports.LAppTextureManager = void 0;
    var csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ "../../../Framework/src/type/csmvector.ts");
    var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
    var LAppTextureManager = (function () {
        function LAppTextureManager() {
            this._textures = new csmvector_1.csmVector();
        }
        LAppTextureManager.prototype.release = function () {
            for (var ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {
                lappdelegate_1.gl.deleteTexture(ite.ptr().id);
            }
            this._textures = null;
        };
        LAppTextureManager.prototype.createTextureFromPngFile = function (fileName, usePremultiply, callback) {
            var _this = this;
            var _loop_1 = function (ite) {
                if (ite.ptr().fileName == fileName &&
                    ite.ptr().usePremultply == usePremultiply) {
                    ite.ptr().img = new Image();
                    ite.ptr().img.onload = function () { return callback(ite.ptr()); };
                    ite.ptr().img.src = fileName;
                    return { value: void 0 };
                }
            };
            for (var ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {
                var state_1 = _loop_1(ite);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
            var img = new Image();
            img.crossOrigin = '';
            img.onload = function () {
                var tex = lappdelegate_1.gl.createTexture();
                lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, tex);
                lappdelegate_1.gl.texParameteri(lappdelegate_1.gl.TEXTURE_2D, lappdelegate_1.gl.TEXTURE_MIN_FILTER, lappdelegate_1.gl.LINEAR_MIPMAP_LINEAR);
                lappdelegate_1.gl.texParameteri(lappdelegate_1.gl.TEXTURE_2D, lappdelegate_1.gl.TEXTURE_MAG_FILTER, lappdelegate_1.gl.LINEAR);
                if (usePremultiply) {
                    lappdelegate_1.gl.pixelStorei(lappdelegate_1.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);
                }
                lappdelegate_1.gl.texImage2D(lappdelegate_1.gl.TEXTURE_2D, 0, lappdelegate_1.gl.RGBA, lappdelegate_1.gl.RGBA, lappdelegate_1.gl.UNSIGNED_BYTE, img);
                lappdelegate_1.gl.generateMipmap(lappdelegate_1.gl.TEXTURE_2D);
                lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, null);
                var textureInfo = new TextureInfo();
                if (textureInfo != null) {
                    textureInfo.fileName = fileName;
                    textureInfo.width = img.width;
                    textureInfo.height = img.height;
                    textureInfo.id = tex;
                    textureInfo.img = img;
                    textureInfo.usePremultply = usePremultiply;
                    _this._textures.pushBack(textureInfo);
                }
                callback(textureInfo);
            };
            img.src = fileName;
        };
        LAppTextureManager.prototype.releaseTextures = function () {
            for (var i = 0; i < this._textures.getSize(); i++) {
                this._textures.set(i, null);
            }
            this._textures.clear();
        };
        LAppTextureManager.prototype.releaseTextureByTexture = function (texture) {
            for (var i = 0; i < this._textures.getSize(); i++) {
                if (this._textures.at(i).id != texture) {
                    continue;
                }
                this._textures.set(i, null);
                this._textures.remove(i);
                break;
            }
        };
        LAppTextureManager.prototype.releaseTextureByFilePath = function (fileName) {
            for (var i = 0; i < this._textures.getSize(); i++) {
                if (this._textures.at(i).fileName == fileName) {
                    this._textures.set(i, null);
                    this._textures.remove(i);
                    break;
                }
            }
        };
        return LAppTextureManager;
    }());
    exports.LAppTextureManager = LAppTextureManager;
    var TextureInfo = (function () {
        function TextureInfo() {
            this.id = null;
            this.width = 0;
            this.height = 0;
        }
        return TextureInfo;
    }());
    exports.TextureInfo = TextureInfo;
    
    
    /***/ }),
    
    /***/ "./src/lappview.ts":
    /*!*************************!*\
      !*** ./src/lappview.ts ***!
      \*************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LAppView = void 0;
    var cubismmatrix44_1 = __webpack_require__(/*! @framework/math/cubismmatrix44 */ "../../../Framework/src/math/cubismmatrix44.ts");
    var cubismviewmatrix_1 = __webpack_require__(/*! @framework/math/cubismviewmatrix */ "../../../Framework/src/math/cubismviewmatrix.ts");
    var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/lappdefine.ts"));
    var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
    var lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ "./src/lapplive2dmanager.ts");
    var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/lapppal.ts");
    var lappsprite_1 = __webpack_require__(/*! ./lappsprite */ "./src/lappsprite.ts");
    var touchmanager_1 = __webpack_require__(/*! ./touchmanager */ "./src/touchmanager.ts");
    var LAppView = (function () {
        function LAppView() {
            this._programId = null;
            this._back = null;
            this._gear = null;
            this._touchManager = new touchmanager_1.TouchManager();
            this._deviceToScreen = new cubismmatrix44_1.CubismMatrix44();
            this._viewMatrix = new cubismviewmatrix_1.CubismViewMatrix();
        }
        LAppView.prototype.initialize = function () {
            var width = lappdelegate_1.canvas.width, height = lappdelegate_1.canvas.height;
            var ratio = width / height;
            var left = -ratio;
            var right = ratio;
            var bottom = LAppDefine.ViewLogicalLeft;
            var top = LAppDefine.ViewLogicalRight;
            this._viewMatrix.setScreenRect(left, right, bottom, top);
            this._viewMatrix.scale(LAppDefine.ViewScale, LAppDefine.ViewScale);
            this._deviceToScreen.loadIdentity();
            if (width > height) {
                var screenW = Math.abs(right - left);
                this._deviceToScreen.scaleRelative(screenW / width, -screenW / width);
            }
            else {
                var screenH = Math.abs(top - bottom);
                this._deviceToScreen.scaleRelative(screenH / height, -screenH / height);
            }
            this._deviceToScreen.translateRelative(-width * 0.5, -height * 0.5);
            this._viewMatrix.setMaxScale(LAppDefine.ViewMaxScale);
            this._viewMatrix.setMinScale(LAppDefine.ViewMinScale);
            this._viewMatrix.setMaxScreenRect(LAppDefine.ViewLogicalMaxLeft, LAppDefine.ViewLogicalMaxRight, LAppDefine.ViewLogicalMaxBottom, LAppDefine.ViewLogicalMaxTop);
        };
        LAppView.prototype.release = function () {
            this._viewMatrix = null;
            this._touchManager = null;
            this._deviceToScreen = null;
            this._gear.release();
            this._gear = null;
            this._back.release();
            this._back = null;
            lappdelegate_1.gl.deleteProgram(this._programId);
            this._programId = null;
        };
        LAppView.prototype.render = function () {
            lappdelegate_1.gl.useProgram(this._programId);
            if (this._back) {
                this._back.render(this._programId);
            }
            if (this._gear) {
                this._gear.render(this._programId);
            }
            lappdelegate_1.gl.flush();
            var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
            live2DManager.setViewMatrix(this._viewMatrix);
            live2DManager.onUpdate();
        };
        LAppView.prototype.initializeSprite = function () {
            var _this = this;
            var width = lappdelegate_1.canvas.width;
            var height = lappdelegate_1.canvas.height;
            var textureManager = lappdelegate_1.LAppDelegate.getInstance().getTextureManager();
            var resourcesPath = LAppDefine.ResourcesPath;
            var imageName = '';
            imageName = LAppDefine.BackImageName;
            var initBackGroundTexture = function (textureInfo) {
                var x = width * 0.5;
                var y = height * 0.5;
                var fwidth = textureInfo.width * 2.0;
                var fheight = height * 0.95;
                _this._back = new lappsprite_1.LAppSprite(x, y, fwidth, fheight, textureInfo.id);
            };
            imageName = LAppDefine.GearImageName;
            var initGearTexture = function (textureInfo) {
                var x = width - textureInfo.width * 0.5;
                var y = height - textureInfo.height * 0.5;
                var fwidth = textureInfo.width;
                var fheight = textureInfo.height;
                _this._gear = new lappsprite_1.LAppSprite(x, y, fwidth, fheight, textureInfo.id);
            };
            if (this._programId == null) {
                this._programId = lappdelegate_1.LAppDelegate.getInstance().createShader();
            }
        };
        LAppView.prototype.onTouchesBegan = function (pointX, pointY) {
            this._touchManager.touchesBegan(pointX, pointY);
        };
        LAppView.prototype.onTouchesMoved = function (pointX, pointY) {
            var viewX = this.transformViewX(this._touchManager.getX());
            var viewY = this.transformViewY(this._touchManager.getY());
            this._touchManager.touchesMoved(pointX, pointY);
            var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
            live2DManager.onDrag(viewX, viewY);
        };
        LAppView.prototype.onTouchesEnded = function (pointX, pointY) {
            var _a;
            var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
            live2DManager.onDrag(0.0, 0.0);
            {
                var x = this._deviceToScreen.transformX(this._touchManager.getX());
                var y = this._deviceToScreen.transformY(this._touchManager.getY());
                if (LAppDefine.DebugTouchLogEnable) {
                    lapppal_1.LAppPal.printMessage("[APP]touchesEnded x: ".concat(x, " y: ").concat(y));
                }
                live2DManager.onTap(x, y);
                if ((_a = this._gear) === null || _a === void 0 ? void 0 : _a.isHit(pointX, pointY)) {
                    live2DManager.nextScene();
                }
            }
        };
        LAppView.prototype.transformViewX = function (deviceX) {
            var screenX = this._deviceToScreen.transformX(deviceX);
            return this._viewMatrix.invertTransformX(screenX);
        };
        LAppView.prototype.transformViewY = function (deviceY) {
            var screenY = this._deviceToScreen.transformY(deviceY);
            return this._viewMatrix.invertTransformY(screenY);
        };
        LAppView.prototype.transformScreenX = function (deviceX) {
            return this._deviceToScreen.transformX(deviceX);
        };
        LAppView.prototype.transformScreenY = function (deviceY) {
            return this._deviceToScreen.transformY(deviceY);
        };
        return LAppView;
    }());
    exports.LAppView = LAppView;
    
    
    /***/ }),
    
    /***/ "./src/lappwavfilehandler.ts":
    /*!***********************************!*\
      !*** ./src/lappwavfilehandler.ts ***!
      \***********************************/
    /***/ (function(__unused_webpack_module, exports) {
    
    "use strict";
    
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ByteReader = exports.WavFileInfo = exports.LAppWavFileHandler = exports.s_instance = void 0;
    exports.s_instance = null;
    var LAppWavFileHandler = (function () {
        function LAppWavFileHandler() {
            var _this = this;
            this._loadFiletoBytes = function (arrayBuffer, length) {
                _this._byteReader._fileByte = arrayBuffer;
                _this._byteReader._fileDataView = new DataView(_this._byteReader._fileByte);
                _this._byteReader._fileSize = length;
            };
            this._pcmData = null;
            this._userTimeSeconds = 0.0;
            this._lastRms = 0.0;
            this._sampleOffset = 0.0;
            this._wavFileInfo = new WavFileInfo();
            this._byteReader = new ByteReader();
        }
        LAppWavFileHandler.getInstance = function () {
            if (exports.s_instance == null) {
                exports.s_instance = new LAppWavFileHandler();
            }
            return exports.s_instance;
        };
        LAppWavFileHandler.releaseInstance = function () {
            if (exports.s_instance != null) {
                exports.s_instance = void 0;
            }
            exports.s_instance = null;
        };
        LAppWavFileHandler.prototype.update = function (deltaTimeSeconds) {
            var goalOffset;
            var rms;
            if (this._pcmData == null ||
                this._sampleOffset >= this._wavFileInfo._samplesPerChannel) {
                this._lastRms = 0.0;
                return false;
            }
            this._userTimeSeconds += deltaTimeSeconds;
            goalOffset = Math.floor(this._userTimeSeconds * this._wavFileInfo._samplingRate);
            if (goalOffset > this._wavFileInfo._samplesPerChannel) {
                goalOffset = this._wavFileInfo._samplesPerChannel;
            }
            rms = 0.0;
            for (var channelCount = 0; channelCount < this._wavFileInfo._numberOfChannels; channelCount++) {
                for (var sampleCount = this._sampleOffset; sampleCount < goalOffset; sampleCount++) {
                    var pcm = this._pcmData[channelCount][sampleCount];
                    rms += pcm * pcm;
                }
            }
            rms = Math.sqrt(rms /
                (this._wavFileInfo._numberOfChannels *
                    (goalOffset - this._sampleOffset)));
            this._lastRms = rms;
            this._sampleOffset = goalOffset;
            return true;
        };
        LAppWavFileHandler.prototype.start = function (filePath) {
            this._sampleOffset = 0;
            this._userTimeSeconds = 0.0;
            this._lastRms = 0.0;
            if (!this.loadWavFile(filePath)) {
                return;
            }
        };
        LAppWavFileHandler.prototype.getRms = function () {
            return this._lastRms;
        };
        LAppWavFileHandler.prototype.loadWavFile = function (filePath) {
            var _this = this;
            var ret = false;
            if (this._pcmData != null) {
                this.releasePcmData();
            }
            var asyncFileLoad = function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, fetch(filePath).then(function (responce) {
                            return responce.arrayBuffer();
                        })];
                });
            }); };
            var asyncWavFileManager = (function () { return __awaiter(_this, void 0, void 0, function () {
                var _a, fmtChunkSize, dataChunkSize, channelCount, sampleCount, channelCount;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this._byteReader;
                            return [4, asyncFileLoad()];
                        case 1:
                            _a._fileByte = _b.sent();
                            this._byteReader._fileDataView = new DataView(this._byteReader._fileByte);
                            this._byteReader._fileSize = this._byteReader._fileByte.byteLength;
                            this._byteReader._readOffset = 0;
                            if (this._byteReader._fileByte == null ||
                                this._byteReader._fileSize < 4) {
                                return [2, false];
                            }
                            this._wavFileInfo._fileName = filePath;
                            try {
                                if (!this._byteReader.getCheckSignature('RIFF')) {
                                    ret = false;
                                    throw new Error('Cannot find Signeture "RIFF".');
                                }
                                this._byteReader.get32LittleEndian();
                                if (!this._byteReader.getCheckSignature('WAVE')) {
                                    ret = false;
                                    throw new Error('Cannot find Signeture "WAVE".');
                                }
                                if (!this._byteReader.getCheckSignature('fmt ')) {
                                    ret = false;
                                    throw new Error('Cannot find Signeture "fmt".');
                                }
                                fmtChunkSize = this._byteReader.get32LittleEndian();
                                if (this._byteReader.get16LittleEndian() != 1) {
                                    ret = false;
                                    throw new Error('File is not linear PCM.');
                                }
                                this._wavFileInfo._numberOfChannels =
                                    this._byteReader.get16LittleEndian();
                                this._wavFileInfo._samplingRate = this._byteReader.get32LittleEndian();
                                this._byteReader.get32LittleEndian();
                                this._byteReader.get16LittleEndian();
                                this._wavFileInfo._bitsPerSample = this._byteReader.get16LittleEndian();
                                if (fmtChunkSize > 16) {
                                    this._byteReader._readOffset += fmtChunkSize - 16;
                                }
                                while (!this._byteReader.getCheckSignature('data') &&
                                    this._byteReader._readOffset < this._byteReader._fileSize) {
                                    this._byteReader._readOffset +=
                                        this._byteReader.get32LittleEndian() + 4;
                                }
                                if (this._byteReader._readOffset >= this._byteReader._fileSize) {
                                    ret = false;
                                    throw new Error('Cannot find "data" Chunk.');
                                }
                                {
                                    dataChunkSize = this._byteReader.get32LittleEndian();
                                    this._wavFileInfo._samplesPerChannel =
                                        (dataChunkSize * 8) /
                                            (this._wavFileInfo._bitsPerSample *
                                                this._wavFileInfo._numberOfChannels);
                                }
                                this._pcmData = new Array(this._wavFileInfo._numberOfChannels);
                                for (channelCount = 0; channelCount < this._wavFileInfo._numberOfChannels; channelCount++) {
                                    this._pcmData[channelCount] = new Float32Array(this._wavFileInfo._samplesPerChannel);
                                }
                                for (sampleCount = 0; sampleCount < this._wavFileInfo._samplesPerChannel; sampleCount++) {
                                    for (channelCount = 0; channelCount < this._wavFileInfo._numberOfChannels; channelCount++) {
                                        this._pcmData[channelCount][sampleCount] = this.getPcmSample();
                                    }
                                }
                                ret = true;
                            }
                            catch (e) {
                                console.log(e);
                            }
                            return [2];
                    }
                });
            }); })();
            return ret;
        };
        LAppWavFileHandler.prototype.getPcmSample = function () {
            var pcm32;
            switch (this._wavFileInfo._bitsPerSample) {
                case 8:
                    pcm32 = this._byteReader.get8() - 128;
                    pcm32 <<= 24;
                    break;
                case 16:
                    pcm32 = this._byteReader.get16LittleEndian() << 16;
                    break;
                case 24:
                    pcm32 = this._byteReader.get24LittleEndian() << 8;
                    break;
                default:
                    pcm32 = 0;
                    break;
            }
            return pcm32 / 2147483647;
        };
        LAppWavFileHandler.prototype.releasePcmData = function () {
            for (var channelCount = 0; channelCount < this._wavFileInfo._numberOfChannels; channelCount++) {
                delete this._pcmData[channelCount];
            }
            delete this._pcmData;
            this._pcmData = null;
        };
        return LAppWavFileHandler;
    }());
    exports.LAppWavFileHandler = LAppWavFileHandler;
    var WavFileInfo = (function () {
        function WavFileInfo() {
            this._fileName = '';
            this._numberOfChannels = 0;
            this._bitsPerSample = 0;
            this._samplingRate = 0;
            this._samplesPerChannel = 0;
        }
        return WavFileInfo;
    }());
    exports.WavFileInfo = WavFileInfo;
    var ByteReader = (function () {
        function ByteReader() {
            this._fileByte = null;
            this._fileDataView = null;
            this._fileSize = 0;
            this._readOffset = 0;
        }
        ByteReader.prototype.get8 = function () {
            var ret = this._fileDataView.getUint8(this._readOffset);
            this._readOffset++;
            return ret;
        };
        ByteReader.prototype.get16LittleEndian = function () {
            var ret = (this._fileDataView.getUint8(this._readOffset + 1) << 8) |
                this._fileDataView.getUint8(this._readOffset);
            this._readOffset += 2;
            return ret;
        };
        ByteReader.prototype.get24LittleEndian = function () {
            var ret = (this._fileDataView.getUint8(this._readOffset + 2) << 16) |
                (this._fileDataView.getUint8(this._readOffset + 1) << 8) |
                this._fileDataView.getUint8(this._readOffset);
            this._readOffset += 3;
            return ret;
        };
        ByteReader.prototype.get32LittleEndian = function () {
            var ret = (this._fileDataView.getUint8(this._readOffset + 3) << 24) |
                (this._fileDataView.getUint8(this._readOffset + 2) << 16) |
                (this._fileDataView.getUint8(this._readOffset + 1) << 8) |
                this._fileDataView.getUint8(this._readOffset);
            this._readOffset += 4;
            return ret;
        };
        ByteReader.prototype.getCheckSignature = function (reference) {
            var getSignature = new Uint8Array(4);
            var referenceString = new TextEncoder().encode(reference);
            if (reference.length != 4) {
                return false;
            }
            for (var signatureOffset = 0; signatureOffset < 4; signatureOffset++) {
                getSignature[signatureOffset] = this.get8();
            }
            return (getSignature[0] == referenceString[0] &&
                getSignature[1] == referenceString[1] &&
                getSignature[2] == referenceString[2] &&
                getSignature[3] == referenceString[3]);
        };
        return ByteReader;
    }());
    exports.ByteReader = ByteReader;
    
    
    /***/ }),
    
    /***/ "./src/main.ts":
    /*!*********************!*\
      !*** ./src/main.ts ***!
      \*********************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (this && this.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
    var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/lappdefine.ts"));
    window.onload = function () {
        if (lappdelegate_1.LAppDelegate.getInstance().initialize() == false) {
            return;
        }
        lappdelegate_1.LAppDelegate.getInstance().run();
    };
    window.onbeforeunload = function () { return lappdelegate_1.LAppDelegate.releaseInstance(); };
    window.onresize = function () {
        if (LAppDefine.CanvasSize === 'auto') {
            console.log('-------------------------------');
            lappdelegate_1.LAppDelegate.getInstance().onResize();
        }
    };
    
    
    /***/ }),
    
    /***/ "./src/touchmanager.ts":
    /*!*****************************!*\
      !*** ./src/touchmanager.ts ***!
      \*****************************/
    /***/ (function(__unused_webpack_module, exports) {
    
    "use strict";
    
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.TouchManager = void 0;
    var TouchManager = (function () {
        function TouchManager() {
            this._startX = 0.0;
            this._startY = 0.0;
            this._lastX = 0.0;
            this._lastY = 0.0;
            this._lastX1 = 0.0;
            this._lastY1 = 0.0;
            this._lastX2 = 0.0;
            this._lastY2 = 0.0;
            this._lastTouchDistance = 0.0;
            this._deltaX = 0.0;
            this._deltaY = 0.0;
            this._scale = 1.0;
            this._touchSingle = false;
            this._flipAvailable = false;
        }
        TouchManager.prototype.getCenterX = function () {
            return this._lastX;
        };
        TouchManager.prototype.getCenterY = function () {
            return this._lastY;
        };
        TouchManager.prototype.getDeltaX = function () {
            return this._deltaX;
        };
        TouchManager.prototype.getDeltaY = function () {
            return this._deltaY;
        };
        TouchManager.prototype.getStartX = function () {
            return this._startX;
        };
        TouchManager.prototype.getStartY = function () {
            return this._startY;
        };
        TouchManager.prototype.getScale = function () {
            return this._scale;
        };
        TouchManager.prototype.getX = function () {
            return this._lastX;
        };
        TouchManager.prototype.getY = function () {
            return this._lastY;
        };
        TouchManager.prototype.getX1 = function () {
            return this._lastX1;
        };
        TouchManager.prototype.getY1 = function () {
            return this._lastY1;
        };
        TouchManager.prototype.getX2 = function () {
            return this._lastX2;
        };
        TouchManager.prototype.getY2 = function () {
            return this._lastY2;
        };
        TouchManager.prototype.isSingleTouch = function () {
            return this._touchSingle;
        };
        TouchManager.prototype.isFlickAvailable = function () {
            return this._flipAvailable;
        };
        TouchManager.prototype.disableFlick = function () {
            this._flipAvailable = false;
        };
        TouchManager.prototype.touchesBegan = function (deviceX, deviceY) {
            this._lastX = deviceX;
            this._lastY = deviceY;
            this._startX = deviceX;
            this._startY = deviceY;
            this._lastTouchDistance = -1.0;
            this._flipAvailable = true;
            this._touchSingle = true;
        };
        TouchManager.prototype.touchesMoved = function (deviceX, deviceY) {
            this._lastX = deviceX;
            this._lastY = deviceY;
            this._lastTouchDistance = -1.0;
            this._touchSingle = true;
        };
        TouchManager.prototype.getFlickDistance = function () {
            return this.calculateDistance(this._startX, this._startY, this._lastX, this._lastY);
        };
        TouchManager.prototype.calculateDistance = function (x1, y1, x2, y2) {
            return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
        };
        TouchManager.prototype.calculateMovingAmount = function (v1, v2) {
            if (v1 > 0.0 != v2 > 0.0) {
                return 0.0;
            }
            var sign = v1 > 0.0 ? 1.0 : -1.0;
            var absoluteValue1 = Math.abs(v1);
            var absoluteValue2 = Math.abs(v2);
            return (sign * (absoluteValue1 < absoluteValue2 ? absoluteValue1 : absoluteValue2));
        };
        return TouchManager;
    }());
    exports.TouchManager = TouchManager;
    
    
    /***/ }),
    
    /***/ "./node_modules/url/node_modules/punycode/punycode.js":
    /*!************************************************************!*\
      !*** ./node_modules/url/node_modules/punycode/punycode.js ***!
      \************************************************************/
    /***/ (function(module, exports, __webpack_require__) {
    
    /* module decorator */ module = __webpack_require__.nmd(module);
    var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.3.2 by @mathias */
    ;(function(root) {
    
        /** Detect free variables */
        var freeExports =  true && exports &&
            !exports.nodeType && exports;
        var freeModule =  true && module &&
            !module.nodeType && module;
        var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g;
        if (
            freeGlobal.global === freeGlobal ||
            freeGlobal.window === freeGlobal ||
            freeGlobal.self === freeGlobal
        ) {
            root = freeGlobal;
        }
    
        /**
         * The `punycode` object.
         * @name punycode
         * @type Object
         */
        var punycode,
    
        /** Highest positive signed 32-bit float value */
        maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
    
        /** Bootstring parameters */
        base = 36,
        tMin = 1,
        tMax = 26,
        skew = 38,
        damp = 700,
        initialBias = 72,
        initialN = 128, // 0x80
        delimiter = '-', // '\x2D'
    
        /** Regular expressions */
        regexPunycode = /^xn--/,
        regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
        regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
    
        /** Error messages */
        errors = {
            'overflow': 'Overflow: input needs wider integers to process',
            'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
            'invalid-input': 'Invalid input'
        },
    
        /** Convenience shortcuts */
        baseMinusTMin = base - tMin,
        floor = Math.floor,
        stringFromCharCode = String.fromCharCode,
    
        /** Temporary variable */
        key;
    
        /*--------------------------------------------------------------------------*/
    
        /**
         * A generic error utility function.
         * @private
         * @param {String} type The error type.
         * @returns {Error} Throws a `RangeError` with the applicable error message.
         */
        function error(type) {
            throw RangeError(errors[type]);
        }
    
        /**
         * A generic `Array#map` utility function.
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} callback The function that gets called for every array
         * item.
         * @returns {Array} A new array of values returned by the callback function.
         */
        function map(array, fn) {
            var length = array.length;
            var result = [];
            while (length--) {
                result[length] = fn(array[length]);
            }
            return result;
        }
    
        /**
         * A simple `Array#map`-like wrapper to work with domain name strings or email
         * addresses.
         * @private
         * @param {String} domain The domain name or email address.
         * @param {Function} callback The function that gets called for every
         * character.
         * @returns {Array} A new string of characters returned by the callback
         * function.
         */
        function mapDomain(string, fn) {
            var parts = string.split('@');
            var result = '';
            if (parts.length > 1) {
                // In email addresses, only the domain name should be punycoded. Leave
                // the local part (i.e. everything up to `@`) intact.
                result = parts[0] + '@';
                string = parts[1];
            }
            // Avoid `split(regex)` for IE8 compatibility. See #17.
            string = string.replace(regexSeparators, '\x2E');
            var labels = string.split('.');
            var encoded = map(labels, fn).join('.');
            return result + encoded;
        }
    
        /**
         * Creates an array containing the numeric code points of each Unicode
         * character in the string. While JavaScript uses UCS-2 internally,
         * this function will convert a pair of surrogate halves (each of which
         * UCS-2 exposes as separate characters) into a single code point,
         * matching UTF-16.
         * @see `punycode.ucs2.encode`
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode.ucs2
         * @name decode
         * @param {String} string The Unicode input string (UCS-2).
         * @returns {Array} The new array of code points.
         */
        function ucs2decode(string) {
            var output = [],
                counter = 0,
                length = string.length,
                value,
                extra;
            while (counter < length) {
                value = string.charCodeAt(counter++);
                if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                    // high surrogate, and there is a next character
                    extra = string.charCodeAt(counter++);
                    if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                    } else {
                        // unmatched surrogate; only append this code unit, in case the next
                        // code unit is the high surrogate of a surrogate pair
                        output.push(value);
                        counter--;
                    }
                } else {
                    output.push(value);
                }
            }
            return output;
        }
    
        /**
         * Creates a string based on an array of numeric code points.
         * @see `punycode.ucs2.decode`
         * @memberOf punycode.ucs2
         * @name encode
         * @param {Array} codePoints The array of numeric code points.
         * @returns {String} The new Unicode string (UCS-2).
         */
        function ucs2encode(array) {
            return map(array, function(value) {
                var output = '';
                if (value > 0xFFFF) {
                    value -= 0x10000;
                    output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                    value = 0xDC00 | value & 0x3FF;
                }
                output += stringFromCharCode(value);
                return output;
            }).join('');
        }
    
        /**
         * Converts a basic code point into a digit/integer.
         * @see `digitToBasic()`
         * @private
         * @param {Number} codePoint The basic numeric code point value.
         * @returns {Number} The numeric value of a basic code point (for use in
         * representing integers) in the range `0` to `base - 1`, or `base` if
         * the code point does not represent a value.
         */
        function basicToDigit(codePoint) {
            if (codePoint - 48 < 10) {
                return codePoint - 22;
            }
            if (codePoint - 65 < 26) {
                return codePoint - 65;
            }
            if (codePoint - 97 < 26) {
                return codePoint - 97;
            }
            return base;
        }
    
        /**
         * Converts a digit/integer into a basic code point.
         * @see `basicToDigit()`
         * @private
         * @param {Number} digit The numeric value of a basic code point.
         * @returns {Number} The basic code point whose value (when used for
         * representing integers) is `digit`, which needs to be in the range
         * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
         * used; else, the lowercase form is used. The behavior is undefined
         * if `flag` is non-zero and `digit` has no uppercase form.
         */
        function digitToBasic(digit, flag) {
            //  0..25 map to ASCII a..z or A..Z
            // 26..35 map to ASCII 0..9
            return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
        }
    
        /**
         * Bias adaptation function as per section 3.4 of RFC 3492.
         * http://tools.ietf.org/html/rfc3492#section-3.4
         * @private
         */
        function adapt(delta, numPoints, firstTime) {
            var k = 0;
            delta = firstTime ? floor(delta / damp) : delta >> 1;
            delta += floor(delta / numPoints);
            for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
                delta = floor(delta / baseMinusTMin);
            }
            return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
        }
    
        /**
         * Converts a Punycode string of ASCII-only symbols to a string of Unicode
         * symbols.
         * @memberOf punycode
         * @param {String} input The Punycode string of ASCII-only symbols.
         * @returns {String} The resulting string of Unicode symbols.
         */
        function decode(input) {
            // Don't use UCS-2
            var output = [],
                inputLength = input.length,
                out,
                i = 0,
                n = initialN,
                bias = initialBias,
                basic,
                j,
                index,
                oldi,
                w,
                k,
                digit,
                t,
                /** Cached calculation results */
                baseMinusT;
    
            // Handle the basic code points: let `basic` be the number of input code
            // points before the last delimiter, or `0` if there is none, then copy
            // the first basic code points to the output.
    
            basic = input.lastIndexOf(delimiter);
            if (basic < 0) {
                basic = 0;
            }
    
            for (j = 0; j < basic; ++j) {
                // if it's not a basic code point
                if (input.charCodeAt(j) >= 0x80) {
                    error('not-basic');
                }
                output.push(input.charCodeAt(j));
            }
    
            // Main decoding loop: start just after the last delimiter if any basic code
            // points were copied; start at the beginning otherwise.
    
            for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
    
                // `index` is the index of the next character to be consumed.
                // Decode a generalized variable-length integer into `delta`,
                // which gets added to `i`. The overflow checking is easier
                // if we increase `i` as we go, then subtract off its starting
                // value at the end to obtain `delta`.
                for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
    
                    if (index >= inputLength) {
                        error('invalid-input');
                    }
    
                    digit = basicToDigit(input.charCodeAt(index++));
    
                    if (digit >= base || digit > floor((maxInt - i) / w)) {
                        error('overflow');
                    }
    
                    i += digit * w;
                    t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
    
                    if (digit < t) {
                        break;
                    }
    
                    baseMinusT = base - t;
                    if (w > floor(maxInt / baseMinusT)) {
                        error('overflow');
                    }
    
                    w *= baseMinusT;
    
                }
    
                out = output.length + 1;
                bias = adapt(i - oldi, out, oldi == 0);
    
                // `i` was supposed to wrap around from `out` to `0`,
                // incrementing `n` each time, so we'll fix that now:
                if (floor(i / out) > maxInt - n) {
                    error('overflow');
                }
    
                n += floor(i / out);
                i %= out;
    
                // Insert `n` at position `i` of the output
                output.splice(i++, 0, n);
    
            }
    
            return ucs2encode(output);
        }
    
        /**
         * Converts a string of Unicode symbols (e.g. a domain name label) to a
         * Punycode string of ASCII-only symbols.
         * @memberOf punycode
         * @param {String} input The string of Unicode symbols.
         * @returns {String} The resulting Punycode string of ASCII-only symbols.
         */
        function encode(input) {
            var n,
                delta,
                handledCPCount,
                basicLength,
                bias,
                j,
                m,
                q,
                k,
                t,
                currentValue,
                output = [],
                /** `inputLength` will hold the number of code points in `input`. */
                inputLength,
                /** Cached calculation results */
                handledCPCountPlusOne,
                baseMinusT,
                qMinusT;
    
            // Convert the input in UCS-2 to Unicode
            input = ucs2decode(input);
    
            // Cache the length
            inputLength = input.length;
    
            // Initialize the state
            n = initialN;
            delta = 0;
            bias = initialBias;
    
            // Handle the basic code points
            for (j = 0; j < inputLength; ++j) {
                currentValue = input[j];
                if (currentValue < 0x80) {
                    output.push(stringFromCharCode(currentValue));
                }
            }
    
            handledCPCount = basicLength = output.length;
    
            // `handledCPCount` is the number of code points that have been handled;
            // `basicLength` is the number of basic code points.
    
            // Finish the basic string - if it is not empty - with a delimiter
            if (basicLength) {
                output.push(delimiter);
            }
    
            // Main encoding loop:
            while (handledCPCount < inputLength) {
    
                // All non-basic code points < n have been handled already. Find the next
                // larger one:
                for (m = maxInt, j = 0; j < inputLength; ++j) {
                    currentValue = input[j];
                    if (currentValue >= n && currentValue < m) {
                        m = currentValue;
                    }
                }
    
                // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
                // but guard against overflow
                handledCPCountPlusOne = handledCPCount + 1;
                if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                    error('overflow');
                }
    
                delta += (m - n) * handledCPCountPlusOne;
                n = m;
    
                for (j = 0; j < inputLength; ++j) {
                    currentValue = input[j];
    
                    if (currentValue < n && ++delta > maxInt) {
                        error('overflow');
                    }
    
                    if (currentValue == n) {
                        // Represent delta as a generalized variable-length integer
                        for (q = delta, k = base; /* no condition */; k += base) {
                            t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
                            if (q < t) {
                                break;
                            }
                            qMinusT = q - t;
                            baseMinusT = base - t;
                            output.push(
                                stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                            );
                            q = floor(qMinusT / baseMinusT);
                        }
    
                        output.push(stringFromCharCode(digitToBasic(q, 0)));
                        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                        delta = 0;
                        ++handledCPCount;
                    }
                }
    
                ++delta;
                ++n;
    
            }
            return output.join('');
        }
    
        /**
         * Converts a Punycode string representing a domain name or an email address
         * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
         * it doesn't matter if you call it on a string that has already been
         * converted to Unicode.
         * @memberOf punycode
         * @param {String} input The Punycoded domain name or email address to
         * convert to Unicode.
         * @returns {String} The Unicode representation of the given Punycode
         * string.
         */
        function toUnicode(input) {
            return mapDomain(input, function(string) {
                return regexPunycode.test(string)
                    ? decode(string.slice(4).toLowerCase())
                    : string;
            });
        }
    
        /**
         * Converts a Unicode string representing a domain name or an email address to
         * Punycode. Only the non-ASCII parts of the domain name will be converted,
         * i.e. it doesn't matter if you call it with a domain that's already in
         * ASCII.
         * @memberOf punycode
         * @param {String} input The domain name or email address to convert, as a
         * Unicode string.
         * @returns {String} The Punycode representation of the given domain name or
         * email address.
         */
        function toASCII(input) {
            return mapDomain(input, function(string) {
                return regexNonASCII.test(string)
                    ? 'xn--' + encode(string)
                    : string;
            });
        }
    
        /*--------------------------------------------------------------------------*/
    
        /** Define the public API */
        punycode = {
            /**
             * A string representing the current Punycode.js version number.
             * @memberOf punycode
             * @type String
             */
            'version': '1.3.2',
            /**
             * An object of methods to convert from JavaScript's internal character
             * representation (UCS-2) to Unicode code points, and back.
             * @see <https://mathiasbynens.be/notes/javascript-encoding>
             * @memberOf punycode
             * @type Object
             */
            'ucs2': {
                'decode': ucs2decode,
                'encode': ucs2encode
            },
            'decode': decode,
            'encode': encode,
            'toASCII': toASCII,
            'toUnicode': toUnicode
        };
    
        /** Expose `punycode` */
        // Some AMD build optimizers, like r.js, check for specific condition patterns
        // like the following:
        if (
            true
        ) {
            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
                return punycode;
            }).call(exports, __webpack_require__, exports, module),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {}
    
    }(this));
    
    
    /***/ }),
    
    /***/ "./node_modules/url/url.js":
    /*!*********************************!*\
      !*** ./node_modules/url/url.js ***!
      \*********************************/
    /***/ (function(__unused_webpack_module, exports, __webpack_require__) {
    
    "use strict";
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    
    
    
    var punycode = __webpack_require__(/*! punycode */ "./node_modules/url/node_modules/punycode/punycode.js");
    var util = __webpack_require__(/*! ./util */ "./node_modules/url/util.js");
    
    exports.parse = urlParse;
    exports.resolve = urlResolve;
    exports.resolveObject = urlResolveObject;
    exports.format = urlFormat;
    
    exports.Url = Url;
    
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    }
    
    // Reference: RFC 3986, RFC 1808, RFC 2396
    
    // define these here so at least they only have to be
    // compiled once on the first module load.
    var protocolPattern = /^([a-z0-9.+-]+:)/i,
        portPattern = /:[0-9]*$/,
    
        // Special case for a simple path URL
        simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
    
        // RFC 2396: characters reserved for delimiting URLs.
        // We actually just auto-escape these.
        delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
    
        // RFC 2396: characters not allowed for various reasons.
        unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
    
        // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
        autoEscape = ['\''].concat(unwise),
        // Characters that are never ever allowed in a hostname.
        // Note that any invalid chars are also handled, but these
        // are the ones that are *expected* to be seen, so we fast-path
        // them.
        nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
        hostEndingChars = ['/', '?', '#'],
        hostnameMaxLen = 255,
        hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
        hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
        // protocols that can allow "unsafe" and "unwise" chars.
        unsafeProtocol = {
          'javascript': true,
          'javascript:': true
        },
        // protocols that never have a hostname.
        hostlessProtocol = {
          'javascript': true,
          'javascript:': true
        },
        // protocols that always contain a // bit.
        slashedProtocol = {
          'http': true,
          'https': true,
          'ftp': true,
          'gopher': true,
          'file': true,
          'http:': true,
          'https:': true,
          'ftp:': true,
          'gopher:': true,
          'file:': true
        },
        querystring = __webpack_require__(/*! querystring */ "./node_modules/querystring/index.js");
    
    function urlParse(url, parseQueryString, slashesDenoteHost) {
      if (url && util.isObject(url) && url instanceof Url) return url;
    
      var u = new Url;
      u.parse(url, parseQueryString, slashesDenoteHost);
      return u;
    }
    
    Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
      if (!util.isString(url)) {
        throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
      }
    
      // Copy chrome, IE, opera backslash-handling behavior.
      // Back slashes before the query string get converted to forward slashes
      // See: https://code.google.com/p/chromium/issues/detail?id=25916
      var queryIndex = url.indexOf('?'),
          splitter =
              (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
          uSplit = url.split(splitter),
          slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, '/');
      url = uSplit.join(splitter);
    
      var rest = url;
    
      // trim before proceeding.
      // This is to support parse stuff like "  http://foo.com  \n"
      rest = rest.trim();
    
      if (!slashesDenoteHost && url.split('#').length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          this.path = rest;
          this.href = rest;
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
            if (parseQueryString) {
              this.query = querystring.parse(this.search.substr(1));
            } else {
              this.query = this.search.substr(1);
            }
          } else if (parseQueryString) {
            this.search = '';
            this.query = {};
          }
          return this;
        }
      }
    
      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
      }
    
      // figure out if it's got a host
      // user@server is *always* interpreted as a hostname, and url
      // resolution will treat //foo/bar as host=foo,path=bar because that's
      // how the browser resolves relative URLs.
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === '//';
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }
    
      if (!hostlessProtocol[proto] &&
          (slashes || (proto && !slashedProtocol[proto]))) {
    
        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c
    
        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.
    
        // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for (var i = 0; i < hostEndingChars.length; i++) {
          var hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
    
        // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.
        var auth, atSign;
        if (hostEnd === -1) {
          // atSign can be anywhere.
          atSign = rest.lastIndexOf('@');
        } else {
          // atSign must be in auth portion.
          // http://a@b/c@d => host:b auth:a path:/c@d
          atSign = rest.lastIndexOf('@', hostEnd);
        }
    
        // Now we have a portion which is definitely the auth.
        // Pull that off.
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = decodeURIComponent(auth);
        }
    
        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for (var i = 0; i < nonHostChars.length; i++) {
          var hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1)
          hostEnd = rest.length;
    
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
    
        // pull out port.
        this.parseHost();
    
        // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.
        this.hostname = this.hostname || '';
    
        // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.
        var ipv6Hostname = this.hostname[0] === '[' &&
            this.hostname[this.hostname.length - 1] === ']';
    
        // validate a little.
        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);
          for (var i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) continue;
            if (!part.match(hostnamePartPattern)) {
              var newpart = '';
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  // we replace non-ASCII char with a temporary placeholder
                  // we need this to make sure size of hostname is not
                  // broken by replacing non-ASCII by nothing
                  newpart += 'x';
                } else {
                  newpart += part[j];
                }
              }
              // we test again with ASCII char only
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = '/' + notHost.join('.') + rest;
                }
                this.hostname = validParts.join('.');
                break;
              }
            }
          }
        }
    
        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = '';
        } else {
          // hostnames are always lower case.
          this.hostname = this.hostname.toLowerCase();
        }
    
        if (!ipv6Hostname) {
          // IDNA Support: Returns a punycoded representation of "domain".
          // It only converts parts of the domain name that
          // have non-ASCII characters, i.e. it doesn't matter if
          // you call it with a domain that already is ASCII-only.
          this.hostname = punycode.toASCII(this.hostname);
        }
    
        var p = this.port ? ':' + this.port : '';
        var h = this.hostname || '';
        this.host = h + p;
        this.href += this.host;
    
        // strip [ and ] from the hostname
        // the host field still retains them, though
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
          if (rest[0] !== '/') {
            rest = '/' + rest;
          }
        }
      }
    
      // now rest is set to the post-host stuff.
      // chop off any delim chars.
      if (!unsafeProtocol[lowerProto]) {
    
        // First, make 100% sure that any "autoEscape" chars get
        // escaped, even if encodeURIComponent doesn't think they
        // need to be.
        for (var i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          if (rest.indexOf(ae) === -1)
            continue;
          var esc = encodeURIComponent(ae);
          if (esc === ae) {
            esc = escape(ae);
          }
          rest = rest.split(ae).join(esc);
        }
      }
    
    
      // chop off from the tail first.
      var hash = rest.indexOf('#');
      if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }
      var qm = rest.indexOf('?');
      if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString) {
          this.query = querystring.parse(this.query);
        }
        rest = rest.slice(0, qm);
      } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        this.search = '';
        this.query = {};
      }
      if (rest) this.pathname = rest;
      if (slashedProtocol[lowerProto] &&
          this.hostname && !this.pathname) {
        this.pathname = '/';
      }
    
      //to support http.request
      if (this.pathname || this.search) {
        var p = this.pathname || '';
        var s = this.search || '';
        this.path = p + s;
      }
    
      // finally, reconstruct the href based on what has been validated.
      this.href = this.format();
      return this;
    };
    
    // format a parsed object into a url string
    function urlFormat(obj) {
      // ensure it's an object, and not a string url.
      // If it's an obj, this is a no-op.
      // this way, you can call url_format() on strings
      // to clean up potentially wonky urls.
      if (util.isString(obj)) obj = urlParse(obj);
      if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
      return obj.format();
    }
    
    Url.prototype.format = function() {
      var auth = this.auth || '';
      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ':');
        auth += '@';
      }
    
      var protocol = this.protocol || '',
          pathname = this.pathname || '',
          hash = this.hash || '',
          host = false,
          query = '';
    
      if (this.host) {
        host = auth + this.host;
      } else if (this.hostname) {
        host = auth + (this.hostname.indexOf(':') === -1 ?
            this.hostname :
            '[' + this.hostname + ']');
        if (this.port) {
          host += ':' + this.port;
        }
      }
    
      if (this.query &&
          util.isObject(this.query) &&
          Object.keys(this.query).length) {
        query = querystring.stringify(this.query);
      }
    
      var search = this.search || (query && ('?' + query)) || '';
    
      if (protocol && protocol.substr(-1) !== ':') protocol += ':';
    
      // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
      // unless they had them to begin with.
      if (this.slashes ||
          (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = '//' + (host || '');
        if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
      } else if (!host) {
        host = '';
      }
    
      if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
      if (search && search.charAt(0) !== '?') search = '?' + search;
    
      pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
      });
      search = search.replace('#', '%23');
    
      return protocol + host + pathname + search + hash;
    };
    
    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }
    
    Url.prototype.resolve = function(relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };
    
    function urlResolveObject(source, relative) {
      if (!source) return relative;
      return urlParse(source, false, true).resolveObject(relative);
    }
    
    Url.prototype.resolveObject = function(relative) {
      if (util.isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }
    
      var result = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      }
    
      // hash is always overridden, no matter what.
      // even href="" will remove it.
      result.hash = relative.hash;
    
      // if the relative url is empty, then there's nothing left to do here.
      if (relative.href === '') {
        result.href = result.format();
        return result;
      }
    
      // hrefs like //foo/bar always cut to the protocol.
      if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== 'protocol')
            result[rkey] = relative[rkey];
        }
    
        //urlParse appends trailing / to urls like http://www.example.com
        if (slashedProtocol[result.protocol] &&
            result.hostname && !result.pathname) {
          result.path = result.pathname = '/';
        }
    
        result.href = result.format();
        return result;
      }
    
      if (relative.protocol && relative.protocol !== result.protocol) {
        // if it's a known url protocol, then changing
        // the protocol does weird things
        // first, if it's not file:, then we MUST have a host,
        // and if there was a path
        // to begin with, then we MUST have a path.
        // if it is file:, then the host is dropped,
        // because that's known to be hostless.
        // anything else is assumed to be absolute.
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);
          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result[k] = relative[k];
          }
          result.href = result.format();
          return result;
        }
    
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          var relPath = (relative.pathname || '').split('/');
          while (relPath.length && !(relative.host = relPath.shift()));
          if (!relative.host) relative.host = '';
          if (!relative.hostname) relative.hostname = '';
          if (relPath[0] !== '') relPath.unshift('');
          if (relPath.length < 2) relPath.unshift('');
          result.pathname = relPath.join('/');
        } else {
          result.pathname = relative.pathname;
        }
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || '';
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        // to support http.request
        if (result.pathname || result.search) {
          var p = result.pathname || '';
          var s = result.search || '';
          result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }
    
      var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
          isRelAbs = (
              relative.host ||
              relative.pathname && relative.pathname.charAt(0) === '/'
          ),
          mustEndAbs = (isRelAbs || isSourceAbs ||
                        (result.host && relative.pathname)),
          removeAllDots = mustEndAbs,
          srcPath = result.pathname && result.pathname.split('/') || [],
          relPath = relative.pathname && relative.pathname.split('/') || [],
          psychotic = result.protocol && !slashedProtocol[result.protocol];
    
      // if the url is a non-slashed url, then relative
      // links like ../.. should be able
      // to crawl up to the hostname, as well.  This is strange.
      // result.protocol has already been set by now.
      // Later on, put the first path part into the host field.
      if (psychotic) {
        result.hostname = '';
        result.port = null;
        if (result.host) {
          if (srcPath[0] === '') srcPath[0] = result.host;
          else srcPath.unshift(result.host);
        }
        result.host = '';
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === '') relPath[0] = relative.host;
            else relPath.unshift(relative.host);
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
      }
    
      if (isRelAbs) {
        // it's absolute.
        result.host = (relative.host || relative.host === '') ?
                      relative.host : result.host;
        result.hostname = (relative.hostname || relative.hostname === '') ?
                          relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
        // fall through to the dot-handling below.
      } else if (relPath.length) {
        // it's relative
        // throw away the existing file, and take the new path instead.
        if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (!util.isNullOrUndefined(relative.search)) {
        // just pull out the search.
        // like href='?foo'.
        // Put this after the other two cases because it simplifies the booleans
        if (psychotic) {
          result.hostname = result.host = srcPath.shift();
          //occationaly the auth can get stuck only in host
          //this especially happens in cases like
          //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
          var authInHost = result.host && result.host.indexOf('@') > 0 ?
                           result.host.split('@') : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }
        result.search = relative.search;
        result.query = relative.query;
        //to support http.request
        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : '') +
                        (result.search ? result.search : '');
        }
        result.href = result.format();
        return result;
      }
    
      if (!srcPath.length) {
        // no path at all.  easy.
        // we've already handled the other stuff above.
        result.pathname = null;
        //to support http.request
        if (result.search) {
          result.path = '/' + result.search;
        } else {
          result.path = null;
        }
        result.href = result.format();
        return result;
      }
    
      // if a url ENDs in . or .., then it must get a trailing slash.
      // however, if it ends in anything else non-slashy,
      // then it must NOT get a trailing slash.
      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (
          (result.host || relative.host || srcPath.length > 1) &&
          (last === '.' || last === '..') || last === '');
    
      // strip single dots, resolve double dots to parent dir
      // if the path tries to go above the root, `up` ends up > 0
      var up = 0;
      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];
        if (last === '.') {
          srcPath.splice(i, 1);
        } else if (last === '..') {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      }
    
      // if the path is allowed to go above the root, restore leading ..s
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift('..');
        }
      }
    
      if (mustEndAbs && srcPath[0] !== '' &&
          (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
        srcPath.unshift('');
      }
    
      if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
        srcPath.push('');
      }
    
      var isAbsolute = srcPath[0] === '' ||
          (srcPath[0] && srcPath[0].charAt(0) === '/');
    
      // put the host back
      if (psychotic) {
        result.hostname = result.host = isAbsolute ? '' :
                                        srcPath.length ? srcPath.shift() : '';
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        var authInHost = result.host && result.host.indexOf('@') > 0 ?
                         result.host.split('@') : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
    
      mustEndAbs = mustEndAbs || (result.host && srcPath.length);
    
      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift('');
      }
    
      if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
      } else {
        result.pathname = srcPath.join('/');
      }
    
      //to support request.http
      if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') +
                      (result.search ? result.search : '');
      }
      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };
    
    Url.prototype.parseHost = function() {
      var host = this.host;
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ':') {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) this.hostname = host;
    };
    
    
    /***/ }),
    
    /***/ "./node_modules/url/util.js":
    /*!**********************************!*\
      !*** ./node_modules/url/util.js ***!
      \**********************************/
    /***/ (function(module) {
    
    "use strict";
    
    
    module.exports = {
      isString: function(arg) {
        return typeof(arg) === 'string';
      },
      isObject: function(arg) {
        return typeof(arg) === 'object' && arg !== null;
      },
      isNull: function(arg) {
        return arg === null;
      },
      isNullOrUndefined: function(arg) {
        return arg == null;
      }
    };
    
    
    /***/ }),
    
    /***/ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":
    /*!***************************************************************************!*\
      !*** ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js ***!
      \***************************************************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    __webpack_require__.r(__webpack_exports__);
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ WebSocketClient; }
    /* harmony export */ });
    /* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
    
    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
    
    
    
    var WebSocketClient = /*#__PURE__*/function () {
      function WebSocketClient(url) {
        _classCallCheck(this, WebSocketClient);
    
        this.client = new WebSocket(url);
    
        this.client.onerror = function (error) {
          _utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.error(error);
        };
      }
    
      _createClass(WebSocketClient, [{
        key: "onOpen",
        value: function onOpen(f) {
          this.client.onopen = f;
        }
      }, {
        key: "onClose",
        value: function onClose(f) {
          this.client.onclose = f;
        } // call f with the message string as the first argument
    
      }, {
        key: "onMessage",
        value: function onMessage(f) {
          this.client.onmessage = function (e) {
            f(e.data);
          };
        }
      }]);
    
      return WebSocketClient;
    }();
    
    
    
    /***/ }),
    
    /***/ "./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=5000&pathname=%2Fws&logging=info&reconnect=10":
    /*!********************************************************************************************************************************************!*\
      !*** ./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=5000&pathname=%2Fws&logging=info&reconnect=10 ***!
      \********************************************************************************************************************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    var __resourceQuery = "?protocol=ws%3A&hostname=0.0.0.0&port=5000&pathname=%2Fws&logging=info&reconnect=10";
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webpack/hot/log.js */ "./node_modules/webpack/hot/log.js");
    /* harmony import */ var webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */ var _modules_strip_ansi_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/strip-ansi/index.js */ "./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js");
    /* harmony import */ var _modules_strip_ansi_index_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_modules_strip_ansi_index_js__WEBPACK_IMPORTED_MODULE_1__);
    /* harmony import */ var _utils_parseURL_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/parseURL.js */ "./node_modules/webpack-dev-server/client/utils/parseURL.js");
    /* harmony import */ var _socket_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./socket.js */ "./node_modules/webpack-dev-server/client/socket.js");
    /* harmony import */ var _overlay_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./overlay.js */ "./node_modules/webpack-dev-server/client/overlay.js");
    /* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
    /* harmony import */ var _utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/sendMessage.js */ "./node_modules/webpack-dev-server/client/utils/sendMessage.js");
    /* harmony import */ var _utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/reloadApp.js */ "./node_modules/webpack-dev-server/client/utils/reloadApp.js");
    /* harmony import */ var _utils_createSocketURL_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/createSocketURL.js */ "./node_modules/webpack-dev-server/client/utils/createSocketURL.js");
    /* global __resourceQuery, __webpack_hash__ */
    
    
    
    
    
    
    
    
    
    var status = {
      isUnloading: false,
      // TODO Workaround for webpack v4, `__webpack_hash__` is not replaced without HotModuleReplacement
      // eslint-disable-next-line camelcase
      currentHash:  true ? __webpack_require__.h() : 0
    };
    var options = {
      hot: false,
      liveReload: false,
      progress: false,
      overlay: false
    };
    var parsedResourceQuery = (0,_utils_parseURL_js__WEBPACK_IMPORTED_MODULE_2__["default"])(__resourceQuery);
    
    if (parsedResourceQuery.hot === "true") {
      options.hot = true;
      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Hot Module Replacement enabled.");
    }
    
    if (parsedResourceQuery["live-reload"] === "true") {
      options.liveReload = true;
      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Live Reloading enabled.");
    }
    
    if (parsedResourceQuery.logging) {
      options.logging = parsedResourceQuery.logging;
    }
    
    if (typeof parsedResourceQuery.reconnect !== "undefined") {
      options.reconnect = Number(parsedResourceQuery.reconnect);
    }
    
    function setAllLogLevel(level) {
      // This is needed because the HMR logger operate separately from dev server logger
      webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default().setLogLevel(level === "verbose" || level === "log" ? "info" : level);
      (0,_utils_log_js__WEBPACK_IMPORTED_MODULE_5__.setLogLevel)(level);
    }
    
    if (options.logging) {
      setAllLogLevel(options.logging);
    }
    
    self.addEventListener("beforeunload", function () {
      status.isUnloading = true;
    });
    var onSocketMessage = {
      hot: function hot() {
        if (parsedResourceQuery.hot === "false") {
          return;
        }
    
        options.hot = true;
        _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Hot Module Replacement enabled.");
      },
      liveReload: function liveReload() {
        if (parsedResourceQuery["live-reload"] === "false") {
          return;
        }
    
        options.liveReload = true;
        _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Live Reloading enabled.");
      },
      invalid: function invalid() {
        _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("App updated. Recompiling..."); // Fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.
    
        if (options.overlay) {
          (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
        }
    
        (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Invalid");
      },
      hash: function hash(_hash) {
        status.previousHash = status.currentHash;
        status.currentHash = _hash;
      },
      logging: setAllLogLevel,
      overlay: function overlay(value) {
        if (typeof document === "undefined") {
          return;
        }
    
        options.overlay = value;
      },
      reconnect: function reconnect(value) {
        if (parsedResourceQuery.reconnect === "false") {
          return;
        }
    
        options.reconnect = value;
      },
      progress: function progress(_progress) {
        options.progress = _progress;
      },
      "progress-update": function progressUpdate(data) {
        if (options.progress) {
          _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("".concat(data.pluginName ? "[".concat(data.pluginName, "] ") : "").concat(data.percent, "% - ").concat(data.msg, "."));
        }
    
        (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Progress", data);
      },
      "still-ok": function stillOk() {
        _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Nothing changed.");
    
        if (options.overlay) {
          (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
        }
    
        (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("StillOk");
      },
      ok: function ok() {
        (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Ok");
    
        if (options.overlay) {
          (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
        }
    
        (0,_utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__["default"])(options, status);
      },
      // TODO: remove in v5 in favor of 'static-changed'
      "content-changed": function contentChanged(file) {
        _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("".concat(file ? "\"".concat(file, "\"") : "Content", " from static directory was changed. Reloading..."));
        self.location.reload();
      },
      "static-changed": function staticChanged(file) {
        _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("".concat(file ? "\"".concat(file, "\"") : "Content", " from static directory was changed. Reloading..."));
        self.location.reload();
      },
      warnings: function warnings(_warnings, params) {
        _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.warn("Warnings while compiling.");
    
        var printableWarnings = _warnings.map(function (error) {
          var _formatProblem = (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.formatProblem)("warning", error),
              header = _formatProblem.header,
              body = _formatProblem.body;
    
          return "".concat(header, "\n").concat(_modules_strip_ansi_index_js__WEBPACK_IMPORTED_MODULE_1___default()(body));
        });
    
        (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Warnings", printableWarnings);
    
        for (var i = 0; i < printableWarnings.length; i++) {
          _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.warn(printableWarnings[i]);
        }
    
        var needShowOverlayForWarnings = typeof options.overlay === "boolean" ? options.overlay : options.overlay && options.overlay.warnings;
    
        if (needShowOverlayForWarnings) {
          (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.show)("warning", _warnings);
        }
    
        if (params && params.preventReloading) {
          return;
        }
    
        (0,_utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__["default"])(options, status);
      },
      errors: function errors(_errors) {
        _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error("Errors while compiling. Reload prevented.");
    
        var printableErrors = _errors.map(function (error) {
          var _formatProblem2 = (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.formatProblem)("error", error),
              header = _formatProblem2.header,
              body = _formatProblem2.body;
    
          return "".concat(header, "\n").concat(_modules_strip_ansi_index_js__WEBPACK_IMPORTED_MODULE_1___default()(body));
        });
    
        (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Errors", printableErrors);
    
        for (var i = 0; i < printableErrors.length; i++) {
          _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error(printableErrors[i]);
        }
    
        var needShowOverlayForErrors = typeof options.overlay === "boolean" ? options.overlay : options.overlay && options.overlay.errors;
    
        if (needShowOverlayForErrors) {
          (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.show)("error", _errors);
        }
      },
      error: function error(_error) {
        _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error(_error);
      },
      close: function close() {
        _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Disconnected!");
    
        if (options.overlay) {
          (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
        }
    
        (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Close");
      }
    };
    var socketURL = (0,_utils_createSocketURL_js__WEBPACK_IMPORTED_MODULE_8__["default"])(parsedResourceQuery);
    (0,_socket_js__WEBPACK_IMPORTED_MODULE_3__["default"])(socketURL, onSocketMessage, options.reconnect);
    
    /***/ }),
    
    /***/ "./node_modules/webpack-dev-server/client/modules/logger/index.js":
    /*!************************************************************************!*\
      !*** ./node_modules/webpack-dev-server/client/modules/logger/index.js ***!
      \************************************************************************/
    /***/ (function(__unused_webpack_module, exports) {
    
    /******/ (function() { // webpackBootstrap
    /******/ 	"use strict";
    /******/ 	var __webpack_modules__ = ({
    
    /***/ "./client-src/modules/logger/SyncBailHookFake.js":
    /*!*******************************************************!*\
      !*** ./client-src/modules/logger/SyncBailHookFake.js ***!
      \*******************************************************/
    /***/ (function(module) {
    
    
    /**
     * Client stub for tapable SyncBailHook
     */
    
    module.exports = function clientTapableSyncBailHook() {
      return {
        call: function call() {}
      };
    };
    
    /***/ }),
    
    /***/ "./node_modules/webpack/lib/logging/Logger.js":
    /*!****************************************************!*\
      !*** ./node_modules/webpack/lib/logging/Logger.js ***!
      \****************************************************/
    /***/ (function(__unused_webpack_module, exports) {
    
    /*
        MIT License http://www.opensource.org/licenses/mit-license.php
        Author Tobias Koppers @sokra
    */
    
    
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    
    function _iterableToArray(iter) {
      if (typeof (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }) !== "undefined" && iter[(typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }).iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
    }
    
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
    
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
    
      return arr2;
    }
    
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    
    var LogType = Object.freeze({
      error:
      /** @type {"error"} */
      "error",
      // message, c style arguments
      warn:
      /** @type {"warn"} */
      "warn",
      // message, c style arguments
      info:
      /** @type {"info"} */
      "info",
      // message, c style arguments
      log:
      /** @type {"log"} */
      "log",
      // message, c style arguments
      debug:
      /** @type {"debug"} */
      "debug",
      // message, c style arguments
      trace:
      /** @type {"trace"} */
      "trace",
      // no arguments
      group:
      /** @type {"group"} */
      "group",
      // [label]
      groupCollapsed:
      /** @type {"groupCollapsed"} */
      "groupCollapsed",
      // [label]
      groupEnd:
      /** @type {"groupEnd"} */
      "groupEnd",
      // [label]
      profile:
      /** @type {"profile"} */
      "profile",
      // [profileName]
      profileEnd:
      /** @type {"profileEnd"} */
      "profileEnd",
      // [profileName]
      time:
      /** @type {"time"} */
      "time",
      // name, time as [seconds, nanoseconds]
      clear:
      /** @type {"clear"} */
      "clear",
      // no arguments
      status:
      /** @type {"status"} */
      "status" // message, arguments
    
    });
    exports.LogType = LogType;
    /** @typedef {typeof LogType[keyof typeof LogType]} LogTypeEnum */
    
    var LOG_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; })("webpack logger raw log method");
    var TIMERS_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; })("webpack logger times");
    var TIMERS_AGGREGATES_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; })("webpack logger aggregated times");
    
    var WebpackLogger = /*#__PURE__*/function () {
      /**
       * @param {function(LogTypeEnum, any[]=): void} log log function
       * @param {function(string | function(): string): WebpackLogger} getChildLogger function to create child logger
       */
      function WebpackLogger(log, getChildLogger) {
        _classCallCheck(this, WebpackLogger);
    
        this[LOG_SYMBOL] = log;
        this.getChildLogger = getChildLogger;
      }
    
      _createClass(WebpackLogger, [{
        key: "error",
        value: function error() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
    
          this[LOG_SYMBOL](LogType.error, args);
        }
      }, {
        key: "warn",
        value: function warn() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
    
          this[LOG_SYMBOL](LogType.warn, args);
        }
      }, {
        key: "info",
        value: function info() {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
    
          this[LOG_SYMBOL](LogType.info, args);
        }
      }, {
        key: "log",
        value: function log() {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
    
          this[LOG_SYMBOL](LogType.log, args);
        }
      }, {
        key: "debug",
        value: function debug() {
          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }
    
          this[LOG_SYMBOL](LogType.debug, args);
        }
      }, {
        key: "assert",
        value: function assert(assertion) {
          if (!assertion) {
            for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
              args[_key6 - 1] = arguments[_key6];
            }
    
            this[LOG_SYMBOL](LogType.error, args);
          }
        }
      }, {
        key: "trace",
        value: function trace() {
          this[LOG_SYMBOL](LogType.trace, ["Trace"]);
        }
      }, {
        key: "clear",
        value: function clear() {
          this[LOG_SYMBOL](LogType.clear);
        }
      }, {
        key: "status",
        value: function status() {
          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            args[_key7] = arguments[_key7];
          }
    
          this[LOG_SYMBOL](LogType.status, args);
        }
      }, {
        key: "group",
        value: function group() {
          for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
            args[_key8] = arguments[_key8];
          }
    
          this[LOG_SYMBOL](LogType.group, args);
        }
      }, {
        key: "groupCollapsed",
        value: function groupCollapsed() {
          for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
            args[_key9] = arguments[_key9];
          }
    
          this[LOG_SYMBOL](LogType.groupCollapsed, args);
        }
      }, {
        key: "groupEnd",
        value: function groupEnd() {
          for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
            args[_key10] = arguments[_key10];
          }
    
          this[LOG_SYMBOL](LogType.groupEnd, args);
        }
      }, {
        key: "profile",
        value: function profile(label) {
          this[LOG_SYMBOL](LogType.profile, [label]);
        }
      }, {
        key: "profileEnd",
        value: function profileEnd(label) {
          this[LOG_SYMBOL](LogType.profileEnd, [label]);
        }
      }, {
        key: "time",
        value: function time(label) {
          this[TIMERS_SYMBOL] = this[TIMERS_SYMBOL] || new Map();
          this[TIMERS_SYMBOL].set(label, process.hrtime());
        }
      }, {
        key: "timeLog",
        value: function timeLog(label) {
          var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);
    
          if (!prev) {
            throw new Error("No such label '".concat(label, "' for WebpackLogger.timeLog()"));
          }
    
          var time = process.hrtime(prev);
          this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
        }
      }, {
        key: "timeEnd",
        value: function timeEnd(label) {
          var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);
    
          if (!prev) {
            throw new Error("No such label '".concat(label, "' for WebpackLogger.timeEnd()"));
          }
    
          var time = process.hrtime(prev);
          this[TIMERS_SYMBOL].delete(label);
          this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
        }
      }, {
        key: "timeAggregate",
        value: function timeAggregate(label) {
          var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);
    
          if (!prev) {
            throw new Error("No such label '".concat(label, "' for WebpackLogger.timeAggregate()"));
          }
    
          var time = process.hrtime(prev);
          this[TIMERS_SYMBOL].delete(label);
          this[TIMERS_AGGREGATES_SYMBOL] = this[TIMERS_AGGREGATES_SYMBOL] || new Map();
          var current = this[TIMERS_AGGREGATES_SYMBOL].get(label);
    
          if (current !== undefined) {
            if (time[1] + current[1] > 1e9) {
              time[0] += current[0] + 1;
              time[1] = time[1] - 1e9 + current[1];
            } else {
              time[0] += current[0];
              time[1] += current[1];
            }
          }
    
          this[TIMERS_AGGREGATES_SYMBOL].set(label, time);
        }
      }, {
        key: "timeAggregateEnd",
        value: function timeAggregateEnd(label) {
          if (this[TIMERS_AGGREGATES_SYMBOL] === undefined) return;
          var time = this[TIMERS_AGGREGATES_SYMBOL].get(label);
          if (time === undefined) return;
          this[TIMERS_AGGREGATES_SYMBOL].delete(label);
          this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
        }
      }]);
    
      return WebpackLogger;
    }();
    
    exports.Logger = WebpackLogger;
    
    /***/ }),
    
    /***/ "./node_modules/webpack/lib/logging/createConsoleLogger.js":
    /*!*****************************************************************!*\
      !*** ./node_modules/webpack/lib/logging/createConsoleLogger.js ***!
      \*****************************************************************/
    /***/ (function(module, __unused_webpack_exports, __nested_webpack_require_10707__) {
    
    /*
        MIT License http://www.opensource.org/licenses/mit-license.php
        Author Tobias Koppers @sokra
    */
    
    
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    
    function _iterableToArray(iter) {
      if (typeof (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }) !== "undefined" && iter[(typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }).iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
    }
    
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
    
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
    
      return arr2;
    }
    
    var _require = __nested_webpack_require_10707__(/*! ./Logger */ "./node_modules/webpack/lib/logging/Logger.js"),
        LogType = _require.LogType;
    /** @typedef {import("../../declarations/WebpackOptions").FilterItemTypes} FilterItemTypes */
    
    /** @typedef {import("../../declarations/WebpackOptions").FilterTypes} FilterTypes */
    
    /** @typedef {import("./Logger").LogTypeEnum} LogTypeEnum */
    
    /** @typedef {function(string): boolean} FilterFunction */
    
    /**
     * @typedef {Object} LoggerConsole
     * @property {function(): void} clear
     * @property {function(): void} trace
     * @property {(...args: any[]) => void} info
     * @property {(...args: any[]) => void} log
     * @property {(...args: any[]) => void} warn
     * @property {(...args: any[]) => void} error
     * @property {(...args: any[]) => void=} debug
     * @property {(...args: any[]) => void=} group
     * @property {(...args: any[]) => void=} groupCollapsed
     * @property {(...args: any[]) => void=} groupEnd
     * @property {(...args: any[]) => void=} status
     * @property {(...args: any[]) => void=} profile
     * @property {(...args: any[]) => void=} profileEnd
     * @property {(...args: any[]) => void=} logTime
     */
    
    /**
     * @typedef {Object} LoggerOptions
     * @property {false|true|"none"|"error"|"warn"|"info"|"log"|"verbose"} level loglevel
     * @property {FilterTypes|boolean} debug filter for debug logging
     * @property {LoggerConsole} console the console to log to
     */
    
    /**
     * @param {FilterItemTypes} item an input item
     * @returns {FilterFunction} filter function
     */
    
    
    var filterToFunction = function filterToFunction(item) {
      if (typeof item === "string") {
        var regExp = new RegExp("[\\\\/]".concat(item.replace( // eslint-disable-next-line no-useless-escape
        /[-[\]{}()*+?.\\^$|]/g, "\\$&"), "([\\\\/]|$|!|\\?)"));
        return function (ident) {
          return regExp.test(ident);
        };
      }
    
      if (item && typeof item === "object" && typeof item.test === "function") {
        return function (ident) {
          return item.test(ident);
        };
      }
    
      if (typeof item === "function") {
        return item;
      }
    
      if (typeof item === "boolean") {
        return function () {
          return item;
        };
      }
    };
    /**
     * @enum {number}
     */
    
    
    var LogLevel = {
      none: 6,
      false: 6,
      error: 5,
      warn: 4,
      info: 3,
      log: 2,
      true: 2,
      verbose: 1
    };
    /**
     * @param {LoggerOptions} options options object
     * @returns {function(string, LogTypeEnum, any[]): void} logging function
     */
    
    module.exports = function (_ref) {
      var _ref$level = _ref.level,
          level = _ref$level === void 0 ? "info" : _ref$level,
          _ref$debug = _ref.debug,
          debug = _ref$debug === void 0 ? false : _ref$debug,
          console = _ref.console;
      var debugFilters = typeof debug === "boolean" ? [function () {
        return debug;
      }] :
      /** @type {FilterItemTypes[]} */
      [].concat(debug).map(filterToFunction);
      /** @type {number} */
    
      var loglevel = LogLevel["".concat(level)] || 0;
      /**
       * @param {string} name name of the logger
       * @param {LogTypeEnum} type type of the log entry
       * @param {any[]} args arguments of the log entry
       * @returns {void}
       */
    
      var logger = function logger(name, type, args) {
        var labeledArgs = function labeledArgs() {
          if (Array.isArray(args)) {
            if (args.length > 0 && typeof args[0] === "string") {
              return ["[".concat(name, "] ").concat(args[0])].concat(_toConsumableArray(args.slice(1)));
            } else {
              return ["[".concat(name, "]")].concat(_toConsumableArray(args));
            }
          } else {
            return [];
          }
        };
    
        var debug = debugFilters.some(function (f) {
          return f(name);
        });
    
        switch (type) {
          case LogType.debug:
            if (!debug) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins
    
            if (typeof console.debug === "function") {
              // eslint-disable-next-line node/no-unsupported-features/node-builtins
              console.debug.apply(console, _toConsumableArray(labeledArgs()));
            } else {
              console.log.apply(console, _toConsumableArray(labeledArgs()));
            }
    
            break;
    
          case LogType.log:
            if (!debug && loglevel > LogLevel.log) return;
            console.log.apply(console, _toConsumableArray(labeledArgs()));
            break;
    
          case LogType.info:
            if (!debug && loglevel > LogLevel.info) return;
            console.info.apply(console, _toConsumableArray(labeledArgs()));
            break;
    
          case LogType.warn:
            if (!debug && loglevel > LogLevel.warn) return;
            console.warn.apply(console, _toConsumableArray(labeledArgs()));
            break;
    
          case LogType.error:
            if (!debug && loglevel > LogLevel.error) return;
            console.error.apply(console, _toConsumableArray(labeledArgs()));
            break;
    
          case LogType.trace:
            if (!debug) return;
            console.trace();
            break;
    
          case LogType.groupCollapsed:
            if (!debug && loglevel > LogLevel.log) return;
    
            if (!debug && loglevel > LogLevel.verbose) {
              // eslint-disable-next-line node/no-unsupported-features/node-builtins
              if (typeof console.groupCollapsed === "function") {
                // eslint-disable-next-line node/no-unsupported-features/node-builtins
                console.groupCollapsed.apply(console, _toConsumableArray(labeledArgs()));
              } else {
                console.log.apply(console, _toConsumableArray(labeledArgs()));
              }
    
              break;
            }
    
          // falls through
    
          case LogType.group:
            if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins
    
            if (typeof console.group === "function") {
              // eslint-disable-next-line node/no-unsupported-features/node-builtins
              console.group.apply(console, _toConsumableArray(labeledArgs()));
            } else {
              console.log.apply(console, _toConsumableArray(labeledArgs()));
            }
    
            break;
    
          case LogType.groupEnd:
            if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins
    
            if (typeof console.groupEnd === "function") {
              // eslint-disable-next-line node/no-unsupported-features/node-builtins
              console.groupEnd();
            }
    
            break;
    
          case LogType.time:
            {
              if (!debug && loglevel > LogLevel.log) return;
              var ms = args[1] * 1000 + args[2] / 1000000;
              var msg = "[".concat(name, "] ").concat(args[0], ": ").concat(ms, " ms");
    
              if (typeof console.logTime === "function") {
                console.logTime(msg);
              } else {
                console.log(msg);
              }
    
              break;
            }
    
          case LogType.profile:
            // eslint-disable-next-line node/no-unsupported-features/node-builtins
            if (typeof console.profile === "function") {
              // eslint-disable-next-line node/no-unsupported-features/node-builtins
              console.profile.apply(console, _toConsumableArray(labeledArgs()));
            }
    
            break;
    
          case LogType.profileEnd:
            // eslint-disable-next-line node/no-unsupported-features/node-builtins
            if (typeof console.profileEnd === "function") {
              // eslint-disable-next-line node/no-unsupported-features/node-builtins
              console.profileEnd.apply(console, _toConsumableArray(labeledArgs()));
            }
    
            break;
    
          case LogType.clear:
            if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins
    
            if (typeof console.clear === "function") {
              // eslint-disable-next-line node/no-unsupported-features/node-builtins
              console.clear();
            }
    
            break;
    
          case LogType.status:
            if (!debug && loglevel > LogLevel.info) return;
    
            if (typeof console.status === "function") {
              if (args.length === 0) {
                console.status();
              } else {
                console.status.apply(console, _toConsumableArray(labeledArgs()));
              }
            } else {
              if (args.length !== 0) {
                console.info.apply(console, _toConsumableArray(labeledArgs()));
              }
            }
    
            break;
    
          default:
            throw new Error("Unexpected LogType ".concat(type));
        }
      };
    
      return logger;
    };
    
    /***/ }),
    
    /***/ "./node_modules/webpack/lib/logging/runtime.js":
    /*!*****************************************************!*\
      !*** ./node_modules/webpack/lib/logging/runtime.js ***!
      \*****************************************************/
    /***/ (function(__unused_webpack_module, exports, __nested_webpack_require_20794__) {
    
    /*
        MIT License http://www.opensource.org/licenses/mit-license.php
        Author Tobias Koppers @sokra
    */
    
    
    function _extends() {
      _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
    
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
    
        return target;
      };
    
      return _extends.apply(this, arguments);
    }
    
    var SyncBailHook = __nested_webpack_require_20794__(/*! tapable/lib/SyncBailHook */ "./client-src/modules/logger/SyncBailHookFake.js");
    
    var _require = __nested_webpack_require_20794__(/*! ./Logger */ "./node_modules/webpack/lib/logging/Logger.js"),
        Logger = _require.Logger;
    
    var createConsoleLogger = __nested_webpack_require_20794__(/*! ./createConsoleLogger */ "./node_modules/webpack/lib/logging/createConsoleLogger.js");
    /** @type {createConsoleLogger.LoggerOptions} */
    
    
    var currentDefaultLoggerOptions = {
      level: "info",
      debug: false,
      console: console
    };
    var currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);
    /**
     * @param {string} name name of the logger
     * @returns {Logger} a logger
     */
    
    exports.getLogger = function (name) {
      return new Logger(function (type, args) {
        if (exports.hooks.log.call(name, type, args) === undefined) {
          currentDefaultLogger(name, type, args);
        }
      }, function (childName) {
        return exports.getLogger("".concat(name, "/").concat(childName));
      });
    };
    /**
     * @param {createConsoleLogger.LoggerOptions} options new options, merge with old options
     * @returns {void}
     */
    
    
    exports.configureDefaultLogger = function (options) {
      _extends(currentDefaultLoggerOptions, options);
    
      currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);
    };
    
    exports.hooks = {
      log: new SyncBailHook(["origin", "type", "args"])
    };
    
    /***/ })
    
    /******/ 	});
    /************************************************************************/
    /******/ 	// The module cache
    /******/ 	var __webpack_module_cache__ = {};
    /******/ 	
    /******/ 	// The require function
    /******/ 	function __nested_webpack_require_22910__(moduleId) {
    /******/ 		// Check if module is in cache
    /******/ 		var cachedModule = __webpack_module_cache__[moduleId];
    /******/ 		if (cachedModule !== undefined) {
    /******/ 			return cachedModule.exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = __webpack_module_cache__[moduleId] = {
    /******/ 			// no module.id needed
    /******/ 			// no module.loaded needed
    /******/ 			exports: {}
    /******/ 		};
    /******/ 	
    /******/ 		// Execute the module function
    /******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_22910__);
    /******/ 	
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/ 	
    /************************************************************************/
    /******/ 	/* webpack/runtime/define property getters */
    /******/ 	!function() {
    /******/ 		// define getter functions for harmony exports
    /******/ 		__nested_webpack_require_22910__.d = function(exports, definition) {
    /******/ 			for(var key in definition) {
    /******/ 				if(__nested_webpack_require_22910__.o(definition, key) && !__nested_webpack_require_22910__.o(exports, key)) {
    /******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
    /******/ 				}
    /******/ 			}
    /******/ 		};
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/hasOwnProperty shorthand */
    /******/ 	!function() {
    /******/ 		__nested_webpack_require_22910__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/make namespace object */
    /******/ 	!function() {
    /******/ 		// define __esModule on exports
    /******/ 		__nested_webpack_require_22910__.r = function(exports) {
    /******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
    /******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
    /******/ 			}
    /******/ 			Object.defineProperty(exports, '__esModule', { value: true });
    /******/ 		};
    /******/ 	}();
    /******/ 	
    /************************************************************************/
    var __webpack_exports__ = {};
    // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
    !function() {
    /*!********************************************!*\
      !*** ./client-src/modules/logger/index.js ***!
      \********************************************/
    __nested_webpack_require_22910__.r(__webpack_exports__);
    /* harmony export */ __nested_webpack_require_22910__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* reexport default export from named module */ webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__; }
    /* harmony export */ });
    /* harmony import */ var webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_22910__(/*! webpack/lib/logging/runtime.js */ "./node_modules/webpack/lib/logging/runtime.js");
    
    }();
    var __webpack_export_target__ = exports;
    for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
    if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
    /******/ })()
    ;
    
    /***/ }),
    
    /***/ "./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js":
    /*!****************************************************************************!*\
      !*** ./node_modules/webpack-dev-server/client/modules/strip-ansi/index.js ***!
      \****************************************************************************/
    /***/ (function(__unused_webpack_module, exports) {
    
    /******/ (function() { // webpackBootstrap
    /******/ 	"use strict";
    /******/ 	var __webpack_modules__ = ({
    
    /***/ "./node_modules/strip-ansi/index.js":
    /*!******************************************!*\
      !*** ./node_modules/strip-ansi/index.js ***!
      \******************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_368__) {
    
    __nested_webpack_require_368__.r(__webpack_exports__);
    /* harmony export */ __nested_webpack_require_368__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ stripAnsi; }
    /* harmony export */ });
    /* harmony import */ var ansi_regex__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_368__(/*! ansi-regex */ "./node_modules/strip-ansi/node_modules/ansi-regex/index.js");
    
    function stripAnsi(string) {
      if (typeof string !== 'string') {
        throw new TypeError("Expected a `string`, got `".concat(typeof string, "`"));
      }
    
      return string.replace((0,ansi_regex__WEBPACK_IMPORTED_MODULE_0__["default"])(), '');
    }
    
    /***/ }),
    
    /***/ "./node_modules/strip-ansi/node_modules/ansi-regex/index.js":
    /*!******************************************************************!*\
      !*** ./node_modules/strip-ansi/node_modules/ansi-regex/index.js ***!
      \******************************************************************/
    /***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_1387__) {
    
    __nested_webpack_require_1387__.r(__webpack_exports__);
    /* harmony export */ __nested_webpack_require_1387__.d(__webpack_exports__, {
    /* harmony export */   "default": function() { return /* binding */ ansiRegex; }
    /* harmony export */ });
    function ansiRegex() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$onlyFirst = _ref.onlyFirst,
          onlyFirst = _ref$onlyFirst === void 0 ? false : _ref$onlyFirst;
    
      var pattern = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'].join('|');
      return new RegExp(pattern, onlyFirst ? undefined : 'g');
    }
    
    /***/ })
    
    /******/ 	});
    /************************************************************************/
    /******/ 	// The module cache
    /******/ 	var __webpack_module_cache__ = {};
    /******/ 	
    /******/ 	// The require function
    /******/ 	function __nested_webpack_require_2352__(moduleId) {
    /******/ 		// Check if module is in cache
    /******/ 		var cachedModule = __webpack_module_cache__[moduleId];
    /******/ 		if (cachedModule !== undefined) {
    /******/ 			return cachedModule.exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = __webpack_module_cache__[moduleId] = {
    /******/ 			// no module.id needed
    /******/ 			// no module.loaded needed
    /******/ 			exports: {}
    /******/ 		};
    /******/ 	
    /******/ 		// Execute the module function
    /******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_2352__);
    /******/ 	
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/ 	
    /************************************************************************/
    /******/ 	/* webpack/runtime/define property getters */
    /******/ 	!function() {
    /******/ 		// define getter functions for harmony exports
    /******/ 		__nested_webpack_require_2352__.d = function(exports, definition) {
    /******/ 			for(var key in definition) {
    /******/ 				if(__nested_webpack_require_2352__.o(definition, key) && !__nested_webpack_require_2352__.o(exports, key)) {
    /******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
    /******/ 				}
    /******/ 			}
    /******/ 		};
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/hasOwnProperty shorthand */
    /******/ 	!function() {
    /******/ 		__nested_webpack_require_2352__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/make namespace object */
    /******/ 	!function() {
    /******/ 		// define __esModule on exports
    /******/ 		__nested_webpack_require_2352__.r = function(exports) {
    /******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
    /******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
    /******/ 			}
    /******/ 			Object.defineProperty(exports, '__esModule', { value: true });
    /******/ 		};
    /******/ 	}();
    /******/ 	
    /************************************************************************/
    var __webpack_exports__ = {};
    // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
    !function() {
    /*!************************************************!*\
      !*** ./client-src/modules/strip-ansi/index.js ***!
      \************************************************/
    __nested_webpack_require_2352__.r(__webpack_exports__);
    /* harmony import */ var strip_ansi__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_2352__(/*! strip-ansi */ "./node_modules/strip-ansi/index.js");
    
    /* harmony default export */ __webpack_exports__["default"] = (strip_ansi__WEBPACK_IMPORTED_MODULE_0__["default"]);
    }();
    var __webpack_export_target__ = exports;
    for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
    if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
    /******/ })()
    ;
    
    /***/ }),
    
    /***/ "./node_modules/webpack-dev-server/client/overlay.js":
    /*!***********************************************************!*\
      !*** ./node_modules/webpack-dev-server/client/overlay.js ***!
      \***********************************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    __webpack_require__.r(__webpack_exports__);
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "formatProblem": function() { return /* binding */ formatProblem; },
    /* harmony export */   "show": function() { return /* binding */ show; },
    /* harmony export */   "hide": function() { return /* binding */ hide; }
    /* harmony export */ });
    /* harmony import */ var ansi_html_community__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ansi-html-community */ "./node_modules/ansi-html-community/index.js");
    /* harmony import */ var ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ansi_html_community__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */ var html_entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! html-entities */ "./node_modules/html-entities/lib/index.js");
    /* harmony import */ var html_entities__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(html_entities__WEBPACK_IMPORTED_MODULE_1__);
    // The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
    // They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).
    
    
    var colors = {
      reset: ["transparent", "transparent"],
      black: "181818",
      red: "E36049",
      green: "B3CB74",
      yellow: "FFD080",
      blue: "7CAFC2",
      magenta: "7FACCA",
      cyan: "C3C2EF",
      lightgrey: "EBE7E3",
      darkgrey: "6D7891"
    };
    var iframeContainerElement;
    var containerElement;
    var onLoadQueue = [];
    ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default().setColors(colors);
    
    function createContainer() {
      iframeContainerElement = document.createElement("iframe");
      iframeContainerElement.id = "webpack-dev-server-client-overlay";
      iframeContainerElement.src = "about:blank";
      iframeContainerElement.style.position = "fixed";
      iframeContainerElement.style.left = 0;
      iframeContainerElement.style.top = 0;
      iframeContainerElement.style.right = 0;
      iframeContainerElement.style.bottom = 0;
      iframeContainerElement.style.width = "100vw";
      iframeContainerElement.style.height = "100vh";
      iframeContainerElement.style.border = "none";
      iframeContainerElement.style.zIndex = 9999999999;
    
      iframeContainerElement.onload = function () {
        containerElement = iframeContainerElement.contentDocument.createElement("div");
        containerElement.id = "webpack-dev-server-client-overlay-div";
        containerElement.style.position = "fixed";
        containerElement.style.boxSizing = "border-box";
        containerElement.style.left = 0;
        containerElement.style.top = 0;
        containerElement.style.right = 0;
        containerElement.style.bottom = 0;
        containerElement.style.width = "100vw";
        containerElement.style.height = "100vh";
        containerElement.style.backgroundColor = "rgba(0, 0, 0, 0.85)";
        containerElement.style.color = "#E8E8E8";
        containerElement.style.fontFamily = "Menlo, Consolas, monospace";
        containerElement.style.fontSize = "large";
        containerElement.style.padding = "2rem";
        containerElement.style.lineHeight = "1.2";
        containerElement.style.whiteSpace = "pre-wrap";
        containerElement.style.overflow = "auto";
        var headerElement = document.createElement("span");
        headerElement.innerText = "Compiled with problems:";
        var closeButtonElement = document.createElement("button");
        closeButtonElement.innerText = "X";
        closeButtonElement.style.background = "transparent";
        closeButtonElement.style.border = "none";
        closeButtonElement.style.fontSize = "20px";
        closeButtonElement.style.fontWeight = "bold";
        closeButtonElement.style.color = "white";
        closeButtonElement.style.cursor = "pointer";
        closeButtonElement.style.cssFloat = "right";
        closeButtonElement.style.styleFloat = "right";
        closeButtonElement.addEventListener("click", function () {
          hide();
        });
        containerElement.appendChild(headerElement);
        containerElement.appendChild(closeButtonElement);
        containerElement.appendChild(document.createElement("br"));
        containerElement.appendChild(document.createElement("br"));
        iframeContainerElement.contentDocument.body.appendChild(containerElement);
        onLoadQueue.forEach(function (onLoad) {
          onLoad(containerElement);
        });
        onLoadQueue = [];
        iframeContainerElement.onload = null;
      };
    
      document.body.appendChild(iframeContainerElement);
    }
    
    function ensureOverlayExists(callback) {
      if (containerElement) {
        // Everything is ready, call the callback right away.
        callback(containerElement);
        return;
      }
    
      onLoadQueue.push(callback);
    
      if (iframeContainerElement) {
        return;
      }
    
      createContainer();
    } // Successful compilation.
    
    
    function hide() {
      if (!iframeContainerElement) {
        return;
      } // Clean up and reset internal state.
    
    
      document.body.removeChild(iframeContainerElement);
      iframeContainerElement = null;
      containerElement = null;
    }
    
    function formatProblem(type, item) {
      var header = type === "warning" ? "WARNING" : "ERROR";
      var body = "";
    
      if (typeof item === "string") {
        body += item;
      } else {
        var file = item.file || ""; // eslint-disable-next-line no-nested-ternary
    
        var moduleName = item.moduleName ? item.moduleName.indexOf("!") !== -1 ? "".concat(item.moduleName.replace(/^(\s|\S)*!/, ""), " (").concat(item.moduleName, ")") : "".concat(item.moduleName) : "";
        var loc = item.loc;
        header += "".concat(moduleName || file ? " in ".concat(moduleName ? "".concat(moduleName).concat(file ? " (".concat(file, ")") : "") : file).concat(loc ? " ".concat(loc) : "") : "");
        body += item.message || "";
      }
    
      return {
        header: header,
        body: body
      };
    } // Compilation with errors (e.g. syntax error or missing modules).
    
    
    function show(type, messages) {
      ensureOverlayExists(function () {
        messages.forEach(function (message) {
          var entryElement = document.createElement("div");
          var typeElement = document.createElement("span");
    
          var _formatProblem = formatProblem(type, message),
              header = _formatProblem.header,
              body = _formatProblem.body;
    
          typeElement.innerText = header;
          typeElement.style.color = "#".concat(colors.red); // Make it look similar to our terminal.
    
          var text = ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default()((0,html_entities__WEBPACK_IMPORTED_MODULE_1__.encode)(body));
          var messageTextNode = document.createElement("div");
          messageTextNode.innerHTML = text;
          entryElement.appendChild(typeElement);
          entryElement.appendChild(document.createElement("br"));
          entryElement.appendChild(document.createElement("br"));
          entryElement.appendChild(messageTextNode);
          entryElement.appendChild(document.createElement("br"));
          entryElement.appendChild(document.createElement("br"));
          containerElement.appendChild(entryElement);
        });
      });
    }
    
    
    
    /***/ }),
    
    /***/ "./node_modules/webpack-dev-server/client/socket.js":
    /*!**********************************************************!*\
      !*** ./node_modules/webpack-dev-server/client/socket.js ***!
      \**********************************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clients/WebSocketClient.js */ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js");
    /* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
    /* provided dependency */ var __webpack_dev_server_client__ = __webpack_require__(/*! ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js */ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js");
    /* global __webpack_dev_server_client__ */
    
     // this WebsocketClient is here as a default fallback, in case the client is not injected
    
    /* eslint-disable camelcase */
    
    var Client = // eslint-disable-next-line camelcase, no-nested-ternary
    typeof __webpack_dev_server_client__ !== "undefined" ? // eslint-disable-next-line camelcase
    typeof __webpack_dev_server_client__.default !== "undefined" ? __webpack_dev_server_client__.default : __webpack_dev_server_client__ : _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__["default"];
    /* eslint-enable camelcase */
    
    var retries = 0;
    var maxRetries = 10;
    var client = null;
    
    var socket = function initSocket(url, handlers, reconnect) {
      client = new Client(url);
      client.onOpen(function () {
        retries = 0;
        maxRetries = reconnect;
      });
      client.onClose(function () {
        if (retries === 0) {
          handlers.close();
        } // Try to reconnect.
    
    
        client = null; // After 10 retries stop trying, to prevent logspam.
    
        if (retries < maxRetries) {
          // Exponentially increase timeout to reconnect.
          // Respectfully copied from the package `got`.
          // eslint-disable-next-line no-mixed-operators, no-restricted-properties
          var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
          retries += 1;
          _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("Trying to reconnect...");
          setTimeout(function () {
            socket(url, handlers, reconnect);
          }, retryInMs);
        }
      });
      client.onMessage(function (data) {
        var message = JSON.parse(data);
    
        if (handlers[message.type]) {
          handlers[message.type](message.data, message.params);
        }
      });
    };
    
    /* harmony default export */ __webpack_exports__["default"] = (socket);
    
    /***/ }),
    
    /***/ "./node_modules/webpack-dev-server/client/utils/createSocketURL.js":
    /*!*************************************************************************!*\
      !*** ./node_modules/webpack-dev-server/client/utils/createSocketURL.js ***!
      \*************************************************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! url */ "./node_modules/url/url.js");
     // We handle legacy API that is Node.js specific, and a newer API that implements the same WHATWG URL Standard used by web browsers
    // Please look at https://nodejs.org/api/url.html#url_url_strings_and_url_objects
    
    function createSocketURL(parsedURL) {
      var hostname = parsedURL.hostname; // Node.js module parses it as `::`
      // `new URL(urlString, [baseURLstring])` parses it as '[::]'
    
      var isInAddrAny = hostname === "0.0.0.0" || hostname === "::" || hostname === "[::]"; // why do we need this check?
      // hostname n/a for file protocol (example, when using electron, ionic)
      // see: https://github.com/webpack/webpack-dev-server/pull/384
    
      if (isInAddrAny && self.location.hostname && self.location.protocol.indexOf("http") === 0) {
        hostname = self.location.hostname;
      }
    
      var socketURLProtocol = parsedURL.protocol || self.location.protocol; // When https is used in the app, secure web sockets are always necessary because the browser doesn't accept non-secure web sockets.
    
      if (socketURLProtocol === "auto:" || hostname && isInAddrAny && self.location.protocol === "https:") {
        socketURLProtocol = self.location.protocol;
      }
    
      socketURLProtocol = socketURLProtocol.replace(/^(?:http|.+-extension|file)/i, "ws");
      var socketURLAuth = ""; // `new URL(urlString, [baseURLstring])` doesn't have `auth` property
      // Parse authentication credentials in case we need them
    
      if (parsedURL.username) {
        socketURLAuth = parsedURL.username; // Since HTTP basic authentication does not allow empty username,
        // we only include password if the username is not empty.
    
        if (parsedURL.password) {
          // Result: <username>:<password>
          socketURLAuth = socketURLAuth.concat(":", parsedURL.password);
        }
      } // In case the host is a raw IPv6 address, it can be enclosed in
      // the brackets as the brackets are needed in the final URL string.
      // Need to remove those as url.format blindly adds its own set of brackets
      // if the host string contains colons. That would lead to non-working
      // double brackets (e.g. [[::]]) host
      //
      // All of these web socket url params are optionally passed in through resourceQuery,
      // so we need to fall back to the default if they are not provided
    
    
      var socketURLHostname = (hostname || self.location.hostname || "localhost").replace(/^\[(.*)\]$/, "$1");
      var socketURLPort = parsedURL.port;
    
      if (!socketURLPort || socketURLPort === "0") {
        socketURLPort = self.location.port;
      } // If path is provided it'll be passed in via the resourceQuery as a
      // query param so it has to be parsed out of the querystring in order for the
      // client to open the socket to the correct location.
    
    
      var socketURLPathname = "/ws";
    
      if (parsedURL.pathname && !parsedURL.fromCurrentScript) {
        socketURLPathname = parsedURL.pathname;
      }
    
      return url__WEBPACK_IMPORTED_MODULE_0__.format({
        protocol: socketURLProtocol,
        auth: socketURLAuth,
        hostname: socketURLHostname,
        port: socketURLPort,
        pathname: socketURLPathname,
        slashes: true
      });
    }
    
    /* harmony default export */ __webpack_exports__["default"] = (createSocketURL);
    
    /***/ }),
    
    /***/ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":
    /*!********************************************************************************!*\
      !*** ./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js ***!
      \********************************************************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    __webpack_require__.r(__webpack_exports__);
    function getCurrentScriptSource() {
      // `document.currentScript` is the most accurate way to find the current script,
      // but is not supported in all browsers.
      if (document.currentScript) {
        return document.currentScript.getAttribute("src");
      } // Fallback to getting all scripts running in the document.
    
    
      var scriptElements = document.scripts || [];
      var scriptElementsWithSrc = Array.prototype.filter.call(scriptElements, function (element) {
        return element.getAttribute("src");
      });
    
      if (scriptElementsWithSrc.length > 0) {
        var currentScript = scriptElementsWithSrc[scriptElementsWithSrc.length - 1];
        return currentScript.getAttribute("src");
      } // Fail as there was no script to use.
    
    
      throw new Error("[webpack-dev-server] Failed to get current script source.");
    }
    
    /* harmony default export */ __webpack_exports__["default"] = (getCurrentScriptSource);
    
    /***/ }),
    
    /***/ "./node_modules/webpack-dev-server/client/utils/log.js":
    /*!*************************************************************!*\
      !*** ./node_modules/webpack-dev-server/client/utils/log.js ***!
      \*************************************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    __webpack_require__.r(__webpack_exports__);
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "log": function() { return /* binding */ log; },
    /* harmony export */   "setLogLevel": function() { return /* binding */ setLogLevel; }
    /* harmony export */ });
    /* harmony import */ var _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/logger/index.js */ "./node_modules/webpack-dev-server/client/modules/logger/index.js");
    /* harmony import */ var _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__);
    
    var name = "webpack-dev-server"; // default level is set on the client side, so it does not need
    // to be set by the CLI or API
    
    var defaultLevel = "info";
    
    function setLogLevel(level) {
      _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default().configureDefaultLogger({
        level: level
      });
    }
    
    setLogLevel(defaultLevel);
    var log = _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default().getLogger(name);
    
    
    /***/ }),
    
    /***/ "./node_modules/webpack-dev-server/client/utils/parseURL.js":
    /*!******************************************************************!*\
      !*** ./node_modules/webpack-dev-server/client/utils/parseURL.js ***!
      \******************************************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! url */ "./node_modules/url/url.js");
    /* harmony import */ var _getCurrentScriptSource_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getCurrentScriptSource.js */ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");
    
    
    
    function parseURL(resourceQuery) {
      var options = {};
    
      if (typeof resourceQuery === "string" && resourceQuery !== "") {
        var searchParams = resourceQuery.substr(1).split("&");
    
        for (var i = 0; i < searchParams.length; i++) {
          var pair = searchParams[i].split("=");
          options[pair[0]] = decodeURIComponent(pair[1]);
        }
      } else {
        // Else, get the url from the <script> this file was called with.
        var scriptSource = (0,_getCurrentScriptSource_js__WEBPACK_IMPORTED_MODULE_1__["default"])();
    
        if (scriptSource) {
          var scriptSourceURL;
    
          try {
            // The placeholder `baseURL` with `window.location.href`,
            // is to allow parsing of path-relative or protocol-relative URLs,
            // and will have no effect if `scriptSource` is a fully valid URL.
            scriptSourceURL = new URL(scriptSource, self.location.href);
          } catch (error) {// URL parsing failed, do nothing.
            // We will still proceed to see if we can recover using `resourceQuery`
          }
    
          if (scriptSourceURL) {
            options = scriptSourceURL;
            options.fromCurrentScript = true;
          }
        } else {
          options = url__WEBPACK_IMPORTED_MODULE_0__.parse(self.location.href, true, true);
          options.fromCurrentScript = true;
        }
      }
    
      return options;
    }
    
    /* harmony default export */ __webpack_exports__["default"] = (parseURL);
    
    /***/ }),
    
    /***/ "./node_modules/webpack-dev-server/client/utils/reloadApp.js":
    /*!*******************************************************************!*\
      !*** ./node_modules/webpack-dev-server/client/utils/reloadApp.js ***!
      \*******************************************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    __webpack_require__.r(__webpack_exports__);
    /* harmony import */ var webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webpack/hot/emitter.js */ "./node_modules/webpack/hot/emitter.js");
    /* harmony import */ var webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
    /* global __webpack_hash__ */
    
    
    
    function reloadApp(_ref, status) {
      var hot = _ref.hot,
          liveReload = _ref.liveReload;
    
      if (status.isUnloading) {
        return;
      }
    
      var currentHash = status.currentHash,
          previousHash = status.previousHash;
      var isInitial = currentHash.indexOf(previousHash) >= 0;
    
      if (isInitial) {
        return;
      }
    
      function applyReload(rootWindow, intervalId) {
        clearInterval(intervalId);
        _log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("App updated. Reloading...");
        rootWindow.location.reload();
      }
    
      var search = self.location.search.toLowerCase();
      var allowToHot = search.indexOf("webpack-dev-server-hot=false") === -1;
      var allowToLiveReload = search.indexOf("webpack-dev-server-live-reload=false") === -1;
    
      if (hot && allowToHot) {
        _log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("App hot update...");
        webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0___default().emit("webpackHotUpdate", status.currentHash);
    
        if (typeof self !== "undefined" && self.window) {
          // broadcast update to window
          self.postMessage("webpackHotUpdate".concat(status.currentHash), "*");
        }
      } // allow refreshing the page only if liveReload isn't disabled
      else if (liveReload && allowToLiveReload) {
        var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)
    
        var intervalId = self.setInterval(function () {
          if (rootWindow.location.protocol !== "about:") {
            // reload immediately if protocol is valid
            applyReload(rootWindow, intervalId);
          } else {
            rootWindow = rootWindow.parent;
    
            if (rootWindow.parent === rootWindow) {
              // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways
              applyReload(rootWindow, intervalId);
            }
          }
        });
      }
    }
    
    /* harmony default export */ __webpack_exports__["default"] = (reloadApp);
    
    /***/ }),
    
    /***/ "./node_modules/webpack-dev-server/client/utils/sendMessage.js":
    /*!*********************************************************************!*\
      !*** ./node_modules/webpack-dev-server/client/utils/sendMessage.js ***!
      \*********************************************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    __webpack_require__.r(__webpack_exports__);
    /* global __resourceQuery WorkerGlobalScope */
    // Send messages to the outside, so plugins can consume it.
    function sendMsg(type, data) {
      if (typeof self !== "undefined" && (typeof WorkerGlobalScope === "undefined" || !(self instanceof WorkerGlobalScope))) {
        self.postMessage({
          type: "webpack".concat(type),
          data: data
        }, "*");
      }
    }
    
    /* harmony default export */ __webpack_exports__["default"] = (sendMsg);
    
    /***/ }),
    
    /***/ "./node_modules/webpack/hot/dev-server.js":
    /*!************************************************!*\
      !*** ./node_modules/webpack/hot/dev-server.js ***!
      \************************************************/
    /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
    
    /*
        MIT License http://www.opensource.org/licenses/mit-license.php
        Author Tobias Koppers @sokra
    */
    /* globals __webpack_hash__ */
    if (true) {
        var lastHash;
        var upToDate = function upToDate() {
            return lastHash.indexOf(__webpack_require__.h()) >= 0;
        };
        var log = __webpack_require__(/*! ./log */ "./node_modules/webpack/hot/log.js");
        var check = function check() {
            module.hot
                .check(true)
                .then(function (updatedModules) {
                    if (!updatedModules) {
                        log("warning", "[HMR] Cannot find update. Need to do a full reload!");
                        log(
                            "warning",
                            "[HMR] (Probably because of restarting the webpack-dev-server)"
                        );
                        window.location.reload();
                        return;
                    }
    
                    if (!upToDate()) {
                        check();
                    }
    
                    __webpack_require__(/*! ./log-apply-result */ "./node_modules/webpack/hot/log-apply-result.js")(updatedModules, updatedModules);
    
                    if (upToDate()) {
                        log("info", "[HMR] App is up to date.");
                    }
                })
                .catch(function (err) {
                    var status = module.hot.status();
                    if (["abort", "fail"].indexOf(status) >= 0) {
                        log(
                            "warning",
                            "[HMR] Cannot apply update. Need to do a full reload!"
                        );
                        log("warning", "[HMR] " + log.formatError(err));
                        window.location.reload();
                    } else {
                        log("warning", "[HMR] Update failed: " + log.formatError(err));
                    }
                });
        };
        var hotEmitter = __webpack_require__(/*! ./emitter */ "./node_modules/webpack/hot/emitter.js");
        hotEmitter.on("webpackHotUpdate", function (currentHash) {
            lastHash = currentHash;
            if (!upToDate() && module.hot.status() === "idle") {
                log("info", "[HMR] Checking for updates on the server...");
                check();
            }
        });
        log("info", "[HMR] Waiting for update signal from WDS...");
    } else {}
    
    
    /***/ }),
    
    /***/ "./node_modules/webpack/hot/emitter.js":
    /*!*********************************************!*\
      !*** ./node_modules/webpack/hot/emitter.js ***!
      \*********************************************/
    /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
    
    var EventEmitter = __webpack_require__(/*! events */ "./node_modules/events/events.js");
    module.exports = new EventEmitter();
    
    
    /***/ }),
    
    /***/ "./node_modules/webpack/hot/log-apply-result.js":
    /*!******************************************************!*\
      !*** ./node_modules/webpack/hot/log-apply-result.js ***!
      \******************************************************/
    /***/ (function(module, __unused_webpack_exports, __webpack_require__) {
    
    /*
        MIT License http://www.opensource.org/licenses/mit-license.php
        Author Tobias Koppers @sokra
    */
    module.exports = function (updatedModules, renewedModules) {
        var unacceptedModules = updatedModules.filter(function (moduleId) {
            return renewedModules && renewedModules.indexOf(moduleId) < 0;
        });
        var log = __webpack_require__(/*! ./log */ "./node_modules/webpack/hot/log.js");
    
        if (unacceptedModules.length > 0) {
            log(
                "warning",
                "[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"
            );
            unacceptedModules.forEach(function (moduleId) {
                log("warning", "[HMR]  - " + moduleId);
            });
        }
    
        if (!renewedModules || renewedModules.length === 0) {
            log("info", "[HMR] Nothing hot updated.");
        } else {
            log("info", "[HMR] Updated modules:");
            renewedModules.forEach(function (moduleId) {
                if (typeof moduleId === "string" && moduleId.indexOf("!") !== -1) {
                    var parts = moduleId.split("!");
                    log.groupCollapsed("info", "[HMR]  - " + parts.pop());
                    log("info", "[HMR]  - " + moduleId);
                    log.groupEnd("info");
                } else {
                    log("info", "[HMR]  - " + moduleId);
                }
            });
            var numberIds = renewedModules.every(function (moduleId) {
                return typeof moduleId === "number";
            });
            if (numberIds)
                log(
                    "info",
                    '[HMR] Consider using the optimization.moduleIds: "named" for module names.'
                );
        }
    };
    
    
    /***/ }),
    
    /***/ "./node_modules/webpack/hot/log.js":
    /*!*****************************************!*\
      !*** ./node_modules/webpack/hot/log.js ***!
      \*****************************************/
    /***/ (function(module) {
    
    var logLevel = "info";
    
    function dummy() {}
    
    function shouldLog(level) {
        var shouldLog =
            (logLevel === "info" && level === "info") ||
            (["info", "warning"].indexOf(logLevel) >= 0 && level === "warning") ||
            (["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error");
        return shouldLog;
    }
    
    function logGroup(logFn) {
        return function (level, msg) {
            if (shouldLog(level)) {
                logFn(msg);
            }
        };
    }
    
    module.exports = function (level, msg) {
        if (shouldLog(level)) {
            if (level === "info") {
                console.log(msg);
            } else if (level === "warning") {
                console.warn(msg);
            } else if (level === "error") {
                console.error(msg);
            }
        }
    };
    
    /* eslint-disable node/no-unsupported-features/node-builtins */
    var group = console.group || dummy;
    var groupCollapsed = console.groupCollapsed || dummy;
    var groupEnd = console.groupEnd || dummy;
    /* eslint-enable node/no-unsupported-features/node-builtins */
    
    module.exports.group = logGroup(group);
    
    module.exports.groupCollapsed = logGroup(groupCollapsed);
    
    module.exports.groupEnd = logGroup(groupEnd);
    
    module.exports.setLogLevel = function (level) {
        logLevel = level;
    };
    
    module.exports.formatError = function (err) {
        var message = err.message;
        var stack = err.stack;
        if (!stack) {
            return message;
        } else if (stack.indexOf(message) < 0) {
            return message + "\n" + stack;
        } else {
            return stack;
        }
    };
    
    
    /***/ }),
    
    /***/ "./node_modules/whatwg-fetch/fetch.js":
    /*!********************************************!*\
      !*** ./node_modules/whatwg-fetch/fetch.js ***!
      \********************************************/
    /***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
    
    "use strict";
    __webpack_require__.r(__webpack_exports__);
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "Headers": function() { return /* binding */ Headers; },
    /* harmony export */   "Request": function() { return /* binding */ Request; },
    /* harmony export */   "Response": function() { return /* binding */ Response; },
    /* harmony export */   "DOMException": function() { return /* binding */ DOMException; },
    /* harmony export */   "fetch": function() { return /* binding */ fetch; }
    /* harmony export */ });
    var global =
      (typeof globalThis !== 'undefined' && globalThis) ||
      (typeof self !== 'undefined' && self) ||
      (typeof global !== 'undefined' && global)
    
    var support = {
      searchParams: 'URLSearchParams' in global,
      iterable: 'Symbol' in global && 'iterator' in Symbol,
      blob:
        'FileReader' in global &&
        'Blob' in global &&
        (function() {
          try {
            new Blob()
            return true
          } catch (e) {
            return false
          }
        })(),
      formData: 'FormData' in global,
      arrayBuffer: 'ArrayBuffer' in global
    }
    
    function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj)
    }
    
    if (support.arrayBuffer) {
      var viewClasses = [
        '[object Int8Array]',
        '[object Uint8Array]',
        '[object Uint8ClampedArray]',
        '[object Int16Array]',
        '[object Uint16Array]',
        '[object Int32Array]',
        '[object Uint32Array]',
        '[object Float32Array]',
        '[object Float64Array]'
      ]
    
      var isArrayBufferView =
        ArrayBuffer.isView ||
        function(obj) {
          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
        }
    }
    
    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name)
      }
      if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
        throw new TypeError('Invalid character in header field name: "' + name + '"')
      }
      return name.toLowerCase()
    }
    
    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value)
      }
      return value
    }
    
    // Build a destructive iterator for the value list
    function iteratorFor(items) {
      var iterator = {
        next: function() {
          var value = items.shift()
          return {done: value === undefined, value: value}
        }
      }
    
      if (support.iterable) {
        iterator[Symbol.iterator] = function() {
          return iterator
        }
      }
    
      return iterator
    }
    
    function Headers(headers) {
      this.map = {}
    
      if (headers instanceof Headers) {
        headers.forEach(function(value, name) {
          this.append(name, value)
        }, this)
      } else if (Array.isArray(headers)) {
        headers.forEach(function(header) {
          this.append(header[0], header[1])
        }, this)
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function(name) {
          this.append(name, headers[name])
        }, this)
      }
    }
    
    Headers.prototype.append = function(name, value) {
      name = normalizeName(name)
      value = normalizeValue(value)
      var oldValue = this.map[name]
      this.map[name] = oldValue ? oldValue + ', ' + value : value
    }
    
    Headers.prototype['delete'] = function(name) {
      delete this.map[normalizeName(name)]
    }
    
    Headers.prototype.get = function(name) {
      name = normalizeName(name)
      return this.has(name) ? this.map[name] : null
    }
    
    Headers.prototype.has = function(name) {
      return this.map.hasOwnProperty(normalizeName(name))
    }
    
    Headers.prototype.set = function(name, value) {
      this.map[normalizeName(name)] = normalizeValue(value)
    }
    
    Headers.prototype.forEach = function(callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this)
        }
      }
    }
    
    Headers.prototype.keys = function() {
      var items = []
      this.forEach(function(value, name) {
        items.push(name)
      })
      return iteratorFor(items)
    }
    
    Headers.prototype.values = function() {
      var items = []
      this.forEach(function(value) {
        items.push(value)
      })
      return iteratorFor(items)
    }
    
    Headers.prototype.entries = function() {
      var items = []
      this.forEach(function(value, name) {
        items.push([name, value])
      })
      return iteratorFor(items)
    }
    
    if (support.iterable) {
      Headers.prototype[Symbol.iterator] = Headers.prototype.entries
    }
    
    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'))
      }
      body.bodyUsed = true
    }
    
    function fileReaderReady(reader) {
      return new Promise(function(resolve, reject) {
        reader.onload = function() {
          resolve(reader.result)
        }
        reader.onerror = function() {
          reject(reader.error)
        }
      })
    }
    
    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader()
      var promise = fileReaderReady(reader)
      reader.readAsArrayBuffer(blob)
      return promise
    }
    
    function readBlobAsText(blob) {
      var reader = new FileReader()
      var promise = fileReaderReady(reader)
      reader.readAsText(blob)
      return promise
    }
    
    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf)
      var chars = new Array(view.length)
    
      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i])
      }
      return chars.join('')
    }
    
    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0)
      } else {
        var view = new Uint8Array(buf.byteLength)
        view.set(new Uint8Array(buf))
        return view.buffer
      }
    }
    
    function Body() {
      this.bodyUsed = false
    
      this._initBody = function(body) {
        /*
          fetch-mock wraps the Response object in an ES6 Proxy to
          provide useful test harness features such as flush. However, on
          ES5 browsers without fetch or Proxy support pollyfills must be used;
          the proxy-pollyfill is unable to proxy an attribute unless it exists
          on the object before the Proxy is created. This change ensures
          Response.bodyUsed exists on the instance, while maintaining the
          semantic of setting Request.bodyUsed in the constructor before
          _initBody is called.
        */
        this.bodyUsed = this.bodyUsed
        this._bodyInit = body
        if (!body) {
          this._bodyText = ''
        } else if (typeof body === 'string') {
          this._bodyText = body
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString()
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer)
          // IE 10-11 can't handle a DataView body.
          this._bodyInit = new Blob([this._bodyArrayBuffer])
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body)
        } else {
          this._bodyText = body = Object.prototype.toString.call(body)
        }
    
        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8')
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type)
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
          }
        }
      }
    
      if (support.blob) {
        this.blob = function() {
          var rejected = consumed(this)
          if (rejected) {
            return rejected
          }
    
          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob)
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]))
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob')
          } else {
            return Promise.resolve(new Blob([this._bodyText]))
          }
        }
    
        this.arrayBuffer = function() {
          if (this._bodyArrayBuffer) {
            var isConsumed = consumed(this)
            if (isConsumed) {
              return isConsumed
            }
            if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
              return Promise.resolve(
                this._bodyArrayBuffer.buffer.slice(
                  this._bodyArrayBuffer.byteOffset,
                  this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                )
              )
            } else {
              return Promise.resolve(this._bodyArrayBuffer)
            }
          } else {
            return this.blob().then(readBlobAsArrayBuffer)
          }
        }
      }
    
      this.text = function() {
        var rejected = consumed(this)
        if (rejected) {
          return rejected
        }
    
        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text')
        } else {
          return Promise.resolve(this._bodyText)
        }
      }
    
      if (support.formData) {
        this.formData = function() {
          return this.text().then(decode)
        }
      }
    
      this.json = function() {
        return this.text().then(JSON.parse)
      }
    
      return this
    }
    
    // HTTP methods whose capitalization should be normalized
    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']
    
    function normalizeMethod(method) {
      var upcased = method.toUpperCase()
      return methods.indexOf(upcased) > -1 ? upcased : method
    }
    
    function Request(input, options) {
      if (!(this instanceof Request)) {
        throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
      }
    
      options = options || {}
      var body = options.body
    
      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read')
        }
        this.url = input.url
        this.credentials = input.credentials
        if (!options.headers) {
          this.headers = new Headers(input.headers)
        }
        this.method = input.method
        this.mode = input.mode
        this.signal = input.signal
        if (!body && input._bodyInit != null) {
          body = input._bodyInit
          input.bodyUsed = true
        }
      } else {
        this.url = String(input)
      }
    
      this.credentials = options.credentials || this.credentials || 'same-origin'
      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers)
      }
      this.method = normalizeMethod(options.method || this.method || 'GET')
      this.mode = options.mode || this.mode || null
      this.signal = options.signal || this.signal
      this.referrer = null
    
      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests')
      }
      this._initBody(body)
    
      if (this.method === 'GET' || this.method === 'HEAD') {
        if (options.cache === 'no-store' || options.cache === 'no-cache') {
          // Search for a '_' parameter in the query string
          var reParamSearch = /([?&])_=[^&]*/
          if (reParamSearch.test(this.url)) {
            // If it already exists then set the value with the current time
            this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())
          } else {
            // Otherwise add a new '_' parameter to the end with the current time
            var reQueryString = /\?/
            this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()
          }
        }
      }
    }
    
    Request.prototype.clone = function() {
      return new Request(this, {body: this._bodyInit})
    }
    
    function decode(body) {
      var form = new FormData()
      body
        .trim()
        .split('&')
        .forEach(function(bytes) {
          if (bytes) {
            var split = bytes.split('=')
            var name = split.shift().replace(/\+/g, ' ')
            var value = split.join('=').replace(/\+/g, ' ')
            form.append(decodeURIComponent(name), decodeURIComponent(value))
          }
        })
      return form
    }
    
    function parseHeaders(rawHeaders) {
      var headers = new Headers()
      // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
      // https://tools.ietf.org/html/rfc7230#section-3.2
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
      // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
      // https://github.com/github/fetch/issues/748
      // https://github.com/zloirock/core-js/issues/751
      preProcessedHeaders
        .split('\r')
        .map(function(header) {
          return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
        })
        .forEach(function(line) {
          var parts = line.split(':')
          var key = parts.shift().trim()
          if (key) {
            var value = parts.join(':').trim()
            headers.append(key, value)
          }
        })
      return headers
    }
    
    Body.call(Request.prototype)
    
    function Response(bodyInit, options) {
      if (!(this instanceof Response)) {
        throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
      }
      if (!options) {
        options = {}
      }
    
      this.type = 'default'
      this.status = options.status === undefined ? 200 : options.status
      this.ok = this.status >= 200 && this.status < 300
      this.statusText = options.statusText === undefined ? '' : '' + options.statusText
      this.headers = new Headers(options.headers)
      this.url = options.url || ''
      this._initBody(bodyInit)
    }
    
    Body.call(Response.prototype)
    
    Response.prototype.clone = function() {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      })
    }
    
    Response.error = function() {
      var response = new Response(null, {status: 0, statusText: ''})
      response.type = 'error'
      return response
    }
    
    var redirectStatuses = [301, 302, 303, 307, 308]
    
    Response.redirect = function(url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code')
      }
    
      return new Response(null, {status: status, headers: {location: url}})
    }
    
    var DOMException = global.DOMException
    try {
      new DOMException()
    } catch (err) {
      DOMException = function(message, name) {
        this.message = message
        this.name = name
        var error = Error(message)
        this.stack = error.stack
      }
      DOMException.prototype = Object.create(Error.prototype)
      DOMException.prototype.constructor = DOMException
    }
    
    function fetch(input, init) {
      return new Promise(function(resolve, reject) {
        var request = new Request(input, init)
    
        if (request.signal && request.signal.aborted) {
          return reject(new DOMException('Aborted', 'AbortError'))
        }
    
        var xhr = new XMLHttpRequest()
    
        function abortXhr() {
          xhr.abort()
        }
    
        xhr.onload = function() {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          }
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
          var body = 'response' in xhr ? xhr.response : xhr.responseText
          setTimeout(function() {
            resolve(new Response(body, options))
          }, 0)
        }
    
        xhr.onerror = function() {
          setTimeout(function() {
            reject(new TypeError('Network request failed'))
          }, 0)
        }
    
        xhr.ontimeout = function() {
          setTimeout(function() {
            reject(new TypeError('Network request failed'))
          }, 0)
        }
    
        xhr.onabort = function() {
          setTimeout(function() {
            reject(new DOMException('Aborted', 'AbortError'))
          }, 0)
        }
    
        function fixUrl(url) {
          try {
            return url === '' && global.location.href ? global.location.href : url
          } catch (e) {
            return url
          }
        }
    
        xhr.open(request.method, fixUrl(request.url), true)
    
        if (request.credentials === 'include') {
          xhr.withCredentials = true
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false
        }
    
        if ('responseType' in xhr) {
          if (support.blob) {
            xhr.responseType = 'blob'
          } else if (
            support.arrayBuffer &&
            request.headers.get('Content-Type') &&
            request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
          ) {
            xhr.responseType = 'arraybuffer'
          }
        }
    
        if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
          Object.getOwnPropertyNames(init.headers).forEach(function(name) {
            xhr.setRequestHeader(name, normalizeValue(init.headers[name]))
          })
        } else {
          request.headers.forEach(function(value, name) {
            xhr.setRequestHeader(name, value)
          })
        }
    
        if (request.signal) {
          request.signal.addEventListener('abort', abortXhr)
    
          xhr.onreadystatechange = function() {
            // DONE (success or failure)
            if (xhr.readyState === 4) {
              request.signal.removeEventListener('abort', abortXhr)
            }
          }
        }
    
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
      })
    }
    
    fetch.polyfill = true
    
    if (!global.fetch) {
      global.fetch = fetch
      global.Headers = Headers
      global.Request = Request
      global.Response = Response
    }
    
    
    /***/ })
    
    /******/ 	});
    /************************************************************************/
    /******/ 	// The module cache
    /******/ 	var __webpack_module_cache__ = {};
    /******/ 	
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/ 		// Check if module is in cache
    /******/ 		var cachedModule = __webpack_module_cache__[moduleId];
    /******/ 		if (cachedModule !== undefined) {
    /******/ 			if (cachedModule.error !== undefined) throw cachedModule.error;
    /******/ 			return cachedModule.exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = __webpack_module_cache__[moduleId] = {
    /******/ 			id: moduleId,
    /******/ 			loaded: false,
    /******/ 			exports: {}
    /******/ 		};
    /******/ 	
    /******/ 		// Execute the module function
    /******/ 		try {
    /******/ 			var execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };
    /******/ 			__webpack_require__.i.forEach(function(handler) { handler(execOptions); });
    /******/ 			module = execOptions.module;
    /******/ 			execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
    /******/ 		} catch(e) {
    /******/ 			module.error = e;
    /******/ 			throw e;
    /******/ 		}
    /******/ 	
    /******/ 		// Flag the module as loaded
    /******/ 		module.loaded = true;
    /******/ 	
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/ 	
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = __webpack_modules__;
    /******/ 	
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = __webpack_module_cache__;
    /******/ 	
    /******/ 	// expose the module execution interceptor
    /******/ 	__webpack_require__.i = [];
    /******/ 	
    /************************************************************************/
    /******/ 	/* webpack/runtime/compat get default export */
    /******/ 	!function() {
    /******/ 		// getDefaultExport function for compatibility with non-harmony modules
    /******/ 		__webpack_require__.n = function(module) {
    /******/ 			var getter = module && module.__esModule ?
    /******/ 				function() { return module['default']; } :
    /******/ 				function() { return module; };
    /******/ 			__webpack_require__.d(getter, { a: getter });
    /******/ 			return getter;
    /******/ 		};
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/define property getters */
    /******/ 	!function() {
    /******/ 		// define getter functions for harmony exports
    /******/ 		__webpack_require__.d = function(exports, definition) {
    /******/ 			for(var key in definition) {
    /******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
    /******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
    /******/ 				}
    /******/ 			}
    /******/ 		};
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/get javascript update chunk filename */
    /******/ 	!function() {
    /******/ 		// This function allow to reference all chunks
    /******/ 		__webpack_require__.hu = function(chunkId) {
    /******/ 			// return url for filenames based on template
    /******/ 			return "" + chunkId + "." + __webpack_require__.h() + ".hot-update.js";
    /******/ 		};
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/get update manifest filename */
    /******/ 	!function() {
    /******/ 		__webpack_require__.hmrF = function() { return "main." + __webpack_require__.h() + ".hot-update.json"; };
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/getFullHash */
    /******/ 	!function() {
    /******/ 		__webpack_require__.h = function() { return "3271f5e8c09496a152dc"; }
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/global */
    /******/ 	!function() {
    /******/ 		__webpack_require__.g = (function() {
    /******/ 			if (typeof globalThis === 'object') return globalThis;
    /******/ 			try {
    /******/ 				return this || new Function('return this')();
    /******/ 			} catch (e) {
    /******/ 				if (typeof window === 'object') return window;
    /******/ 			}
    /******/ 		})();
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/hasOwnProperty shorthand */
    /******/ 	!function() {
    /******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/load script */
    /******/ 	!function() {
    /******/ 		var inProgress = {};
    /******/ 		// data-webpack is not used as build has no uniqueName
    /******/ 		// loadScript function to load a script via script tag
    /******/ 		__webpack_require__.l = function(url, done, key, chunkId) {
    /******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
    /******/ 			var script, needAttach;
    /******/ 			if(key !== undefined) {
    /******/ 				var scripts = document.getElementsByTagName("script");
    /******/ 				for(var i = 0; i < scripts.length; i++) {
    /******/ 					var s = scripts[i];
    /******/ 					if(s.getAttribute("src") == url) { script = s; break; }
    /******/ 				}
    /******/ 			}
    /******/ 			if(!script) {
    /******/ 				needAttach = true;
    /******/ 				script = document.createElement('script');
    /******/ 		
    /******/ 				script.charset = 'utf-8';
    /******/ 				script.timeout = 120;
    /******/ 				if (__webpack_require__.nc) {
    /******/ 					script.setAttribute("nonce", __webpack_require__.nc);
    /******/ 				}
    /******/ 		
    /******/ 				script.src = url;
    /******/ 			}
    /******/ 			inProgress[url] = [done];
    /******/ 			var onScriptComplete = function(prev, event) {
    /******/ 				// avoid mem leaks in IE.
    /******/ 				script.onerror = script.onload = null;
    /******/ 				clearTimeout(timeout);
    /******/ 				var doneFns = inProgress[url];
    /******/ 				delete inProgress[url];
    /******/ 				script.parentNode && script.parentNode.removeChild(script);
    /******/ 				doneFns && doneFns.forEach(function(fn) { return fn(event); });
    /******/ 				if(prev) return prev(event);
    /******/ 			}
    /******/ 			;
    /******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
    /******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
    /******/ 			script.onload = onScriptComplete.bind(null, script.onload);
    /******/ 			needAttach && document.head.appendChild(script);
    /******/ 		};
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/make namespace object */
    /******/ 	!function() {
    /******/ 		// define __esModule on exports
    /******/ 		__webpack_require__.r = function(exports) {
    /******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
    /******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
    /******/ 			}
    /******/ 			Object.defineProperty(exports, '__esModule', { value: true });
    /******/ 		};
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/node module decorator */
    /******/ 	!function() {
    /******/ 		__webpack_require__.nmd = function(module) {
    /******/ 			module.paths = [];
    /******/ 			if (!module.children) module.children = [];
    /******/ 			return module;
    /******/ 		};
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/hot module replacement */
    /******/ 	!function() {
    /******/ 		var currentModuleData = {};
    /******/ 		var installedModules = __webpack_require__.c;
    /******/ 		
    /******/ 		// module and require creation
    /******/ 		var currentChildModule;
    /******/ 		var currentParents = [];
    /******/ 		
    /******/ 		// status
    /******/ 		var registeredStatusHandlers = [];
    /******/ 		var currentStatus = "idle";
    /******/ 		
    /******/ 		// while downloading
    /******/ 		var blockingPromises;
    /******/ 		
    /******/ 		// The update info
    /******/ 		var currentUpdateApplyHandlers;
    /******/ 		var queuedInvalidatedModules;
    /******/ 		
    /******/ 		// eslint-disable-next-line no-unused-vars
    /******/ 		__webpack_require__.hmrD = currentModuleData;
    /******/ 		
    /******/ 		__webpack_require__.i.push(function (options) {
    /******/ 			var module = options.module;
    /******/ 			var require = createRequire(options.require, options.id);
    /******/ 			module.hot = createModuleHotObject(options.id, module);
    /******/ 			module.parents = currentParents;
    /******/ 			module.children = [];
    /******/ 			currentParents = [];
    /******/ 			options.require = require;
    /******/ 		});
    /******/ 		
    /******/ 		__webpack_require__.hmrC = {};
    /******/ 		__webpack_require__.hmrI = {};
    /******/ 		
    /******/ 		function createRequire(require, moduleId) {
    /******/ 			var me = installedModules[moduleId];
    /******/ 			if (!me) return require;
    /******/ 			var fn = function (request) {
    /******/ 				if (me.hot.active) {
    /******/ 					if (installedModules[request]) {
    /******/ 						var parents = installedModules[request].parents;
    /******/ 						if (parents.indexOf(moduleId) === -1) {
    /******/ 							parents.push(moduleId);
    /******/ 						}
    /******/ 					} else {
    /******/ 						currentParents = [moduleId];
    /******/ 						currentChildModule = request;
    /******/ 					}
    /******/ 					if (me.children.indexOf(request) === -1) {
    /******/ 						me.children.push(request);
    /******/ 					}
    /******/ 				} else {
    /******/ 					console.warn(
    /******/ 						"[HMR] unexpected require(" +
    /******/ 							request +
    /******/ 							") from disposed module " +
    /******/ 							moduleId
    /******/ 					);
    /******/ 					currentParents = [];
    /******/ 				}
    /******/ 				return require(request);
    /******/ 			};
    /******/ 			var createPropertyDescriptor = function (name) {
    /******/ 				return {
    /******/ 					configurable: true,
    /******/ 					enumerable: true,
    /******/ 					get: function () {
    /******/ 						return require[name];
    /******/ 					},
    /******/ 					set: function (value) {
    /******/ 						require[name] = value;
    /******/ 					}
    /******/ 				};
    /******/ 			};
    /******/ 			for (var name in require) {
    /******/ 				if (Object.prototype.hasOwnProperty.call(require, name) && name !== "e") {
    /******/ 					Object.defineProperty(fn, name, createPropertyDescriptor(name));
    /******/ 				}
    /******/ 			}
    /******/ 			fn.e = function (chunkId) {
    /******/ 				return trackBlockingPromise(require.e(chunkId));
    /******/ 			};
    /******/ 			return fn;
    /******/ 		}
    /******/ 		
    /******/ 		function createModuleHotObject(moduleId, me) {
    /******/ 			var _main = currentChildModule !== moduleId;
    /******/ 			var hot = {
    /******/ 				// private stuff
    /******/ 				_acceptedDependencies: {},
    /******/ 				_acceptedErrorHandlers: {},
    /******/ 				_declinedDependencies: {},
    /******/ 				_selfAccepted: false,
    /******/ 				_selfDeclined: false,
    /******/ 				_selfInvalidated: false,
    /******/ 				_disposeHandlers: [],
    /******/ 				_main: _main,
    /******/ 				_requireSelf: function () {
    /******/ 					currentParents = me.parents.slice();
    /******/ 					currentChildModule = _main ? undefined : moduleId;
    /******/ 					__webpack_require__(moduleId);
    /******/ 				},
    /******/ 		
    /******/ 				// Module API
    /******/ 				active: true,
    /******/ 				accept: function (dep, callback, errorHandler) {
    /******/ 					if (dep === undefined) hot._selfAccepted = true;
    /******/ 					else if (typeof dep === "function") hot._selfAccepted = dep;
    /******/ 					else if (typeof dep === "object" && dep !== null) {
    /******/ 						for (var i = 0; i < dep.length; i++) {
    /******/ 							hot._acceptedDependencies[dep[i]] = callback || function () {};
    /******/ 							hot._acceptedErrorHandlers[dep[i]] = errorHandler;
    /******/ 						}
    /******/ 					} else {
    /******/ 						hot._acceptedDependencies[dep] = callback || function () {};
    /******/ 						hot._acceptedErrorHandlers[dep] = errorHandler;
    /******/ 					}
    /******/ 				},
    /******/ 				decline: function (dep) {
    /******/ 					if (dep === undefined) hot._selfDeclined = true;
    /******/ 					else if (typeof dep === "object" && dep !== null)
    /******/ 						for (var i = 0; i < dep.length; i++)
    /******/ 							hot._declinedDependencies[dep[i]] = true;
    /******/ 					else hot._declinedDependencies[dep] = true;
    /******/ 				},
    /******/ 				dispose: function (callback) {
    /******/ 					hot._disposeHandlers.push(callback);
    /******/ 				},
    /******/ 				addDisposeHandler: function (callback) {
    /******/ 					hot._disposeHandlers.push(callback);
    /******/ 				},
    /******/ 				removeDisposeHandler: function (callback) {
    /******/ 					var idx = hot._disposeHandlers.indexOf(callback);
    /******/ 					if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
    /******/ 				},
    /******/ 				invalidate: function () {
    /******/ 					this._selfInvalidated = true;
    /******/ 					switch (currentStatus) {
    /******/ 						case "idle":
    /******/ 							currentUpdateApplyHandlers = [];
    /******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
    /******/ 								__webpack_require__.hmrI[key](
    /******/ 									moduleId,
    /******/ 									currentUpdateApplyHandlers
    /******/ 								);
    /******/ 							});
    /******/ 							setStatus("ready");
    /******/ 							break;
    /******/ 						case "ready":
    /******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
    /******/ 								__webpack_require__.hmrI[key](
    /******/ 									moduleId,
    /******/ 									currentUpdateApplyHandlers
    /******/ 								);
    /******/ 							});
    /******/ 							break;
    /******/ 						case "prepare":
    /******/ 						case "check":
    /******/ 						case "dispose":
    /******/ 						case "apply":
    /******/ 							(queuedInvalidatedModules = queuedInvalidatedModules || []).push(
    /******/ 								moduleId
    /******/ 							);
    /******/ 							break;
    /******/ 						default:
    /******/ 							// ignore requests in error states
    /******/ 							break;
    /******/ 					}
    /******/ 				},
    /******/ 		
    /******/ 				// Management API
    /******/ 				check: hotCheck,
    /******/ 				apply: hotApply,
    /******/ 				status: function (l) {
    /******/ 					if (!l) return currentStatus;
    /******/ 					registeredStatusHandlers.push(l);
    /******/ 				},
    /******/ 				addStatusHandler: function (l) {
    /******/ 					registeredStatusHandlers.push(l);
    /******/ 				},
    /******/ 				removeStatusHandler: function (l) {
    /******/ 					var idx = registeredStatusHandlers.indexOf(l);
    /******/ 					if (idx >= 0) registeredStatusHandlers.splice(idx, 1);
    /******/ 				},
    /******/ 		
    /******/ 				//inherit from previous dispose call
    /******/ 				data: currentModuleData[moduleId]
    /******/ 			};
    /******/ 			currentChildModule = undefined;
    /******/ 			return hot;
    /******/ 		}
    /******/ 		
    /******/ 		function setStatus(newStatus) {
    /******/ 			currentStatus = newStatus;
    /******/ 			var results = [];
    /******/ 		
    /******/ 			for (var i = 0; i < registeredStatusHandlers.length; i++)
    /******/ 				results[i] = registeredStatusHandlers[i].call(null, newStatus);
    /******/ 		
    /******/ 			return Promise.all(results);
    /******/ 		}
    /******/ 		
    /******/ 		function trackBlockingPromise(promise) {
    /******/ 			switch (currentStatus) {
    /******/ 				case "ready":
    /******/ 					setStatus("prepare");
    /******/ 					blockingPromises.push(promise);
    /******/ 					waitForBlockingPromises(function () {
    /******/ 						return setStatus("ready");
    /******/ 					});
    /******/ 					return promise;
    /******/ 				case "prepare":
    /******/ 					blockingPromises.push(promise);
    /******/ 					return promise;
    /******/ 				default:
    /******/ 					return promise;
    /******/ 			}
    /******/ 		}
    /******/ 		
    /******/ 		function waitForBlockingPromises(fn) {
    /******/ 			if (blockingPromises.length === 0) return fn();
    /******/ 			var blocker = blockingPromises;
    /******/ 			blockingPromises = [];
    /******/ 			return Promise.all(blocker).then(function () {
    /******/ 				return waitForBlockingPromises(fn);
    /******/ 			});
    /******/ 		}
    /******/ 		
    /******/ 		function hotCheck(applyOnUpdate) {
    /******/ 			if (currentStatus !== "idle") {
    /******/ 				throw new Error("check() is only allowed in idle status");
    /******/ 			}
    /******/ 			return setStatus("check")
    /******/ 				.then(__webpack_require__.hmrM)
    /******/ 				.then(function (update) {
    /******/ 					if (!update) {
    /******/ 						return setStatus(applyInvalidatedModules() ? "ready" : "idle").then(
    /******/ 							function () {
    /******/ 								return null;
    /******/ 							}
    /******/ 						);
    /******/ 					}
    /******/ 		
    /******/ 					return setStatus("prepare").then(function () {
    /******/ 						var updatedModules = [];
    /******/ 						blockingPromises = [];
    /******/ 						currentUpdateApplyHandlers = [];
    /******/ 		
    /******/ 						return Promise.all(
    /******/ 							Object.keys(__webpack_require__.hmrC).reduce(function (
    /******/ 								promises,
    /******/ 								key
    /******/ 							) {
    /******/ 								__webpack_require__.hmrC[key](
    /******/ 									update.c,
    /******/ 									update.r,
    /******/ 									update.m,
    /******/ 									promises,
    /******/ 									currentUpdateApplyHandlers,
    /******/ 									updatedModules
    /******/ 								);
    /******/ 								return promises;
    /******/ 							},
    /******/ 							[])
    /******/ 						).then(function () {
    /******/ 							return waitForBlockingPromises(function () {
    /******/ 								if (applyOnUpdate) {
    /******/ 									return internalApply(applyOnUpdate);
    /******/ 								} else {
    /******/ 									return setStatus("ready").then(function () {
    /******/ 										return updatedModules;
    /******/ 									});
    /******/ 								}
    /******/ 							});
    /******/ 						});
    /******/ 					});
    /******/ 				});
    /******/ 		}
    /******/ 		
    /******/ 		function hotApply(options) {
    /******/ 			if (currentStatus !== "ready") {
    /******/ 				return Promise.resolve().then(function () {
    /******/ 					throw new Error("apply() is only allowed in ready status");
    /******/ 				});
    /******/ 			}
    /******/ 			return internalApply(options);
    /******/ 		}
    /******/ 		
    /******/ 		function internalApply(options) {
    /******/ 			options = options || {};
    /******/ 		
    /******/ 			applyInvalidatedModules();
    /******/ 		
    /******/ 			var results = currentUpdateApplyHandlers.map(function (handler) {
    /******/ 				return handler(options);
    /******/ 			});
    /******/ 			currentUpdateApplyHandlers = undefined;
    /******/ 		
    /******/ 			var errors = results
    /******/ 				.map(function (r) {
    /******/ 					return r.error;
    /******/ 				})
    /******/ 				.filter(Boolean);
    /******/ 		
    /******/ 			if (errors.length > 0) {
    /******/ 				return setStatus("abort").then(function () {
    /******/ 					throw errors[0];
    /******/ 				});
    /******/ 			}
    /******/ 		
    /******/ 			// Now in "dispose" phase
    /******/ 			var disposePromise = setStatus("dispose");
    /******/ 		
    /******/ 			results.forEach(function (result) {
    /******/ 				if (result.dispose) result.dispose();
    /******/ 			});
    /******/ 		
    /******/ 			// Now in "apply" phase
    /******/ 			var applyPromise = setStatus("apply");
    /******/ 		
    /******/ 			var error;
    /******/ 			var reportError = function (err) {
    /******/ 				if (!error) error = err;
    /******/ 			};
    /******/ 		
    /******/ 			var outdatedModules = [];
    /******/ 			results.forEach(function (result) {
    /******/ 				if (result.apply) {
    /******/ 					var modules = result.apply(reportError);
    /******/ 					if (modules) {
    /******/ 						for (var i = 0; i < modules.length; i++) {
    /******/ 							outdatedModules.push(modules[i]);
    /******/ 						}
    /******/ 					}
    /******/ 				}
    /******/ 			});
    /******/ 		
    /******/ 			return Promise.all([disposePromise, applyPromise]).then(function () {
    /******/ 				// handle errors in accept handlers and self accepted module load
    /******/ 				if (error) {
    /******/ 					return setStatus("fail").then(function () {
    /******/ 						throw error;
    /******/ 					});
    /******/ 				}
    /******/ 		
    /******/ 				if (queuedInvalidatedModules) {
    /******/ 					return internalApply(options).then(function (list) {
    /******/ 						outdatedModules.forEach(function (moduleId) {
    /******/ 							if (list.indexOf(moduleId) < 0) list.push(moduleId);
    /******/ 						});
    /******/ 						return list;
    /******/ 					});
    /******/ 				}
    /******/ 		
    /******/ 				return setStatus("idle").then(function () {
    /******/ 					return outdatedModules;
    /******/ 				});
    /******/ 			});
    /******/ 		}
    /******/ 		
    /******/ 		function applyInvalidatedModules() {
    /******/ 			if (queuedInvalidatedModules) {
    /******/ 				if (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];
    /******/ 				Object.keys(__webpack_require__.hmrI).forEach(function (key) {
    /******/ 					queuedInvalidatedModules.forEach(function (moduleId) {
    /******/ 						__webpack_require__.hmrI[key](
    /******/ 							moduleId,
    /******/ 							currentUpdateApplyHandlers
    /******/ 						);
    /******/ 					});
    /******/ 				});
    /******/ 				queuedInvalidatedModules = undefined;
    /******/ 				return true;
    /******/ 			}
    /******/ 		}
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/publicPath */
    /******/ 	!function() {
    /******/ 		__webpack_require__.p = "/dist/";
    /******/ 	}();
    /******/ 	
    /******/ 	/* webpack/runtime/jsonp chunk loading */
    /******/ 	!function() {
    /******/ 		// no baseURI
    /******/ 		
    /******/ 		// object to store loaded and loading chunks
    /******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
    /******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
    /******/ 		var installedChunks = __webpack_require__.hmrS_jsonp = __webpack_require__.hmrS_jsonp || {
    /******/ 			"main": 0
    /******/ 		};
    /******/ 		
    /******/ 		// no chunk on demand loading
    /******/ 		
    /******/ 		// no prefetching
    /******/ 		
    /******/ 		// no preloaded
    /******/ 		
    /******/ 		var currentUpdatedModulesList;
    /******/ 		var waitingUpdateResolves = {};
    /******/ 		function loadUpdateChunk(chunkId) {
    /******/ 			return new Promise(function(resolve, reject) {
    /******/ 				waitingUpdateResolves[chunkId] = resolve;
    /******/ 				// start update chunk loading
    /******/ 				var url = __webpack_require__.p + __webpack_require__.hu(chunkId);
    /******/ 				// create error before stack unwound to get useful stacktrace later
    /******/ 				var error = new Error();
    /******/ 				var loadingEnded = function(event) {
    /******/ 					if(waitingUpdateResolves[chunkId]) {
    /******/ 						waitingUpdateResolves[chunkId] = undefined
    /******/ 						var errorType = event && (event.type === 'load' ? 'missing' : event.type);
    /******/ 						var realSrc = event && event.target && event.target.src;
    /******/ 						error.message = 'Loading hot update chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
    /******/ 						error.name = 'ChunkLoadError';
    /******/ 						error.type = errorType;
    /******/ 						error.request = realSrc;
    /******/ 						reject(error);
    /******/ 					}
    /******/ 				};
    /******/ 				__webpack_require__.l(url, loadingEnded);
    /******/ 			});
    /******/ 		}
    /******/ 		
    /******/ 		self["webpackHotUpdate"] = function(chunkId, moreModules, runtime) {
    /******/ 			for(var moduleId in moreModules) {
    /******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
    /******/ 					currentUpdate[moduleId] = moreModules[moduleId];
    /******/ 					if(currentUpdatedModulesList) currentUpdatedModulesList.push(moduleId);
    /******/ 				}
    /******/ 			}
    /******/ 			if(runtime) currentUpdateRuntime.push(runtime);
    /******/ 			if(waitingUpdateResolves[chunkId]) {
    /******/ 				waitingUpdateResolves[chunkId]();
    /******/ 				waitingUpdateResolves[chunkId] = undefined;
    /******/ 			}
    /******/ 		};
    /******/ 		
    /******/ 		var currentUpdateChunks;
    /******/ 		var currentUpdate;
    /******/ 		var currentUpdateRemovedChunks;
    /******/ 		var currentUpdateRuntime;
    /******/ 		function applyHandler(options) {
    /******/ 			if (__webpack_require__.f) delete __webpack_require__.f.jsonpHmr;
    /******/ 			currentUpdateChunks = undefined;
    /******/ 			function getAffectedModuleEffects(updateModuleId) {
    /******/ 				var outdatedModules = [updateModuleId];
    /******/ 				var outdatedDependencies = {};
    /******/ 		
    /******/ 				var queue = outdatedModules.map(function (id) {
    /******/ 					return {
    /******/ 						chain: [id],
    /******/ 						id: id
    /******/ 					};
    /******/ 				});
    /******/ 				while (queue.length > 0) {
    /******/ 					var queueItem = queue.pop();
    /******/ 					var moduleId = queueItem.id;
    /******/ 					var chain = queueItem.chain;
    /******/ 					var module = __webpack_require__.c[moduleId];
    /******/ 					if (
    /******/ 						!module ||
    /******/ 						(module.hot._selfAccepted && !module.hot._selfInvalidated)
    /******/ 					)
    /******/ 						continue;
    /******/ 					if (module.hot._selfDeclined) {
    /******/ 						return {
    /******/ 							type: "self-declined",
    /******/ 							chain: chain,
    /******/ 							moduleId: moduleId
    /******/ 						};
    /******/ 					}
    /******/ 					if (module.hot._main) {
    /******/ 						return {
    /******/ 							type: "unaccepted",
    /******/ 							chain: chain,
    /******/ 							moduleId: moduleId
    /******/ 						};
    /******/ 					}
    /******/ 					for (var i = 0; i < module.parents.length; i++) {
    /******/ 						var parentId = module.parents[i];
    /******/ 						var parent = __webpack_require__.c[parentId];
    /******/ 						if (!parent) continue;
    /******/ 						if (parent.hot._declinedDependencies[moduleId]) {
    /******/ 							return {
    /******/ 								type: "declined",
    /******/ 								chain: chain.concat([parentId]),
    /******/ 								moduleId: moduleId,
    /******/ 								parentId: parentId
    /******/ 							};
    /******/ 						}
    /******/ 						if (outdatedModules.indexOf(parentId) !== -1) continue;
    /******/ 						if (parent.hot._acceptedDependencies[moduleId]) {
    /******/ 							if (!outdatedDependencies[parentId])
    /******/ 								outdatedDependencies[parentId] = [];
    /******/ 							addAllToSet(outdatedDependencies[parentId], [moduleId]);
    /******/ 							continue;
    /******/ 						}
    /******/ 						delete outdatedDependencies[parentId];
    /******/ 						outdatedModules.push(parentId);
    /******/ 						queue.push({
    /******/ 							chain: chain.concat([parentId]),
    /******/ 							id: parentId
    /******/ 						});
    /******/ 					}
    /******/ 				}
    /******/ 		
    /******/ 				return {
    /******/ 					type: "accepted",
    /******/ 					moduleId: updateModuleId,
    /******/ 					outdatedModules: outdatedModules,
    /******/ 					outdatedDependencies: outdatedDependencies
    /******/ 				};
    /******/ 			}
    /******/ 		
    /******/ 			function addAllToSet(a, b) {
    /******/ 				for (var i = 0; i < b.length; i++) {
    /******/ 					var item = b[i];
    /******/ 					if (a.indexOf(item) === -1) a.push(item);
    /******/ 				}
    /******/ 			}
    /******/ 		
    /******/ 			// at begin all updates modules are outdated
    /******/ 			// the "outdated" status can propagate to parents if they don't accept the children
    /******/ 			var outdatedDependencies = {};
    /******/ 			var outdatedModules = [];
    /******/ 			var appliedUpdate = {};
    /******/ 		
    /******/ 			var warnUnexpectedRequire = function warnUnexpectedRequire(module) {
    /******/ 				console.warn(
    /******/ 					"[HMR] unexpected require(" + module.id + ") to disposed module"
    /******/ 				);
    /******/ 			};
    /******/ 		
    /******/ 			for (var moduleId in currentUpdate) {
    /******/ 				if (__webpack_require__.o(currentUpdate, moduleId)) {
    /******/ 					var newModuleFactory = currentUpdate[moduleId];
    /******/ 					/** @type {TODO} */
    /******/ 					var result;
    /******/ 					if (newModuleFactory) {
    /******/ 						result = getAffectedModuleEffects(moduleId);
    /******/ 					} else {
    /******/ 						result = {
    /******/ 							type: "disposed",
    /******/ 							moduleId: moduleId
    /******/ 						};
    /******/ 					}
    /******/ 					/** @type {Error|false} */
    /******/ 					var abortError = false;
    /******/ 					var doApply = false;
    /******/ 					var doDispose = false;
    /******/ 					var chainInfo = "";
    /******/ 					if (result.chain) {
    /******/ 						chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
    /******/ 					}
    /******/ 					switch (result.type) {
    /******/ 						case "self-declined":
    /******/ 							if (options.onDeclined) options.onDeclined(result);
    /******/ 							if (!options.ignoreDeclined)
    /******/ 								abortError = new Error(
    /******/ 									"Aborted because of self decline: " +
    /******/ 										result.moduleId +
    /******/ 										chainInfo
    /******/ 								);
    /******/ 							break;
    /******/ 						case "declined":
    /******/ 							if (options.onDeclined) options.onDeclined(result);
    /******/ 							if (!options.ignoreDeclined)
    /******/ 								abortError = new Error(
    /******/ 									"Aborted because of declined dependency: " +
    /******/ 										result.moduleId +
    /******/ 										" in " +
    /******/ 										result.parentId +
    /******/ 										chainInfo
    /******/ 								);
    /******/ 							break;
    /******/ 						case "unaccepted":
    /******/ 							if (options.onUnaccepted) options.onUnaccepted(result);
    /******/ 							if (!options.ignoreUnaccepted)
    /******/ 								abortError = new Error(
    /******/ 									"Aborted because " + moduleId + " is not accepted" + chainInfo
    /******/ 								);
    /******/ 							break;
    /******/ 						case "accepted":
    /******/ 							if (options.onAccepted) options.onAccepted(result);
    /******/ 							doApply = true;
    /******/ 							break;
    /******/ 						case "disposed":
    /******/ 							if (options.onDisposed) options.onDisposed(result);
    /******/ 							doDispose = true;
    /******/ 							break;
    /******/ 						default:
    /******/ 							throw new Error("Unexception type " + result.type);
    /******/ 					}
    /******/ 					if (abortError) {
    /******/ 						return {
    /******/ 							error: abortError
    /******/ 						};
    /******/ 					}
    /******/ 					if (doApply) {
    /******/ 						appliedUpdate[moduleId] = newModuleFactory;
    /******/ 						addAllToSet(outdatedModules, result.outdatedModules);
    /******/ 						for (moduleId in result.outdatedDependencies) {
    /******/ 							if (__webpack_require__.o(result.outdatedDependencies, moduleId)) {
    /******/ 								if (!outdatedDependencies[moduleId])
    /******/ 									outdatedDependencies[moduleId] = [];
    /******/ 								addAllToSet(
    /******/ 									outdatedDependencies[moduleId],
    /******/ 									result.outdatedDependencies[moduleId]
    /******/ 								);
    /******/ 							}
    /******/ 						}
    /******/ 					}
    /******/ 					if (doDispose) {
    /******/ 						addAllToSet(outdatedModules, [result.moduleId]);
    /******/ 						appliedUpdate[moduleId] = warnUnexpectedRequire;
    /******/ 					}
    /******/ 				}
    /******/ 			}
    /******/ 			currentUpdate = undefined;
    /******/ 		
    /******/ 			// Store self accepted outdated modules to require them later by the module system
    /******/ 			var outdatedSelfAcceptedModules = [];
    /******/ 			for (var j = 0; j < outdatedModules.length; j++) {
    /******/ 				var outdatedModuleId = outdatedModules[j];
    /******/ 				var module = __webpack_require__.c[outdatedModuleId];
    /******/ 				if (
    /******/ 					module &&
    /******/ 					(module.hot._selfAccepted || module.hot._main) &&
    /******/ 					// removed self-accepted modules should not be required
    /******/ 					appliedUpdate[outdatedModuleId] !== warnUnexpectedRequire &&
    /******/ 					// when called invalidate self-accepting is not possible
    /******/ 					!module.hot._selfInvalidated
    /******/ 				) {
    /******/ 					outdatedSelfAcceptedModules.push({
    /******/ 						module: outdatedModuleId,
    /******/ 						require: module.hot._requireSelf,
    /******/ 						errorHandler: module.hot._selfAccepted
    /******/ 					});
    /******/ 				}
    /******/ 			}
    /******/ 		
    /******/ 			var moduleOutdatedDependencies;
    /******/ 		
    /******/ 			return {
    /******/ 				dispose: function () {
    /******/ 					currentUpdateRemovedChunks.forEach(function (chunkId) {
    /******/ 						delete installedChunks[chunkId];
    /******/ 					});
    /******/ 					currentUpdateRemovedChunks = undefined;
    /******/ 		
    /******/ 					var idx;
    /******/ 					var queue = outdatedModules.slice();
    /******/ 					while (queue.length > 0) {
    /******/ 						var moduleId = queue.pop();
    /******/ 						var module = __webpack_require__.c[moduleId];
    /******/ 						if (!module) continue;
    /******/ 		
    /******/ 						var data = {};
    /******/ 		
    /******/ 						// Call dispose handlers
    /******/ 						var disposeHandlers = module.hot._disposeHandlers;
    /******/ 						for (j = 0; j < disposeHandlers.length; j++) {
    /******/ 							disposeHandlers[j].call(null, data);
    /******/ 						}
    /******/ 						__webpack_require__.hmrD[moduleId] = data;
    /******/ 		
    /******/ 						// disable module (this disables requires from this module)
    /******/ 						module.hot.active = false;
    /******/ 		
    /******/ 						// remove module from cache
    /******/ 						delete __webpack_require__.c[moduleId];
    /******/ 		
    /******/ 						// when disposing there is no need to call dispose handler
    /******/ 						delete outdatedDependencies[moduleId];
    /******/ 		
    /******/ 						// remove "parents" references from all children
    /******/ 						for (j = 0; j < module.children.length; j++) {
    /******/ 							var child = __webpack_require__.c[module.children[j]];
    /******/ 							if (!child) continue;
    /******/ 							idx = child.parents.indexOf(moduleId);
    /******/ 							if (idx >= 0) {
    /******/ 								child.parents.splice(idx, 1);
    /******/ 							}
    /******/ 						}
    /******/ 					}
    /******/ 		
    /******/ 					// remove outdated dependency from module children
    /******/ 					var dependency;
    /******/ 					for (var outdatedModuleId in outdatedDependencies) {
    /******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
    /******/ 							module = __webpack_require__.c[outdatedModuleId];
    /******/ 							if (module) {
    /******/ 								moduleOutdatedDependencies =
    /******/ 									outdatedDependencies[outdatedModuleId];
    /******/ 								for (j = 0; j < moduleOutdatedDependencies.length; j++) {
    /******/ 									dependency = moduleOutdatedDependencies[j];
    /******/ 									idx = module.children.indexOf(dependency);
    /******/ 									if (idx >= 0) module.children.splice(idx, 1);
    /******/ 								}
    /******/ 							}
    /******/ 						}
    /******/ 					}
    /******/ 				},
    /******/ 				apply: function (reportError) {
    /******/ 					// insert new code
    /******/ 					for (var updateModuleId in appliedUpdate) {
    /******/ 						if (__webpack_require__.o(appliedUpdate, updateModuleId)) {
    /******/ 							__webpack_require__.m[updateModuleId] = appliedUpdate[updateModuleId];
    /******/ 						}
    /******/ 					}
    /******/ 		
    /******/ 					// run new runtime modules
    /******/ 					for (var i = 0; i < currentUpdateRuntime.length; i++) {
    /******/ 						currentUpdateRuntime[i](__webpack_require__);
    /******/ 					}
    /******/ 		
    /******/ 					// call accept handlers
    /******/ 					for (var outdatedModuleId in outdatedDependencies) {
    /******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
    /******/ 							var module = __webpack_require__.c[outdatedModuleId];
    /******/ 							if (module) {
    /******/ 								moduleOutdatedDependencies =
    /******/ 									outdatedDependencies[outdatedModuleId];
    /******/ 								var callbacks = [];
    /******/ 								var errorHandlers = [];
    /******/ 								var dependenciesForCallbacks = [];
    /******/ 								for (var j = 0; j < moduleOutdatedDependencies.length; j++) {
    /******/ 									var dependency = moduleOutdatedDependencies[j];
    /******/ 									var acceptCallback =
    /******/ 										module.hot._acceptedDependencies[dependency];
    /******/ 									var errorHandler =
    /******/ 										module.hot._acceptedErrorHandlers[dependency];
    /******/ 									if (acceptCallback) {
    /******/ 										if (callbacks.indexOf(acceptCallback) !== -1) continue;
    /******/ 										callbacks.push(acceptCallback);
    /******/ 										errorHandlers.push(errorHandler);
    /******/ 										dependenciesForCallbacks.push(dependency);
    /******/ 									}
    /******/ 								}
    /******/ 								for (var k = 0; k < callbacks.length; k++) {
    /******/ 									try {
    /******/ 										callbacks[k].call(null, moduleOutdatedDependencies);
    /******/ 									} catch (err) {
    /******/ 										if (typeof errorHandlers[k] === "function") {
    /******/ 											try {
    /******/ 												errorHandlers[k](err, {
    /******/ 													moduleId: outdatedModuleId,
    /******/ 													dependencyId: dependenciesForCallbacks[k]
    /******/ 												});
    /******/ 											} catch (err2) {
    /******/ 												if (options.onErrored) {
    /******/ 													options.onErrored({
    /******/ 														type: "accept-error-handler-errored",
    /******/ 														moduleId: outdatedModuleId,
    /******/ 														dependencyId: dependenciesForCallbacks[k],
    /******/ 														error: err2,
    /******/ 														originalError: err
    /******/ 													});
    /******/ 												}
    /******/ 												if (!options.ignoreErrored) {
    /******/ 													reportError(err2);
    /******/ 													reportError(err);
    /******/ 												}
    /******/ 											}
    /******/ 										} else {
    /******/ 											if (options.onErrored) {
    /******/ 												options.onErrored({
    /******/ 													type: "accept-errored",
    /******/ 													moduleId: outdatedModuleId,
    /******/ 													dependencyId: dependenciesForCallbacks[k],
    /******/ 													error: err
    /******/ 												});
    /******/ 											}
    /******/ 											if (!options.ignoreErrored) {
    /******/ 												reportError(err);
    /******/ 											}
    /******/ 										}
    /******/ 									}
    /******/ 								}
    /******/ 							}
    /******/ 						}
    /******/ 					}
    /******/ 		
    /******/ 					// Load self accepted modules
    /******/ 					for (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {
    /******/ 						var item = outdatedSelfAcceptedModules[o];
    /******/ 						var moduleId = item.module;
    /******/ 						try {
    /******/ 							item.require(moduleId);
    /******/ 						} catch (err) {
    /******/ 							if (typeof item.errorHandler === "function") {
    /******/ 								try {
    /******/ 									item.errorHandler(err, {
    /******/ 										moduleId: moduleId,
    /******/ 										module: __webpack_require__.c[moduleId]
    /******/ 									});
    /******/ 								} catch (err2) {
    /******/ 									if (options.onErrored) {
    /******/ 										options.onErrored({
    /******/ 											type: "self-accept-error-handler-errored",
    /******/ 											moduleId: moduleId,
    /******/ 											error: err2,
    /******/ 											originalError: err
    /******/ 										});
    /******/ 									}
    /******/ 									if (!options.ignoreErrored) {
    /******/ 										reportError(err2);
    /******/ 										reportError(err);
    /******/ 									}
    /******/ 								}
    /******/ 							} else {
    /******/ 								if (options.onErrored) {
    /******/ 									options.onErrored({
    /******/ 										type: "self-accept-errored",
    /******/ 										moduleId: moduleId,
    /******/ 										error: err
    /******/ 									});
    /******/ 								}
    /******/ 								if (!options.ignoreErrored) {
    /******/ 									reportError(err);
    /******/ 								}
    /******/ 							}
    /******/ 						}
    /******/ 					}
    /******/ 		
    /******/ 					return outdatedModules;
    /******/ 				}
    /******/ 			};
    /******/ 		}
    /******/ 		__webpack_require__.hmrI.jsonp = function (moduleId, applyHandlers) {
    /******/ 			if (!currentUpdate) {
    /******/ 				currentUpdate = {};
    /******/ 				currentUpdateRuntime = [];
    /******/ 				currentUpdateRemovedChunks = [];
    /******/ 				applyHandlers.push(applyHandler);
    /******/ 			}
    /******/ 			if (!__webpack_require__.o(currentUpdate, moduleId)) {
    /******/ 				currentUpdate[moduleId] = __webpack_require__.m[moduleId];
    /******/ 			}
    /******/ 		};
    /******/ 		__webpack_require__.hmrC.jsonp = function (
    /******/ 			chunkIds,
    /******/ 			removedChunks,
    /******/ 			removedModules,
    /******/ 			promises,
    /******/ 			applyHandlers,
    /******/ 			updatedModulesList
    /******/ 		) {
    /******/ 			applyHandlers.push(applyHandler);
    /******/ 			currentUpdateChunks = {};
    /******/ 			currentUpdateRemovedChunks = removedChunks;
    /******/ 			currentUpdate = removedModules.reduce(function (obj, key) {
    /******/ 				obj[key] = false;
    /******/ 				return obj;
    /******/ 			}, {});
    /******/ 			currentUpdateRuntime = [];
    /******/ 			chunkIds.forEach(function (chunkId) {
    /******/ 				if (
    /******/ 					__webpack_require__.o(installedChunks, chunkId) &&
    /******/ 					installedChunks[chunkId] !== undefined
    /******/ 				) {
    /******/ 					promises.push(loadUpdateChunk(chunkId, updatedModulesList));
    /******/ 					currentUpdateChunks[chunkId] = true;
    /******/ 				}
    /******/ 			});
    /******/ 			if (__webpack_require__.f) {
    /******/ 				__webpack_require__.f.jsonpHmr = function (chunkId, promises) {
    /******/ 					if (
    /******/ 						currentUpdateChunks &&
    /******/ 						!__webpack_require__.o(currentUpdateChunks, chunkId) &&
    /******/ 						__webpack_require__.o(installedChunks, chunkId) &&
    /******/ 						installedChunks[chunkId] !== undefined
    /******/ 					) {
    /******/ 						promises.push(loadUpdateChunk(chunkId));
    /******/ 						currentUpdateChunks[chunkId] = true;
    /******/ 					}
    /******/ 				};
    /******/ 			}
    /******/ 		};
    /******/ 		
    /******/ 		__webpack_require__.hmrM = function() {
    /******/ 			if (typeof fetch === "undefined") throw new Error("No browser support: need fetch API");
    /******/ 			return fetch(__webpack_require__.p + __webpack_require__.hmrF()).then(function(response) {
    /******/ 				if(response.status === 404) return; // no update available
    /******/ 				if(!response.ok) throw new Error("Failed to fetch update manifest " + response.statusText);
    /******/ 				return response.json();
    /******/ 			});
    /******/ 		};
    /******/ 		
    /******/ 		// no on chunks loaded
    /******/ 		
    /******/ 		// no jsonp function
    /******/ 	}();
    /******/ 	
    /************************************************************************/
    /******/ 	
    /******/ 	// module cache are used so entry inlining is disabled
    /******/ 	// startup
    /******/ 	// Load entry module and return exports
    /******/ 	__webpack_require__("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=5000&pathname=%2Fws&logging=info&reconnect=10");
    /******/ 	__webpack_require__("./node_modules/webpack/hot/dev-server.js");
    /******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
    /******/ 	
    /******/ })()
    ;
    //# sourceMappingURL=data:application/json;charset=utf-8;base64,